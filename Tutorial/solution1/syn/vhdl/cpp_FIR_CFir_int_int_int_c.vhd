-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
-- Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity cpp_FIR_CFir_int_int_int_c is 
    generic(
             DataWidth     : integer := 16; 
             AddressWidth     : integer := 7; 
             AddressRange    : integer := 85
    ); 
    port (
          address0      : in std_logic_vector(AddressWidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DataWidth-1 downto 0);
          reset     : in std_logic;
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of cpp_FIR_CFir_int_int_int_c is 

signal address0_tmp : std_logic_vector(AddressWidth-1 downto 0); 
type mem_array is array (0 to AddressRange-1) of std_logic_vector (DataWidth-1 downto 0); 
signal mem : mem_array := (
    0 => "0000000110001100", 1 => "0000000100100010", 2 => "0000000011001001", 
    3 => "1111111110111111", 4 => "1111111000100011", 5 => "1111110001011110", 
    6 => "1111101100001010", 7 => "1111101010111001", 8 => "1111101110110100", 
    9 => "1111110111001101", 10 => "0000000001011100", 11 => "0000001001110011", 
    12 => "0000001100111110", 13 => "0000001001011011", 14 => "0000000000011000", 
    15 => "1111110101101000", 16 => "1111101110000101", 17 => "1111101101110001", 
    18 => "1111110101110011", 19 => "0000000011100110", 20 => "0000010001100000", 
    21 => "0000011001000001", 22 => "0000010101101111", 23 => "0000000111101010", 
    24 => "1111110011110000", 25 => "1111100010100010", 26 => "1111011100100011", 
    27 => "1111100110100001", 28 => "1111111110011101", 29 => "0000011011100101", 
    30 => "0000110001000010", 31 => "0000110011000101", 32 => "0000011100011110", 
    33 => "1111110010001011", 34 => "1111000011010100", 35 => "1110100101000011", 
    36 => "1110101011011001", 37 => "1111100001100100", 38 => "0001000100100001", 
    39 => "0011000010000111", 40 => "0100111101100100", 41 => "0110010111101100", 
    42 => "0110111000101100", 43 => "0110010111101100", 44 => "0100111101100100", 
    45 => "0011000010000111", 46 => "0001000100100001", 47 => "1111100001100100", 
    48 => "1110101011011001", 49 => "1110100101000011", 50 => "1111000011010100", 
    51 => "1111110010001011", 52 => "0000011100011110", 53 => "0000110011000101", 
    54 => "0000110001000010", 55 => "0000011011100101", 56 => "1111111110011101", 
    57 => "1111100110100001", 58 => "1111011100100011", 59 => "1111100010100010", 
    60 => "1111110011110000", 61 => "0000000111101010", 62 => "0000010101101111", 
    63 => "0000011001000001", 64 => "0000010001100000", 65 => "0000000011100110", 
    66 => "1111110101110011", 67 => "1111101101110001", 68 => "1111101110000101", 
    69 => "1111110101101000", 70 => "0000000000011000", 71 => "0000001001011011", 
    72 => "0000001100111110", 73 => "0000001001110011", 74 => "0000000001011100", 
    75 => "1111110111001101", 76 => "1111101110110100", 77 => "1111101010111001", 
    78 => "1111101100001010", 79 => "1111110001011110", 80 => "1111111000100011", 
    81 => "1111111110111111", 82 => "0000000011001001", 83 => "0000000100100010", 
    84 => "0000000110001100" );


begin 


memory_access_guard_0: process (address0) 
begin
      address0_tmp <= address0;
--synthesis translate_off
      if (CONV_INTEGER(address0) > AddressRange-1) then
           address0_tmp <= (others => '0');
      else 
           address0_tmp <= address0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(address0_tmp)); 
        end if;
    end if;
end process;

end rtl;

