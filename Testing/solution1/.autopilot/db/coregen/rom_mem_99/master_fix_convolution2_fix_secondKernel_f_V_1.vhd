-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
-- Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity master_fix_convolution2_fix_secondKernel_f_V_1 is 
    generic(
             DataWidth     : integer := 20; 
             AddressWidth     : integer := 7; 
             AddressRange    : integer := 128
    ); 
    port (
          address0      : in std_logic_vector(AddressWidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DataWidth-1 downto 0);
          reset     : in std_logic;
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of master_fix_convolution2_fix_secondKernel_f_V_1 is 

signal address0_tmp : std_logic_vector(AddressWidth-1 downto 0); 
type mem_array is array (0 to AddressRange-1) of std_logic_vector (DataWidth-1 downto 0); 
signal mem : mem_array := (
    0 => "11100101010001100010", 1 => "00111011010000101111", 
    2 => "11011111111000010101", 3 => "00000000001011000101", 
    4 => "00001010011011101011", 5 => "11100101010101010001", 
    6 => "11001000111001111000", 7 => "00101111100110101100", 
    8 => "11111101100011001010", 9 => "00101100000001101110", 
    10 => "11110111011111100000", 11 => "00110001011001111100", 
    12 => "00000010101111001101", 13 => "11111010001100110100", 
    14 => "11111011110111001000", 15 => "11101100011111111001", 
    16 => "00001001001100100100", 17 => "11110011101110011101", 
    18 => "11100001101001000100", 19 => "11010100110010011101", 
    20 => "11101011110111000011", 21 => "11111010111110101010", 
    22 => "00001001000011101010", 23 => "00001101110101001000", 
    24 => "00010100000101010101", 25 => "00100101010001111010", 
    26 => "11111110110110111100", 27 => "00001100111100100001", 
    28 => "11101010111111111011", 29 => "11110001011100000001", 
    30 => "11011111001101011000", 31 => "00001111001101000100", 
    32 => "11101110001101001101", 33 => "00000111110101111110", 
    34 => "11110101110110001110", 35 => "11101010001100100001", 
    36 => "00010000111111101100", 37 => "11110101001111010100", 
    38 => "11110000100111001010", 39 => "11110101001111010100", 
    40 => "00000010001011101011", 41 => "00100011010111101110", 
    42 => "00001001010100111001", 43 => "11100110100000001100", 
    44 => "11100000101001011011", 45 => "11001101001011010110", 
    46 => "10111101111101111000", 47 => "00100000101011010101", 
    48 => "00011000010111100010", 49 => "00000101011001000011", 
    50 => "11111111110100100001", 51 => "11111001011000110110", 
    52 => "00001010101000110100", 53 => "11100000110100000111", 
    54 => "11100001110010011011", 55 => "11111010101000011111", 
    56 => "11110000111010010110", 57 => "00001000001001101000", 
    58 => "00000111010010011010", 59 => "11101011010011011110", 
    60 => "00001010111010101100", 61 => "00110000010010000101", 
    62 => "11111001000100011110", 63 => "11010110011010011101", 
    64 => "00011010011010001100", 65 => "00001010000011011000", 
    66 => "11011100111110010100", 67 => "11110010100110110100", 
    68 => "11100011100100001111", 69 => "11111100100110010111", 
    70 => "00000101101111010101", 71 => "11101000100000101110", 
    72 => "00010101110101010101", 73 => "01000000100011001101", 
    74 => "11011100000001001101", 75 => "00010100100110100100", 
    76 => "11111100111101100000", 77 => "11101010110100001110", 
    78 => "11100011100111000100", 79 => "11111010111010000111", 
    80 => "11111100100011111011", 81 => "11110010001110000010", 
    82 => "11111000010100100101", 83 => "11010101110101101100", 
    84 => "00011001010101101011", 85 => "00001001100011111011", 
    86 => "00000101110011101011", 87 => "00000111001111100000", 
    88 => "00000010101100010110", 89 => "11011100101111110100", 
    90 => "00000110000101011000", 91 => "00000100011100011101", 
    92 => "00011011010111011100", 93 => "11101100111000011101", 
    94 => "11111111001101111110", 95 => "11101110100011100111", 
    96 => "11111001110101100110", 97 => "11111001101110000010", 
    98 => "00000010001100100110", 99 => "00010001000000111101", 
    100 => "10001001111000001001", 101 => "11101110011110101001", 
    102 => "11111111101011100001", 103 => "00000001100111100111", 
    104 => "11110101001010110101", 105 => "00011011100000111011", 
    106 => "11111010110110011010", 107 => "11101001001001100100", 
    108 => "11101011000110010001", 109 => "00000000011110101010", 
    110 => "11111010100110100110", 111 => "00000001100011100001", 
    112 => "00000110011101010011", 113 => "00001000110101000000", 
    114 => "11100010111001000000", 115 => "11100000011000111101", 
    116 => "11100011100110101001", 117 => "11101111101100100111", 
    118 => "11101001001110011110", 119 => "00000101101100110000", 
    120 => "11110001111101110010", 121 => "00000010001111010100", 
    122 => "00001011100101111110", 123 => "00000110100000001001", 
    124 => "00010110010101101010", 125 => "00100001110010100100", 
    126 => "00010001001100000111", 127 => "11101110101101000000" );


begin 


memory_access_guard_0: process (address0) 
begin
      address0_tmp <= address0;
--synthesis translate_off
      if (CONV_INTEGER(address0) > AddressRange-1) then
           address0_tmp <= (others => '0');
      else 
           address0_tmp <= address0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(address0_tmp)); 
        end if;
    end if;
end process;

end rtl;

