-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
-- Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity master_fix_convolution2_fix_secondKernel_f_V_3 is 
    generic(
             DataWidth     : integer := 21; 
             AddressWidth     : integer := 7; 
             AddressRange    : integer := 128
    ); 
    port (
          address0      : in std_logic_vector(AddressWidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DataWidth-1 downto 0);
          reset     : in std_logic;
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of master_fix_convolution2_fix_secondKernel_f_V_3 is 

signal address0_tmp : std_logic_vector(AddressWidth-1 downto 0); 
type mem_array is array (0 to AddressRange-1) of std_logic_vector (DataWidth-1 downto 0); 
signal mem : mem_array := (
    0 => "000001110110001110001", 1 => "000000111000011110110", 
    2 => "000001001110010001010", 3 => "000000100000110011011", 
    4 => "000000000010101000001", 5 => "111110101011000000110", 
    6 => "111101010000000001010", 7 => "000000100001001100110", 
    8 => "111110110111011000111", 9 => "111111110011101001001", 
    10 => "111111110011011000111", 11 => "000000011111000110011", 
    12 => "000010101101111011011", 13 => "111111100111001000011", 
    14 => "111110000000100011000", 15 => "111110111100101011111", 
    16 => "001001110111010101111", 17 => "000000111000011010010", 
    18 => "111101101001110101010", 19 => "111100101111011000110", 
    20 => "000011100011101011001", 21 => "111111101110101001001", 
    22 => "111111101110000000101", 23 => "000001101011000100001", 
    24 => "111101111111101011111", 25 => "100111111001011100101", 
    26 => "111111000000101101111", 27 => "000001000000100001001", 
    28 => "111100001010110101110", 29 => "110101000111100101000", 
    30 => "110100010011000101110", 31 => "111110001100111100110", 
    32 => "111110010110011011001", 33 => "110110110100001011101", 
    34 => "111101000110001010111", 35 => "000000111000101111001", 
    36 => "111001111001100001000", 37 => "111101010100000010101", 
    38 => "111100001001011101011", 39 => "000011100011001110011", 
    40 => "000000100000001111001", 41 => "111110110111110011100", 
    42 => "111110011000111100110", 43 => "000000100000000111010", 
    44 => "000010000100010000001", 45 => "000100000100000001101", 
    46 => "000111101000001110010", 47 => "111100010111111110111", 
    48 => "111110101001101011010", 49 => "000000101000000001001", 
    50 => "111101011011100111010", 51 => "111101010111110110001", 
    52 => "111101010100100111011", 53 => "111101111001101110000", 
    54 => "111110100110100110000", 55 => "000000000001000000011", 
    56 => "000000011001001110011", 57 => "000001000100001111110", 
    58 => "111111011101001100011", 59 => "111101000011111000001", 
    60 => "000000010000011001110", 61 => "111111010111000101111", 
    62 => "000000000111101110000", 63 => "111001111000101011010", 
    64 => "000001000000001011101", 65 => "111100110010100110111", 
    66 => "000011011000100100011", 67 => "111101110001000000111", 
    68 => "000110011101100100001", 69 => "111010011000011011101", 
    70 => "111010100011111100011", 71 => "110101001101011100010", 
    72 => "000001001000000011110", 73 => "000011011001010010010", 
    74 => "111010000010100111000", 75 => "111111101100000100111", 
    76 => "000001101110100100000", 77 => "111111000010111111111", 
    78 => "000000000110101011010", 79 => "111111100000110110100", 
    80 => "111111000101110001011", 81 => "111001100101110100110", 
    82 => "000000001100000000100", 83 => "000001111001000000100", 
    84 => "000001010101001110101", 85 => "111101100000010011101", 
    86 => "111101101011001111101", 87 => "111011101100001101001", 
    88 => "111110011110000011110", 89 => "111101010101001000000", 
    90 => "111110010011000111111", 91 => "111100001101101001000", 
    92 => "111101110000000101101", 93 => "000010001100110000111", 
    94 => "000011011110110100011", 95 => "111101110010100100000", 
    96 => "111111101110101100100", 97 => "111011100110011101011", 
    98 => "111111000001100110010", 99 => "111110100100011101100", 
    100 => "111101100101001100101", 101 => "000010101110000101001", 
    102 => "000011110001101000110", 103 => "111111101000001100100", 
    104 => "111110010101100111111", 105 => "110100001100011000000", 
    106 => "000001000010100110111", 107 => "000001011110001001110", 
    108 => "110000000000110010011", 109 => "110001011000110101111", 
    110 => "110001011000010100011", 111 => "000000010011111110010", 
    112 => "111110011110011001010", 113 => "110000111111110001101", 
    114 => "000000000110101011111", 115 => "000001110110010011011", 
    116 => "111111110101110010001", 117 => "111011110111111110100", 
    118 => "000000011010000000001", 119 => "111101110111111111100", 
    120 => "111111000000111001000", 121 => "111100111010000010001", 
    122 => "000001110000111011011", 123 => "000010010011110101010", 
    124 => "111110001010100101001", 125 => "111111001010011101010", 
    126 => "000001011000100001100", 127 => "000001010010110111110" );


begin 


memory_access_guard_0: process (address0) 
begin
      address0_tmp <= address0;
--synthesis translate_off
      if (CONV_INTEGER(address0) > AddressRange-1) then
           address0_tmp <= (others => '0');
      else 
           address0_tmp <= address0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(address0_tmp)); 
        end if;
    end if;
end process;

end rtl;

