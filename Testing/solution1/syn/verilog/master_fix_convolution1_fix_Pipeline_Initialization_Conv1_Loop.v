// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
// Version: 2021.1
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module master_fix_convolution1_fix_Pipeline_Initialization_Conv1_Loop (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_r_address0,
        input_r_ce0,
        input_r_q0,
        tmp1_V_11_0_out,
        tmp1_V_11_0_out_ap_vld,
        tmp1_V_10_0_out,
        tmp1_V_10_0_out_ap_vld,
        tmp1_V_11_4_out,
        tmp1_V_11_4_out_ap_vld,
        tmp1_V_11_6_out,
        tmp1_V_11_6_out_ap_vld,
        tmp1_V_5_0_out,
        tmp1_V_5_0_out_ap_vld,
        tmp1_V_4_0_out,
        tmp1_V_4_0_out_ap_vld,
        tmp1_V_2_0_out,
        tmp1_V_2_0_out_ap_vld,
        tmp1_V_1_0_out,
        tmp1_V_1_0_out_ap_vld,
        tmp1_V_0_0_out,
        tmp1_V_0_0_out_ap_vld,
        tmp1_V_11_9_out,
        tmp1_V_11_9_out_ap_vld,
        tmp1_V_11_11_out,
        tmp1_V_11_11_out_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [8:0] input_r_address0;
output   input_r_ce0;
input  [15:0] input_r_q0;
output  [11:0] tmp1_V_11_0_out;
output   tmp1_V_11_0_out_ap_vld;
output  [11:0] tmp1_V_10_0_out;
output   tmp1_V_10_0_out_ap_vld;
output  [11:0] tmp1_V_11_4_out;
output   tmp1_V_11_4_out_ap_vld;
output  [11:0] tmp1_V_11_6_out;
output   tmp1_V_11_6_out_ap_vld;
output  [11:0] tmp1_V_5_0_out;
output   tmp1_V_5_0_out_ap_vld;
output  [11:0] tmp1_V_4_0_out;
output   tmp1_V_4_0_out_ap_vld;
output  [11:0] tmp1_V_2_0_out;
output   tmp1_V_2_0_out_ap_vld;
output  [11:0] tmp1_V_1_0_out;
output   tmp1_V_1_0_out_ap_vld;
output  [11:0] tmp1_V_0_0_out;
output   tmp1_V_0_0_out_ap_vld;
output  [11:0] tmp1_V_11_9_out;
output   tmp1_V_11_9_out_ap_vld;
output  [11:0] tmp1_V_11_11_out;
output   tmp1_V_11_11_out_ap_vld;

reg ap_idle;
reg input_r_ce0;
reg tmp1_V_11_0_out_ap_vld;
reg tmp1_V_10_0_out_ap_vld;
reg tmp1_V_11_4_out_ap_vld;
reg tmp1_V_11_6_out_ap_vld;
reg tmp1_V_5_0_out_ap_vld;
reg tmp1_V_4_0_out_ap_vld;
reg tmp1_V_2_0_out_ap_vld;
reg tmp1_V_1_0_out_ap_vld;
reg tmp1_V_0_0_out_ap_vld;
reg tmp1_V_11_9_out_ap_vld;
reg tmp1_V_11_11_out_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln19_fu_247_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
reg   [2:0] r_2_reg_838;
reg   [2:0] r_2_reg_838_pp0_iter1_reg;
reg   [0:0] icmp_ln19_reg_847;
wire   [1:0] j_fu_271_p3;
reg   [1:0] j_reg_851;
wire   [63:0] zext_ln24_1_fu_394_p1;
wire    ap_block_pp0_stage0;
reg   [2:0] r_fu_88;
wire    ap_loop_init;
reg   [2:0] ap_sig_allocacmp_r_2;
wire   [2:0] add_ln19_fu_253_p2;
reg   [11:0] tmp1_V_11_2_fu_92;
wire   [11:0] tmp1_V_11_20_fu_639_p3;
reg   [11:0] tmp1_V_11_9_fu_96;
wire   [11:0] tmp1_V_11_19_fu_631_p3;
reg   [11:0] tmp1_V_0_0_fu_100;
wire   [11:0] select_ln23_8_fu_539_p3;
reg   [11:0] tmp1_V_1_0_fu_104;
wire   [11:0] select_ln23_7_fu_531_p3;
reg   [11:0] tmp1_V_2_0_fu_108;
wire   [11:0] select_ln23_5_fu_515_p3;
reg   [11:0] tmp1_V_4_0_fu_112;
wire   [11:0] select_ln23_3_fu_499_p3;
reg   [11:0] tmp1_V_5_0_fu_116;
wire   [11:0] select_ln23_1_fu_483_p3;
reg   [11:0] tmp1_V_11_6_fu_120;
wire   [11:0] tmp1_V_11_18_fu_607_p3;
reg   [11:0] tmp1_V_11_4_fu_124;
wire   [11:0] tmp1_V_11_16_fu_591_p3;
reg   [11:0] tmp1_V_11_11_fu_128;
wire   [11:0] tmp1_V_11_15_fu_575_p3;
reg   [11:0] tmp1_V_11_13_fu_132;
wire   [11:0] tmp1_V_11_fu_559_p3;
reg   [15:0] i_fu_136;
reg   [15:0] ap_sig_allocacmp_i_load;
wire   [15:0] select_ln21_fu_342_p3;
wire   [0:0] icmp_ln21_fu_279_p2;
wire    ap_block_pp0_stage0_01001;
wire   [1:0] empty_fu_243_p1;
wire   [0:0] icmp_ln20_fu_259_p2;
wire   [1:0] add_ln20_fu_265_p2;
wire  signed [15:0] sext_ln21_fu_288_p0;
wire  signed [15:0] trunc_ln21_fu_292_p0;
wire  signed [16:0] sext_ln21_fu_288_p1;
wire   [16:0] add_ln21_fu_296_p2;
wire   [6:0] trunc_ln21_fu_292_p1;
wire   [6:0] xor_ln21_fu_314_p2;
wire   [15:0] p_and_t_cast_fu_320_p3;
wire   [6:0] trunc_ln21_1_fu_310_p1;
wire   [0:0] tmp_fu_302_p3;
wire   [15:0] sub_ln21_fu_328_p2;
wire   [15:0] tmp_s_fu_334_p3;
wire   [6:0] trunc_ln24_1_fu_367_p1;
wire   [8:0] tmp_49_cast_fu_371_p3;
wire   [8:0] trunc_ln24_fu_363_p1;
wire   [8:0] sub_ln24_fu_379_p2;
wire   [8:0] zext_ln24_fu_385_p1;
wire   [8:0] add_ln24_fu_388_p2;
wire   [0:0] icmp_ln23_4_fu_452_p2;
wire   [0:0] icmp_ln23_3_fu_447_p2;
wire   [0:0] icmp_ln23_2_fu_442_p2;
wire   [0:0] icmp_ln23_1_fu_437_p2;
wire   [0:0] icmp_ln23_fu_432_p2;
wire   [0:0] or_ln23_fu_457_p2;
wire   [0:0] or_ln23_1_fu_463_p2;
wire   [0:0] or_ln23_2_fu_477_p2;
wire   [11:0] select_ln23_fu_469_p3;
wire   [11:0] select_ln23_2_fu_491_p3;
wire   [11:0] select_ln23_4_fu_507_p3;
wire   [11:0] select_ln23_6_fu_523_p3;
wire   [11:0] tmp1_V_11_21_fu_547_p1;
wire   [11:0] select_ln24_fu_551_p3;
wire   [11:0] select_ln24_2_fu_567_p3;
wire   [11:0] select_ln24_4_fu_583_p3;
wire   [11:0] tmp1_V_11_17_fu_599_p3;
wire   [11:0] select_ln24_8_fu_615_p3;
wire   [11:0] select_ln24_9_fu_623_p3;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
reg    ap_condition_511;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_done_reg = 1'b0;
end

master_fix_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((1'b1 == ap_condition_511)) begin
            i_fu_136 <= select_ln21_fu_342_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_136 <= 16'd65535;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln19_fu_247_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            r_fu_88 <= add_ln19_fu_253_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            r_fu_88 <= 3'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        icmp_ln19_reg_847 <= icmp_ln19_fu_247_p2;
        r_2_reg_838 <= ap_sig_allocacmp_r_2;
        r_2_reg_838_pp0_iter1_reg <= r_2_reg_838;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln19_fu_247_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        j_reg_851 <= j_fu_271_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        tmp1_V_0_0_fu_100 <= select_ln23_8_fu_539_p3;
        tmp1_V_11_11_fu_128 <= tmp1_V_11_15_fu_575_p3;
        tmp1_V_11_13_fu_132 <= tmp1_V_11_fu_559_p3;
        tmp1_V_11_2_fu_92 <= tmp1_V_11_20_fu_639_p3;
        tmp1_V_11_4_fu_124 <= tmp1_V_11_16_fu_591_p3;
        tmp1_V_11_6_fu_120 <= tmp1_V_11_18_fu_607_p3;
        tmp1_V_11_9_fu_96 <= tmp1_V_11_19_fu_631_p3;
        tmp1_V_1_0_fu_104 <= select_ln23_7_fu_531_p3;
        tmp1_V_2_0_fu_108 <= select_ln23_5_fu_515_p3;
        tmp1_V_4_0_fu_112 <= select_ln23_3_fu_499_p3;
        tmp1_V_5_0_fu_116 <= select_ln23_1_fu_483_p3;
    end
end

always @ (*) begin
    if (((icmp_ln19_fu_247_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i_load = 16'd65535;
    end else begin
        ap_sig_allocacmp_i_load = i_fu_136;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_r_2 = 3'd0;
    end else begin
        ap_sig_allocacmp_r_2 = r_fu_88;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_r_ce0 = 1'b1;
    end else begin
        input_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln19_reg_847 == 1'd1))) begin
        tmp1_V_0_0_out_ap_vld = 1'b1;
    end else begin
        tmp1_V_0_0_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln19_reg_847 == 1'd1))) begin
        tmp1_V_10_0_out_ap_vld = 1'b1;
    end else begin
        tmp1_V_10_0_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln19_reg_847 == 1'd1))) begin
        tmp1_V_11_0_out_ap_vld = 1'b1;
    end else begin
        tmp1_V_11_0_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln19_reg_847 == 1'd1))) begin
        tmp1_V_11_11_out_ap_vld = 1'b1;
    end else begin
        tmp1_V_11_11_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln19_reg_847 == 1'd1))) begin
        tmp1_V_11_4_out_ap_vld = 1'b1;
    end else begin
        tmp1_V_11_4_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln19_reg_847 == 1'd1))) begin
        tmp1_V_11_6_out_ap_vld = 1'b1;
    end else begin
        tmp1_V_11_6_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln19_reg_847 == 1'd1))) begin
        tmp1_V_11_9_out_ap_vld = 1'b1;
    end else begin
        tmp1_V_11_9_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln19_reg_847 == 1'd1))) begin
        tmp1_V_1_0_out_ap_vld = 1'b1;
    end else begin
        tmp1_V_1_0_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln19_reg_847 == 1'd1))) begin
        tmp1_V_2_0_out_ap_vld = 1'b1;
    end else begin
        tmp1_V_2_0_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln19_reg_847 == 1'd1))) begin
        tmp1_V_4_0_out_ap_vld = 1'b1;
    end else begin
        tmp1_V_4_0_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln19_reg_847 == 1'd1))) begin
        tmp1_V_5_0_out_ap_vld = 1'b1;
    end else begin
        tmp1_V_5_0_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln19_fu_253_p2 = (ap_sig_allocacmp_r_2 + 3'd1);

assign add_ln20_fu_265_p2 = (empty_fu_243_p1 + 2'd1);

assign add_ln21_fu_296_p2 = ($signed(sext_ln21_fu_288_p1) + $signed(17'd1));

assign add_ln24_fu_388_p2 = (sub_ln24_fu_379_p2 + zext_ln24_fu_385_p1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_511 = ((icmp_ln19_fu_247_p2 == 1'd0) & (icmp_ln21_fu_279_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign empty_fu_243_p1 = ap_sig_allocacmp_r_2[1:0];

assign icmp_ln19_fu_247_p2 = ((ap_sig_allocacmp_r_2 == 3'd6) ? 1'b1 : 1'b0);

assign icmp_ln20_fu_259_p2 = ((ap_sig_allocacmp_r_2 < 3'd3) ? 1'b1 : 1'b0);

assign icmp_ln21_fu_279_p2 = ((j_fu_271_p3 == 2'd0) ? 1'b1 : 1'b0);

assign icmp_ln23_1_fu_437_p2 = ((r_2_reg_838_pp0_iter1_reg == 3'd3) ? 1'b1 : 1'b0);

assign icmp_ln23_2_fu_442_p2 = ((r_2_reg_838_pp0_iter1_reg == 3'd2) ? 1'b1 : 1'b0);

assign icmp_ln23_3_fu_447_p2 = ((r_2_reg_838_pp0_iter1_reg == 3'd1) ? 1'b1 : 1'b0);

assign icmp_ln23_4_fu_452_p2 = ((r_2_reg_838_pp0_iter1_reg == 3'd0) ? 1'b1 : 1'b0);

assign icmp_ln23_fu_432_p2 = ((r_2_reg_838_pp0_iter1_reg == 3'd4) ? 1'b1 : 1'b0);

assign input_r_address0 = zext_ln24_1_fu_394_p1;

assign j_fu_271_p3 = ((icmp_ln20_fu_259_p2[0:0] == 1'b1) ? empty_fu_243_p1 : add_ln20_fu_265_p2);

assign or_ln23_1_fu_463_p2 = (icmp_ln23_2_fu_442_p2 | icmp_ln23_1_fu_437_p2);

assign or_ln23_2_fu_477_p2 = (or_ln23_fu_457_p2 | or_ln23_1_fu_463_p2);

assign or_ln23_fu_457_p2 = (icmp_ln23_4_fu_452_p2 | icmp_ln23_3_fu_447_p2);

assign p_and_t_cast_fu_320_p3 = {{9'd0}, {xor_ln21_fu_314_p2}};

assign select_ln21_fu_342_p3 = ((tmp_fu_302_p3[0:0] == 1'b1) ? sub_ln21_fu_328_p2 : tmp_s_fu_334_p3);

assign select_ln23_1_fu_483_p3 = ((or_ln23_2_fu_477_p2[0:0] == 1'b1) ? tmp1_V_5_0_fu_116 : select_ln23_fu_469_p3);

assign select_ln23_2_fu_491_p3 = ((icmp_ln23_fu_432_p2[0:0] == 1'b1) ? 12'd4089 : tmp1_V_4_0_fu_112);

assign select_ln23_3_fu_499_p3 = ((or_ln23_2_fu_477_p2[0:0] == 1'b1) ? tmp1_V_4_0_fu_112 : select_ln23_2_fu_491_p3);

assign select_ln23_4_fu_507_p3 = ((icmp_ln23_2_fu_442_p2[0:0] == 1'b1) ? 12'd4089 : tmp1_V_2_0_fu_108);

assign select_ln23_5_fu_515_p3 = ((or_ln23_fu_457_p2[0:0] == 1'b1) ? tmp1_V_2_0_fu_108 : select_ln23_4_fu_507_p3);

assign select_ln23_6_fu_523_p3 = ((icmp_ln23_3_fu_447_p2[0:0] == 1'b1) ? 12'd4089 : tmp1_V_1_0_fu_104);

assign select_ln23_7_fu_531_p3 = ((icmp_ln23_4_fu_452_p2[0:0] == 1'b1) ? tmp1_V_1_0_fu_104 : select_ln23_6_fu_523_p3);

assign select_ln23_8_fu_539_p3 = ((icmp_ln23_4_fu_452_p2[0:0] == 1'b1) ? 12'd4089 : tmp1_V_0_0_fu_100);

assign select_ln23_fu_469_p3 = ((icmp_ln23_fu_432_p2[0:0] == 1'b1) ? tmp1_V_5_0_fu_116 : 12'd4089);

assign select_ln24_2_fu_567_p3 = ((icmp_ln23_fu_432_p2[0:0] == 1'b1) ? tmp1_V_11_21_fu_547_p1 : tmp1_V_11_11_fu_128);

assign select_ln24_4_fu_583_p3 = ((icmp_ln23_2_fu_442_p2[0:0] == 1'b1) ? tmp1_V_11_21_fu_547_p1 : tmp1_V_11_4_fu_124);

assign select_ln24_8_fu_615_p3 = ((icmp_ln23_2_fu_442_p2[0:0] == 1'b1) ? tmp1_V_11_9_fu_96 : tmp1_V_11_21_fu_547_p1);

assign select_ln24_9_fu_623_p3 = ((or_ln23_fu_457_p2[0:0] == 1'b1) ? tmp1_V_11_9_fu_96 : select_ln24_8_fu_615_p3);

assign select_ln24_fu_551_p3 = ((icmp_ln23_fu_432_p2[0:0] == 1'b1) ? tmp1_V_11_13_fu_132 : tmp1_V_11_21_fu_547_p1);

assign sext_ln21_fu_288_p0 = ap_sig_allocacmp_i_load;

assign sext_ln21_fu_288_p1 = sext_ln21_fu_288_p0;

assign sub_ln21_fu_328_p2 = (16'd0 - p_and_t_cast_fu_320_p3);

assign sub_ln24_fu_379_p2 = (tmp_49_cast_fu_371_p3 - trunc_ln24_fu_363_p1);

assign tmp1_V_0_0_out = tmp1_V_0_0_fu_100;

assign tmp1_V_10_0_out = tmp1_V_11_11_fu_128;

assign tmp1_V_11_0_out = tmp1_V_11_13_fu_132;

assign tmp1_V_11_11_out = tmp1_V_11_2_fu_92;

assign tmp1_V_11_15_fu_575_p3 = ((or_ln23_2_fu_477_p2[0:0] == 1'b1) ? tmp1_V_11_11_fu_128 : select_ln24_2_fu_567_p3);

assign tmp1_V_11_16_fu_591_p3 = ((or_ln23_fu_457_p2[0:0] == 1'b1) ? tmp1_V_11_4_fu_124 : select_ln24_4_fu_583_p3);

assign tmp1_V_11_17_fu_599_p3 = ((icmp_ln23_3_fu_447_p2[0:0] == 1'b1) ? tmp1_V_11_21_fu_547_p1 : tmp1_V_11_6_fu_120);

assign tmp1_V_11_18_fu_607_p3 = ((icmp_ln23_4_fu_452_p2[0:0] == 1'b1) ? tmp1_V_11_6_fu_120 : tmp1_V_11_17_fu_599_p3);

assign tmp1_V_11_19_fu_631_p3 = ((or_ln23_2_fu_477_p2[0:0] == 1'b1) ? select_ln24_9_fu_623_p3 : tmp1_V_11_9_fu_96);

assign tmp1_V_11_20_fu_639_p3 = ((icmp_ln23_4_fu_452_p2[0:0] == 1'b1) ? tmp1_V_11_21_fu_547_p1 : tmp1_V_11_2_fu_92);

assign tmp1_V_11_21_fu_547_p1 = input_r_q0[11:0];

assign tmp1_V_11_4_out = tmp1_V_11_4_fu_124;

assign tmp1_V_11_6_out = tmp1_V_11_6_fu_120;

assign tmp1_V_11_9_out = tmp1_V_11_9_fu_96;

assign tmp1_V_11_fu_559_p3 = ((or_ln23_2_fu_477_p2[0:0] == 1'b1) ? tmp1_V_11_13_fu_132 : select_ln24_fu_551_p3);

assign tmp1_V_1_0_out = tmp1_V_1_0_fu_104;

assign tmp1_V_2_0_out = tmp1_V_2_0_fu_108;

assign tmp1_V_4_0_out = tmp1_V_4_0_fu_112;

assign tmp1_V_5_0_out = tmp1_V_5_0_fu_116;

assign tmp_49_cast_fu_371_p3 = {{trunc_ln24_1_fu_367_p1}, {2'd0}};

assign tmp_fu_302_p3 = add_ln21_fu_296_p2[32'd16];

assign tmp_s_fu_334_p3 = {{9'd0}, {trunc_ln21_1_fu_310_p1}};

assign trunc_ln21_1_fu_310_p1 = add_ln21_fu_296_p2[6:0];

assign trunc_ln21_fu_292_p0 = ap_sig_allocacmp_i_load;

assign trunc_ln21_fu_292_p1 = trunc_ln21_fu_292_p0[6:0];

assign trunc_ln24_1_fu_367_p1 = i_fu_136[6:0];

assign trunc_ln24_fu_363_p1 = i_fu_136[8:0];

assign xor_ln21_fu_314_p2 = (trunc_ln21_fu_292_p1 ^ 7'd127);

assign zext_ln24_1_fu_394_p1 = add_ln24_fu_388_p2;

assign zext_ln24_fu_385_p1 = j_reg_851;

endmodule //master_fix_convolution1_fix_Pipeline_Initialization_Conv1_Loop
