// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
// Version: 2021.1
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module master_fix_master_fix_Pipeline_VITIS_LOOP_324_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        den2_V_0_0_05,
        den2_V_0_1_06,
        den2_V_0_2_07,
        den2_V_0_3_08,
        m_V_3_04_out,
        m_V_3_04_out_ap_vld,
        m_V_2_03_out,
        m_V_2_03_out_ap_vld,
        m_V_1_02_out,
        m_V_1_02_out_ap_vld,
        m_V_0_01_out,
        m_V_0_01_out_ap_vld
);

parameter    ap_ST_fsm_state1 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] den2_V_0_0_05;
input  [31:0] den2_V_0_1_06;
input  [31:0] den2_V_0_2_07;
input  [31:0] den2_V_0_3_08;
output  [31:0] m_V_3_04_out;
output   m_V_3_04_out_ap_vld;
output  [31:0] m_V_2_03_out;
output   m_V_2_03_out_ap_vld;
output  [31:0] m_V_1_02_out;
output   m_V_1_02_out_ap_vld;
output  [31:0] m_V_0_01_out;
output   m_V_0_01_out_ap_vld;

reg ap_idle;
reg m_V_3_04_out_ap_vld;
reg m_V_2_03_out_ap_vld;
reg m_V_1_02_out_ap_vld;
reg m_V_0_01_out_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_block_state1_pp0_stage0_iter0;
wire   [0:0] icmp_ln324_fu_132_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg   [2:0] i_fu_52;
wire    ap_loop_init;
reg   [2:0] ap_sig_allocacmp_i_2;
wire   [2:0] add_ln324_fu_138_p2;
reg   [31:0] m_V_1_fu_56;
wire   [31:0] m_V_1_5_fu_148_p6;
wire   [1:0] trunc_ln712_fu_144_p1;
reg   [31:0] m_V_1_1_fu_60;
reg   [31:0] m_V_1_2_fu_64;
reg   [31:0] m_V_1_3_fu_68;
wire   [1:0] m_V_1_5_fu_148_p5;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_done_reg = 1'b0;
end

master_fix_mux_42_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
mux_42_32_1_1_U50(
    .din0(den2_V_0_0_05),
    .din1(den2_V_0_1_06),
    .din2(den2_V_0_2_07),
    .din3(den2_V_0_3_08),
    .din4(m_V_1_5_fu_148_p5),
    .dout(m_V_1_5_fu_148_p6)
);

master_fix_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        if ((icmp_ln324_fu_132_p2 == 1'd0)) begin
            i_fu_52 <= add_ln324_fu_138_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_52 <= 3'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln712_fu_144_p1 == 2'd1) & (icmp_ln324_fu_132_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        m_V_1_1_fu_60 <= m_V_1_5_fu_148_p6;
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln712_fu_144_p1 == 2'd2) & (icmp_ln324_fu_132_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        m_V_1_2_fu_64 <= m_V_1_5_fu_148_p6;
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln712_fu_144_p1 == 2'd3) & (icmp_ln324_fu_132_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        m_V_1_3_fu_68 <= m_V_1_5_fu_148_p6;
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln712_fu_144_p1 == 2'd0) & (icmp_ln324_fu_132_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        m_V_1_fu_56 <= m_V_1_5_fu_148_p6;
    end
end

always @ (*) begin
    if ((ap_start_int == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln324_fu_132_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_sig_allocacmp_i_2 = 3'd0;
    end else begin
        ap_sig_allocacmp_i_2 = i_fu_52;
    end
end

always @ (*) begin
    if (((icmp_ln324_fu_132_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        m_V_0_01_out_ap_vld = 1'b1;
    end else begin
        m_V_0_01_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln324_fu_132_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        m_V_1_02_out_ap_vld = 1'b1;
    end else begin
        m_V_1_02_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln324_fu_132_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        m_V_2_03_out_ap_vld = 1'b1;
    end else begin
        m_V_2_03_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln324_fu_132_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        m_V_3_04_out_ap_vld = 1'b1;
    end else begin
        m_V_3_04_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln324_fu_138_p2 = (ap_sig_allocacmp_i_2 + 3'd1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start_int == 1'b0);
end

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign icmp_ln324_fu_132_p2 = ((ap_sig_allocacmp_i_2 == 3'd4) ? 1'b1 : 1'b0);

assign m_V_0_01_out = m_V_1_fu_56;

assign m_V_1_02_out = m_V_1_1_fu_60;

assign m_V_1_5_fu_148_p5 = ap_sig_allocacmp_i_2[1:0];

assign m_V_2_03_out = m_V_1_2_fu_64;

assign m_V_3_04_out = m_V_1_3_fu_68;

assign trunc_ln712_fu_144_p1 = ap_sig_allocacmp_i_2[1:0];

endmodule //master_fix_master_fix_Pipeline_VITIS_LOOP_324_1
