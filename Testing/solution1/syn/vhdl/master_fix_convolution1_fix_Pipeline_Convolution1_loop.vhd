-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
-- Version: 2021.1
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity master_fix_convolution1_fix_Pipeline_Convolution1_loop is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    tmp1_V_11_0_reload : IN STD_LOGIC_VECTOR (11 downto 0);
    tmp1_V_10_0_reload : IN STD_LOGIC_VECTOR (11 downto 0);
    tmp1_V_9 : IN STD_LOGIC_VECTOR (11 downto 0);
    tmp1_V_11_4_reload : IN STD_LOGIC_VECTOR (11 downto 0);
    tmp1_V_11_6_reload : IN STD_LOGIC_VECTOR (11 downto 0);
    tmp1_V_11_9_reload : IN STD_LOGIC_VECTOR (11 downto 0);
    tmp1_V_5_0_reload : IN STD_LOGIC_VECTOR (11 downto 0);
    tmp1_V_4_0_reload : IN STD_LOGIC_VECTOR (11 downto 0);
    tmp1_V_11_11_reload : IN STD_LOGIC_VECTOR (11 downto 0);
    tmp1_V_2_0_reload : IN STD_LOGIC_VECTOR (11 downto 0);
    tmp1_V_1_0_reload : IN STD_LOGIC_VECTOR (11 downto 0);
    tmp1_V_0_0_reload : IN STD_LOGIC_VECTOR (11 downto 0);
    input_r_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    input_r_ce0 : OUT STD_LOGIC;
    input_r_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    out_r_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    out_r_ce0 : OUT STD_LOGIC;
    out_r_we0 : OUT STD_LOGIC;
    out_r_d0 : OUT STD_LOGIC_VECTOR (34 downto 0) );
end;


architecture behav of master_fix_convolution1_fix_Pipeline_Convolution1_loop is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv16_FFFF : STD_LOGIC_VECTOR (15 downto 0) := "1111111111111111";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv12_C00 : STD_LOGIC_VECTOR (11 downto 0) := "110000000000";
    constant ap_const_lv12_1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_const_lv17_1 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv7_7F : STD_LOGIC_VECTOR (6 downto 0) := "1111111";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv12_3 : STD_LOGIC_VECTOR (11 downto 0) := "000000000011";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv17_2 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000010";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv17_3 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000011";
    constant ap_const_lv7_2 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_const_lv7_3 : STD_LOGIC_VECTOR (6 downto 0) := "0000011";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv35_0 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000000000000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln36_fu_652_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter1_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal firstKernel_f_V_0_0_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal firstKernel_f_V_0_0_ce0 : STD_LOGIC;
    signal firstKernel_f_V_0_0_q0 : STD_LOGIC_VECTOR (18 downto 0);
    signal firstKernel_f_V_0_1_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal firstKernel_f_V_0_1_ce0 : STD_LOGIC;
    signal firstKernel_f_V_0_1_q0 : STD_LOGIC_VECTOR (18 downto 0);
    signal firstKernel_f_V_0_2_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal firstKernel_f_V_0_2_ce0 : STD_LOGIC;
    signal firstKernel_f_V_0_2_q0 : STD_LOGIC_VECTOR (19 downto 0);
    signal firstKernel_f_V_1_0_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal firstKernel_f_V_1_0_ce0 : STD_LOGIC;
    signal firstKernel_f_V_1_0_q0 : STD_LOGIC_VECTOR (17 downto 0);
    signal firstKernel_f_V_1_1_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal firstKernel_f_V_1_1_ce0 : STD_LOGIC;
    signal firstKernel_f_V_1_1_q0 : STD_LOGIC_VECTOR (17 downto 0);
    signal firstKernel_f_V_1_2_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal firstKernel_f_V_1_2_ce0 : STD_LOGIC;
    signal firstKernel_f_V_1_2_q0 : STD_LOGIC_VECTOR (17 downto 0);
    signal firstKernel_f_V_2_0_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal firstKernel_f_V_2_0_ce0 : STD_LOGIC;
    signal firstKernel_f_V_2_0_q0 : STD_LOGIC_VECTOR (17 downto 0);
    signal firstKernel_f_V_2_1_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal firstKernel_f_V_2_1_ce0 : STD_LOGIC;
    signal firstKernel_f_V_2_1_q0 : STD_LOGIC_VECTOR (17 downto 0);
    signal firstKernel_f_V_2_2_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal firstKernel_f_V_2_2_ce0 : STD_LOGIC;
    signal firstKernel_f_V_2_2_q0 : STD_LOGIC_VECTOR (17 downto 0);
    signal firstKernel_f_V_3_0_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal firstKernel_f_V_3_0_ce0 : STD_LOGIC;
    signal firstKernel_f_V_3_0_q0 : STD_LOGIC_VECTOR (17 downto 0);
    signal firstKernel_f_V_3_1_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal firstKernel_f_V_3_1_ce0 : STD_LOGIC;
    signal firstKernel_f_V_3_1_q0 : STD_LOGIC_VECTOR (18 downto 0);
    signal firstKernel_f_V_3_2_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal firstKernel_f_V_3_2_ce0 : STD_LOGIC;
    signal firstKernel_f_V_3_2_q0 : STD_LOGIC_VECTOR (18 downto 0);
    signal firstBias_f_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal firstBias_f_V_ce0 : STD_LOGIC;
    signal firstBias_f_V_q0 : STD_LOGIC_VECTOR (21 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln36_reg_2810 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln36_reg_2810_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln36_reg_2810_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln9_fu_667_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln9_reg_2814 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln9_reg_2814_pp0_iter2_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln9_reg_2814_pp0_iter3_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln9_reg_2814_pp0_iter4_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln9_reg_2814_pp0_iter5_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln9_reg_2814_pp0_iter6_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln49_fu_740_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln49_reg_2825 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln49_reg_2825_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln49_reg_2825_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln49_reg_2825_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln49_reg_2825_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln49_reg_2825_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln123_2_fu_779_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln123_2_reg_2829 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln76_fu_801_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln76_reg_2834 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln76_reg_2834_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln76_reg_2834_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal t_fu_812_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal t_reg_2844 : STD_LOGIC_VECTOR (1 downto 0);
    signal t_reg_2844_pp0_iter3_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln76_4_fu_844_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln76_4_reg_2850 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln76_4_reg_2850_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln76_4_reg_2850_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln76_1_fu_850_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln76_1_reg_2859 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln76_1_reg_2859_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal newSecond76_fu_882_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal newSecond76_reg_2865 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln77_fu_904_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln77_reg_2870 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln77_reg_2870_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal newSecond78_fu_932_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal newSecond78_reg_2876 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln78_1_fu_962_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln78_1_reg_2881 : STD_LOGIC_VECTOR (8 downto 0);
    signal newSecond_fu_992_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal newSecond_reg_2886 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln82_fu_998_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln82_reg_2891 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln82_reg_2891_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln82_reg_2891_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln107_fu_1020_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln107_reg_2899 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln107_reg_2899_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln107_reg_2899_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln123_fu_1048_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln123_reg_2905 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln123_reg_2905_pp0_iter3_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln123_reg_2905_pp0_iter4_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal idxprom87_fu_1210_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal idxprom87_reg_2930 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp1_V_11_30_fu_1316_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp1_V_11_30_reg_2955 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp1_V_11_32_fu_1332_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp1_V_11_32_reg_2962 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp1_V_11_34_fu_1340_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp1_V_11_34_reg_2969 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp1_V_11_36_fu_1429_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp1_V_11_36_reg_3032 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln84_fu_1450_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln84_reg_3037 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln84_reg_3037_pp0_iter6_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln94_fu_1653_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln94_reg_3042 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln94_2_fu_1723_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln94_2_reg_3047 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln94_2_reg_3047_pp0_iter6_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln94_4_fu_1779_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln94_4_reg_3052 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln94_4_reg_3052_pp0_iter6_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln94_8_fu_1851_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln94_8_reg_3057 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln94_8_reg_3057_pp0_iter6_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln110_fu_2049_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln110_reg_3062 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln110_reg_3062_pp0_iter6_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln110_1_fu_2081_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln110_1_reg_3067 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln110_1_reg_3067_pp0_iter6_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln110_2_fu_2113_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln110_2_reg_3072 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln110_2_reg_3072_pp0_iter6_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln110_5_fu_2160_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln110_5_reg_3077 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln110_5_reg_3077_pp0_iter6_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln110_8_fu_2192_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln110_8_reg_3082 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln110_8_reg_3082_pp0_iter6_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln110_11_fu_2224_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln110_11_reg_3087 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln110_11_reg_3087_pp0_iter6_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln123_1_fu_2243_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln123_1_reg_3092 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln123_1_reg_3092_pp0_iter6_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln123_1_reg_3092_pp0_iter7_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln123_1_reg_3092_pp0_iter8_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln123_1_reg_3092_pp0_iter9_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln123_1_reg_3092_pp0_iter10_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal firstBias_f_V_load_reg_3097 : STD_LOGIC_VECTOR (21 downto 0);
    signal grp_fu_2348_p2 : STD_LOGIC_VECTOR (35 downto 0);
    signal mul_ln712_2_reg_3182 : STD_LOGIC_VECTOR (35 downto 0);
    signal grp_fu_2357_p2 : STD_LOGIC_VECTOR (35 downto 0);
    signal mul_ln712_4_reg_3192 : STD_LOGIC_VECTOR (35 downto 0);
    signal grp_fu_2404_p2 : STD_LOGIC_VECTOR (35 downto 0);
    signal mul_ln712_reg_3232 : STD_LOGIC_VECTOR (35 downto 0);
    signal grp_fu_2413_p2 : STD_LOGIC_VECTOR (35 downto 0);
    signal mul_ln712_1_reg_3237 : STD_LOGIC_VECTOR (35 downto 0);
    signal grp_fu_2422_p2 : STD_LOGIC_VECTOR (35 downto 0);
    signal mul_ln712_3_reg_3242 : STD_LOGIC_VECTOR (35 downto 0);
    signal grp_fu_2431_p2 : STD_LOGIC_VECTOR (35 downto 0);
    signal mul_ln712_5_reg_3247 : STD_LOGIC_VECTOR (35 downto 0);
    signal grp_fu_2440_p2 : STD_LOGIC_VECTOR (35 downto 0);
    signal mul_ln712_6_reg_3252 : STD_LOGIC_VECTOR (35 downto 0);
    signal grp_fu_2449_p2 : STD_LOGIC_VECTOR (35 downto 0);
    signal mul_ln712_7_reg_3257 : STD_LOGIC_VECTOR (35 downto 0);
    signal grp_fu_2458_p2 : STD_LOGIC_VECTOR (35 downto 0);
    signal mul_ln712_8_reg_3262 : STD_LOGIC_VECTOR (35 downto 0);
    signal grp_fu_2467_p2 : STD_LOGIC_VECTOR (35 downto 0);
    signal mul_ln712_9_reg_3267 : STD_LOGIC_VECTOR (35 downto 0);
    signal grp_fu_2476_p2 : STD_LOGIC_VECTOR (35 downto 0);
    signal mul_ln712_10_reg_3272 : STD_LOGIC_VECTOR (35 downto 0);
    signal grp_fu_2485_p2 : STD_LOGIC_VECTOR (35 downto 0);
    signal mul_ln712_11_reg_3277 : STD_LOGIC_VECTOR (35 downto 0);
    signal add_ln712_6_fu_2499_p2 : STD_LOGIC_VECTOR (35 downto 0);
    signal add_ln712_6_reg_3282 : STD_LOGIC_VECTOR (35 downto 0);
    signal trunc_ln712_4_fu_2504_p1 : STD_LOGIC_VECTOR (34 downto 0);
    signal trunc_ln712_4_reg_3287 : STD_LOGIC_VECTOR (34 downto 0);
    signal add_ln712_1_fu_2512_p2 : STD_LOGIC_VECTOR (35 downto 0);
    signal add_ln712_1_reg_3292 : STD_LOGIC_VECTOR (35 downto 0);
    signal add_ln712_3_fu_2521_p2 : STD_LOGIC_VECTOR (35 downto 0);
    signal add_ln712_3_reg_3297 : STD_LOGIC_VECTOR (35 downto 0);
    signal trunc_ln712_fu_2526_p1 : STD_LOGIC_VECTOR (34 downto 0);
    signal trunc_ln712_reg_3302 : STD_LOGIC_VECTOR (34 downto 0);
    signal trunc_ln712_1_fu_2530_p1 : STD_LOGIC_VECTOR (34 downto 0);
    signal trunc_ln712_1_reg_3307 : STD_LOGIC_VECTOR (34 downto 0);
    signal add_ln712_11_fu_2562_p2 : STD_LOGIC_VECTOR (35 downto 0);
    signal add_ln712_11_reg_3312 : STD_LOGIC_VECTOR (35 downto 0);
    signal add_ln712_13_fu_2567_p2 : STD_LOGIC_VECTOR (34 downto 0);
    signal add_ln712_13_reg_3317 : STD_LOGIC_VECTOR (34 downto 0);
    signal num_V_4_fu_2598_p3 : STD_LOGIC_VECTOR (34 downto 0);
    signal num_V_4_reg_3322 : STD_LOGIC_VECTOR (34 downto 0);
    signal ap_condition_exit_pp0_iter4_stage0 : STD_LOGIC;
    signal zext_ln76_1_fu_1053_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln77_fu_1057_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln78_1_fu_1061_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln79_1_fu_1065_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln123_fu_2606_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_fu_162 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln75_fu_771_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal id_fu_166 : STD_LOGIC_VECTOR (11 downto 0);
    signal id_4_fu_658_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal b_fu_170 : STD_LOGIC_VECTOR (35 downto 0);
    signal sext_ln63_fu_2363_p1 : STD_LOGIC_VECTOR (35 downto 0);
    signal d_fu_174 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln50_1_fu_1206_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal empty_fu_178 : STD_LOGIC_VECTOR (35 downto 0);
    signal sext_ln60_fu_2249_p1 : STD_LOGIC_VECTOR (35 downto 0);
    signal empty_38_fu_182 : STD_LOGIC_VECTOR (35 downto 0);
    signal sext_ln60_1_fu_2253_p1 : STD_LOGIC_VECTOR (35 downto 0);
    signal empty_39_fu_186 : STD_LOGIC_VECTOR (35 downto 0);
    signal sext_ln60_2_fu_1363_p1 : STD_LOGIC_VECTOR (35 downto 0);
    signal empty_40_fu_190 : STD_LOGIC_VECTOR (35 downto 0);
    signal sext_ln60_3_fu_2257_p1 : STD_LOGIC_VECTOR (35 downto 0);
    signal empty_41_fu_194 : STD_LOGIC_VECTOR (35 downto 0);
    signal sext_ln60_4_fu_1367_p1 : STD_LOGIC_VECTOR (35 downto 0);
    signal empty_42_fu_198 : STD_LOGIC_VECTOR (35 downto 0);
    signal sext_ln60_5_fu_2261_p1 : STD_LOGIC_VECTOR (35 downto 0);
    signal empty_43_fu_202 : STD_LOGIC_VECTOR (35 downto 0);
    signal sext_ln60_6_fu_2265_p1 : STD_LOGIC_VECTOR (35 downto 0);
    signal empty_44_fu_206 : STD_LOGIC_VECTOR (35 downto 0);
    signal sext_ln60_7_fu_2269_p1 : STD_LOGIC_VECTOR (35 downto 0);
    signal empty_45_fu_210 : STD_LOGIC_VECTOR (35 downto 0);
    signal sext_ln60_8_fu_2273_p1 : STD_LOGIC_VECTOR (35 downto 0);
    signal empty_46_fu_214 : STD_LOGIC_VECTOR (35 downto 0);
    signal sext_ln60_9_fu_2277_p1 : STD_LOGIC_VECTOR (35 downto 0);
    signal empty_47_fu_218 : STD_LOGIC_VECTOR (35 downto 0);
    signal sext_ln60_10_fu_2281_p1 : STD_LOGIC_VECTOR (35 downto 0);
    signal empty_48_fu_222 : STD_LOGIC_VECTOR (35 downto 0);
    signal sext_ln61_fu_2285_p1 : STD_LOGIC_VECTOR (35 downto 0);
    signal tmp1_V_3_fu_226 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp1_V_0_fu_230 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp1_V_0_1_fu_234 : STD_LOGIC_VECTOR (11 downto 0);
    signal i_fu_238 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln40_1_fu_736_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp1_V_4_fu_242 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp1_V_1_fu_246 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp1_V_1_1_fu_250 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp1_V_5_fu_254 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp1_V_2_fu_258 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp1_V_2_1_fu_262 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp1_V_7_fu_266 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp1_V_8_fu_270 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp1_V_6_fu_274 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln40_fu_674_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln40_fu_678_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln40_fu_674_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln40_fu_682_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal trunc_ln40_fu_678_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal xor_ln40_fu_700_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_and_t3_cast_fu_706_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln40_1_fu_696_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_564_fu_688_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln40_fu_714_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_s_fu_720_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_6_fu_728_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln75_1_fu_759_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln75_fu_765_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln75_fu_796_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal xor_ln76_2_fu_807_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln76_fu_820_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln76_fu_824_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln76_fu_824_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln76_fu_828_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_566_fu_834_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln76_2_fu_864_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln76_fu_856_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln76_1_fu_860_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_64_cast_fu_868_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal newFirst75_fu_876_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln77_fu_888_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_567_fu_894_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln77_1_fu_914_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln77_fu_910_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_65_cast_fu_918_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal newFirst77_fu_926_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln76_fu_820_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln78_fu_938_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_26_fu_948_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln78_fu_944_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln78_fu_956_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln79_fu_968_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_27_fu_978_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal newFirst_fu_986_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln79_fu_974_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln82_fu_998_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln107_fu_1004_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_568_fu_1010_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln123_fu_1026_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln123_1_fu_1030_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln123_1_fu_1030_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_72_cast_fu_1034_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln123_fu_1026_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln123_fu_1042_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln50_fu_1144_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln50_fu_1148_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln50_fu_1144_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln50_fu_1152_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal trunc_ln50_fu_1148_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal xor_ln50_fu_1170_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_and_t7_cast_fu_1176_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln50_1_fu_1166_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_565_fu_1158_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln50_fu_1184_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_25_fu_1190_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal d_5_fu_1198_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal and_ln76_fu_1221_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln76_fu_1225_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln77_fu_1236_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln77_fu_1241_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln76_1_fu_1247_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln77_fu_1231_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln76_3_fu_1258_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln76_4_fu_1262_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln76_5_fu_1274_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln76_6_fu_1278_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal or_ln76_fu_1252_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln76_fu_1266_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln76_1_fu_1282_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln76_2_fu_1298_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp1_V_11_45_fu_1290_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln76_3_fu_1311_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp1_V_11_fu_1303_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp1_V_11_31_fu_1324_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln81_fu_1411_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln81_1_fu_1424_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp1_V_11_35_fu_1416_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln84_fu_1437_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln93_fu_1442_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp1_V_11_37_fu_1458_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln85_fu_1481_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal or_ln_fu_1474_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln90_fu_1509_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln90_1_fu_1515_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln88_fu_1505_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln90_2_fu_1521_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln90_1_fu_1533_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln90_fu_1527_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln90_2_fu_1539_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln89_fu_1497_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln90_3_fu_1553_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln90_3_fu_1559_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln90_fu_1545_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln90_4_fu_1573_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln90_4_fu_1579_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln90_1_fu_1565_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln90_5_fu_1593_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln90_5_fu_1599_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln90_2_fu_1585_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal xor_ln82_fu_1613_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln94_fu_1618_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln94_3_fu_1635_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln94_2_fu_1629_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln94_fu_1641_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln94_1_fu_1623_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln94_1_fu_1647_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln90_3_fu_1605_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal xor_ln88_fu_1661_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln88_1_fu_1666_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln84_1_fu_1489_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal or_ln94_2_fu_1679_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln88_fu_1671_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln94_1_fu_1683_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln90_4_fu_1691_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln90_5_fu_1699_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln90_6_fu_1707_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln90_7_fu_1715_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp1_V_11_38_fu_1466_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln88_1_fu_1731_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln94_3_fu_1739_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln90_8_fu_1747_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln90_9_fu_1755_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln90_10_fu_1763_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln90_11_fu_1771_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln88_2_fu_1787_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln94_5_fu_1795_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln90_12_fu_1803_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln90_13_fu_1811_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln90_14_fu_1819_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln90_15_fu_1827_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln94_6_fu_1835_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln94_7_fu_1843_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp1_V_11_39_fu_1859_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp1_V_11_41_fu_1875_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln109_fu_1888_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_fu_1911_p13 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_fu_1911_p14 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp1_V_11_43_fu_1946_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal and_ln103_fu_1967_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln105_fu_1961_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal and_ln103_1_fu_1979_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln103_fu_1971_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal or_ln107_fu_1992_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln103_1_fu_1984_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal xor_ln76_1_fu_2004_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln107_fu_2009_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln110_1_fu_2020_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln110_3_fu_2031_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln110_2_fu_2025_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln110_fu_2037_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln110_fu_2014_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln110_1_fu_2043_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln107_fu_1996_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln84_3_fu_1938_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln103_2_fu_2057_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln103_3_fu_2065_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln107_1_fu_2073_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp1_V_11_42_fu_1881_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln103_4_fu_2089_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln103_5_fu_2097_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln107_2_fu_2105_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp1_V_11_44_fu_1953_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln103_6_fu_2121_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln103_7_fu_2128_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln107_3_fu_2136_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln110_3_fu_2144_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln110_4_fu_2152_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln84_2_fu_1896_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln107_4_fu_2168_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln110_6_fu_2176_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln110_7_fu_2184_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp1_V_11_40_fu_1867_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln107_5_fu_2200_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln110_9_fu_2208_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln110_10_fu_2216_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_74_cast_fu_2232_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln123_3_fu_2239_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln712_5_fu_2494_p2 : STD_LOGIC_VECTOR (35 downto 0);
    signal add_ln712_fu_2508_p2 : STD_LOGIC_VECTOR (35 downto 0);
    signal add_ln712_2_fu_2517_p2 : STD_LOGIC_VECTOR (35 downto 0);
    signal add_ln712_7_fu_2534_p2 : STD_LOGIC_VECTOR (35 downto 0);
    signal add_ln712_8_fu_2538_p2 : STD_LOGIC_VECTOR (35 downto 0);
    signal trunc_ln712_3_fu_2546_p1 : STD_LOGIC_VECTOR (34 downto 0);
    signal trunc_ln712_2_fu_2542_p1 : STD_LOGIC_VECTOR (34 downto 0);
    signal add_ln712_9_fu_2550_p2 : STD_LOGIC_VECTOR (35 downto 0);
    signal add_ln712_10_fu_2556_p2 : STD_LOGIC_VECTOR (34 downto 0);
    signal add_ln712_4_fu_2572_p2 : STD_LOGIC_VECTOR (35 downto 0);
    signal add_ln712_12_fu_2576_p2 : STD_LOGIC_VECTOR (34 downto 0);
    signal num_V_3_fu_2580_p2 : STD_LOGIC_VECTOR (35 downto 0);
    signal tmp_569_fu_2590_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln10_fu_2585_p2 : STD_LOGIC_VECTOR (34 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter7_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter8_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter9_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter10_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_condition_2101 : BOOLEAN;
    signal ap_condition_2105 : BOOLEAN;
    signal ap_condition_2109 : BOOLEAN;
    signal ap_condition_888 : BOOLEAN;
    signal ap_condition_898 : BOOLEAN;
    signal ap_condition_904 : BOOLEAN;
    signal ap_condition_908 : BOOLEAN;
    signal ap_condition_2125 : BOOLEAN;
    signal ap_condition_2128 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component master_fix_mux_124_12_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        din9_WIDTH : INTEGER;
        din10_WIDTH : INTEGER;
        din11_WIDTH : INTEGER;
        din12_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (11 downto 0);
        din1 : IN STD_LOGIC_VECTOR (11 downto 0);
        din2 : IN STD_LOGIC_VECTOR (11 downto 0);
        din3 : IN STD_LOGIC_VECTOR (11 downto 0);
        din4 : IN STD_LOGIC_VECTOR (11 downto 0);
        din5 : IN STD_LOGIC_VECTOR (11 downto 0);
        din6 : IN STD_LOGIC_VECTOR (11 downto 0);
        din7 : IN STD_LOGIC_VECTOR (11 downto 0);
        din8 : IN STD_LOGIC_VECTOR (11 downto 0);
        din9 : IN STD_LOGIC_VECTOR (11 downto 0);
        din10 : IN STD_LOGIC_VECTOR (11 downto 0);
        din11 : IN STD_LOGIC_VECTOR (11 downto 0);
        din12 : IN STD_LOGIC_VECTOR (3 downto 0);
        dout : OUT STD_LOGIC_VECTOR (11 downto 0) );
    end component;


    component master_fix_mul_36s_12s_36_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (35 downto 0);
        din1 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (35 downto 0) );
    end component;


    component master_fix_convolution1_fix_Pipeline_Convolution1_loop_firstKernel_f_V_0_0 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (18 downto 0) );
    end component;


    component master_fix_convolution1_fix_Pipeline_Convolution1_loop_firstKernel_f_V_0_1 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (18 downto 0) );
    end component;


    component master_fix_convolution1_fix_Pipeline_Convolution1_loop_firstKernel_f_V_0_2 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (19 downto 0) );
    end component;


    component master_fix_convolution1_fix_Pipeline_Convolution1_loop_firstKernel_f_V_1_0 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (17 downto 0) );
    end component;


    component master_fix_convolution1_fix_Pipeline_Convolution1_loop_firstKernel_f_V_1_1 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (17 downto 0) );
    end component;


    component master_fix_convolution1_fix_Pipeline_Convolution1_loop_firstKernel_f_V_1_2 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (17 downto 0) );
    end component;


    component master_fix_convolution1_fix_Pipeline_Convolution1_loop_firstKernel_f_V_2_0 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (17 downto 0) );
    end component;


    component master_fix_convolution1_fix_Pipeline_Convolution1_loop_firstKernel_f_V_2_1 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (17 downto 0) );
    end component;


    component master_fix_convolution1_fix_Pipeline_Convolution1_loop_firstKernel_f_V_2_2 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (17 downto 0) );
    end component;


    component master_fix_convolution1_fix_Pipeline_Convolution1_loop_firstKernel_f_V_3_0 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (17 downto 0) );
    end component;


    component master_fix_convolution1_fix_Pipeline_Convolution1_loop_firstKernel_f_V_3_1 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (18 downto 0) );
    end component;


    component master_fix_convolution1_fix_Pipeline_Convolution1_loop_firstKernel_f_V_3_2 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (18 downto 0) );
    end component;


    component master_fix_convolution1_fix_Pipeline_Convolution1_loop_firstBias_f_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (21 downto 0) );
    end component;


    component master_fix_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    firstKernel_f_V_0_0_U : component master_fix_convolution1_fix_Pipeline_Convolution1_loop_firstKernel_f_V_0_0
    generic map (
        DataWidth => 19,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => firstKernel_f_V_0_0_address0,
        ce0 => firstKernel_f_V_0_0_ce0,
        q0 => firstKernel_f_V_0_0_q0);

    firstKernel_f_V_0_1_U : component master_fix_convolution1_fix_Pipeline_Convolution1_loop_firstKernel_f_V_0_1
    generic map (
        DataWidth => 19,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => firstKernel_f_V_0_1_address0,
        ce0 => firstKernel_f_V_0_1_ce0,
        q0 => firstKernel_f_V_0_1_q0);

    firstKernel_f_V_0_2_U : component master_fix_convolution1_fix_Pipeline_Convolution1_loop_firstKernel_f_V_0_2
    generic map (
        DataWidth => 20,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => firstKernel_f_V_0_2_address0,
        ce0 => firstKernel_f_V_0_2_ce0,
        q0 => firstKernel_f_V_0_2_q0);

    firstKernel_f_V_1_0_U : component master_fix_convolution1_fix_Pipeline_Convolution1_loop_firstKernel_f_V_1_0
    generic map (
        DataWidth => 18,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => firstKernel_f_V_1_0_address0,
        ce0 => firstKernel_f_V_1_0_ce0,
        q0 => firstKernel_f_V_1_0_q0);

    firstKernel_f_V_1_1_U : component master_fix_convolution1_fix_Pipeline_Convolution1_loop_firstKernel_f_V_1_1
    generic map (
        DataWidth => 18,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => firstKernel_f_V_1_1_address0,
        ce0 => firstKernel_f_V_1_1_ce0,
        q0 => firstKernel_f_V_1_1_q0);

    firstKernel_f_V_1_2_U : component master_fix_convolution1_fix_Pipeline_Convolution1_loop_firstKernel_f_V_1_2
    generic map (
        DataWidth => 18,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => firstKernel_f_V_1_2_address0,
        ce0 => firstKernel_f_V_1_2_ce0,
        q0 => firstKernel_f_V_1_2_q0);

    firstKernel_f_V_2_0_U : component master_fix_convolution1_fix_Pipeline_Convolution1_loop_firstKernel_f_V_2_0
    generic map (
        DataWidth => 18,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => firstKernel_f_V_2_0_address0,
        ce0 => firstKernel_f_V_2_0_ce0,
        q0 => firstKernel_f_V_2_0_q0);

    firstKernel_f_V_2_1_U : component master_fix_convolution1_fix_Pipeline_Convolution1_loop_firstKernel_f_V_2_1
    generic map (
        DataWidth => 18,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => firstKernel_f_V_2_1_address0,
        ce0 => firstKernel_f_V_2_1_ce0,
        q0 => firstKernel_f_V_2_1_q0);

    firstKernel_f_V_2_2_U : component master_fix_convolution1_fix_Pipeline_Convolution1_loop_firstKernel_f_V_2_2
    generic map (
        DataWidth => 18,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => firstKernel_f_V_2_2_address0,
        ce0 => firstKernel_f_V_2_2_ce0,
        q0 => firstKernel_f_V_2_2_q0);

    firstKernel_f_V_3_0_U : component master_fix_convolution1_fix_Pipeline_Convolution1_loop_firstKernel_f_V_3_0
    generic map (
        DataWidth => 18,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => firstKernel_f_V_3_0_address0,
        ce0 => firstKernel_f_V_3_0_ce0,
        q0 => firstKernel_f_V_3_0_q0);

    firstKernel_f_V_3_1_U : component master_fix_convolution1_fix_Pipeline_Convolution1_loop_firstKernel_f_V_3_1
    generic map (
        DataWidth => 19,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => firstKernel_f_V_3_1_address0,
        ce0 => firstKernel_f_V_3_1_ce0,
        q0 => firstKernel_f_V_3_1_q0);

    firstKernel_f_V_3_2_U : component master_fix_convolution1_fix_Pipeline_Convolution1_loop_firstKernel_f_V_3_2
    generic map (
        DataWidth => 19,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => firstKernel_f_V_3_2_address0,
        ce0 => firstKernel_f_V_3_2_ce0,
        q0 => firstKernel_f_V_3_2_q0);

    firstBias_f_V_U : component master_fix_convolution1_fix_Pipeline_Convolution1_loop_firstBias_f_V
    generic map (
        DataWidth => 22,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => firstBias_f_V_address0,
        ce0 => firstBias_f_V_ce0,
        q0 => firstBias_f_V_q0);

    mux_124_12_1_1_U13 : component master_fix_mux_124_12_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 12,
        din1_WIDTH => 12,
        din2_WIDTH => 12,
        din3_WIDTH => 12,
        din4_WIDTH => 12,
        din5_WIDTH => 12,
        din6_WIDTH => 12,
        din7_WIDTH => 12,
        din8_WIDTH => 12,
        din9_WIDTH => 12,
        din10_WIDTH => 12,
        din11_WIDTH => 12,
        din12_WIDTH => 4,
        dout_WIDTH => 12)
    port map (
        din0 => tmp1_V_0_1_fu_234,
        din1 => tmp1_V_1_1_fu_250,
        din2 => tmp1_V_2_1_fu_262,
        din3 => tmp1_V_0_fu_230,
        din4 => tmp1_V_1_fu_246,
        din5 => tmp1_V_2_fu_258,
        din6 => tmp1_V_3_fu_226,
        din7 => tmp1_V_4_fu_242,
        din8 => tmp1_V_5_fu_254,
        din9 => tmp1_V_11_34_reg_2969,
        din10 => tmp1_V_11_32_reg_2962,
        din11 => tmp1_V_11_30_reg_2955,
        din12 => tmp_fu_1911_p13,
        dout => tmp_fu_1911_p14);

    mul_36s_12s_36_2_1_U14 : component master_fix_mul_36s_12s_36_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 36,
        din1_WIDTH => 12,
        dout_WIDTH => 36)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => empty_39_fu_186,
        din1 => select_ln94_reg_3042,
        ce => ap_const_logic_1,
        dout => grp_fu_2348_p2);

    mul_36s_12s_36_2_1_U15 : component master_fix_mul_36s_12s_36_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 36,
        din1_WIDTH => 12,
        dout_WIDTH => 36)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => empty_41_fu_194,
        din1 => tmp1_V_11_36_reg_3032,
        ce => ap_const_logic_1,
        dout => grp_fu_2357_p2);

    mul_36s_12s_36_2_1_U16 : component master_fix_mul_36s_12s_36_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 36,
        din1_WIDTH => 12,
        dout_WIDTH => 36)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => empty_fu_178,
        din1 => select_ln94_2_reg_3047_pp0_iter6_reg,
        ce => ap_const_logic_1,
        dout => grp_fu_2404_p2);

    mul_36s_12s_36_2_1_U17 : component master_fix_mul_36s_12s_36_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 36,
        din1_WIDTH => 12,
        dout_WIDTH => 36)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => empty_38_fu_182,
        din1 => select_ln94_4_reg_3052_pp0_iter6_reg,
        ce => ap_const_logic_1,
        dout => grp_fu_2413_p2);

    mul_36s_12s_36_2_1_U18 : component master_fix_mul_36s_12s_36_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 36,
        din1_WIDTH => 12,
        dout_WIDTH => 36)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => empty_40_fu_190,
        din1 => select_ln84_reg_3037_pp0_iter6_reg,
        ce => ap_const_logic_1,
        dout => grp_fu_2422_p2);

    mul_36s_12s_36_2_1_U19 : component master_fix_mul_36s_12s_36_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 36,
        din1_WIDTH => 12,
        dout_WIDTH => 36)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => empty_42_fu_198,
        din1 => select_ln94_8_reg_3057_pp0_iter6_reg,
        ce => ap_const_logic_1,
        dout => grp_fu_2431_p2);

    mul_36s_12s_36_2_1_U20 : component master_fix_mul_36s_12s_36_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 36,
        din1_WIDTH => 12,
        dout_WIDTH => 36)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => empty_43_fu_202,
        din1 => select_ln110_8_reg_3082_pp0_iter6_reg,
        ce => ap_const_logic_1,
        dout => grp_fu_2440_p2);

    mul_36s_12s_36_2_1_U21 : component master_fix_mul_36s_12s_36_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 36,
        din1_WIDTH => 12,
        dout_WIDTH => 36)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => empty_44_fu_206,
        din1 => select_ln110_11_reg_3087_pp0_iter6_reg,
        ce => ap_const_logic_1,
        dout => grp_fu_2449_p2);

    mul_36s_12s_36_2_1_U22 : component master_fix_mul_36s_12s_36_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 36,
        din1_WIDTH => 12,
        dout_WIDTH => 36)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => empty_45_fu_210,
        din1 => select_ln110_5_reg_3077_pp0_iter6_reg,
        ce => ap_const_logic_1,
        dout => grp_fu_2458_p2);

    mul_36s_12s_36_2_1_U23 : component master_fix_mul_36s_12s_36_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 36,
        din1_WIDTH => 12,
        dout_WIDTH => 36)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => empty_46_fu_214,
        din1 => select_ln110_1_reg_3067_pp0_iter6_reg,
        ce => ap_const_logic_1,
        dout => grp_fu_2467_p2);

    mul_36s_12s_36_2_1_U24 : component master_fix_mul_36s_12s_36_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 36,
        din1_WIDTH => 12,
        dout_WIDTH => 36)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => empty_47_fu_218,
        din1 => select_ln110_2_reg_3072_pp0_iter6_reg,
        ce => ap_const_logic_1,
        dout => grp_fu_2476_p2);

    mul_36s_12s_36_2_1_U25 : component master_fix_mul_36s_12s_36_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 36,
        din1_WIDTH => 12,
        dout_WIDTH => 36)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => empty_48_fu_222,
        din1 => select_ln110_reg_3062_pp0_iter6_reg,
        ce => ap_const_logic_1,
        dout => grp_fu_2485_p2);

    flow_control_loop_pipe_sequential_init_U : component master_fix_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter1_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter10_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter4_stage0)) then 
                    ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    d_fu_174_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    d_fu_174 <= ap_const_lv16_FFFF;
                elsif ((ap_const_boolean_1 = ap_condition_2101)) then 
                    d_fu_174 <= sext_ln50_1_fu_1206_p1;
                end if;
            end if; 
        end if;
    end process;

    i_fu_238_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_238 <= ap_const_lv16_FFFF;
                elsif ((ap_const_boolean_1 = ap_condition_2109)) then 
                    i_fu_238 <= ap_const_lv16_0;
                elsif ((ap_const_boolean_1 = ap_condition_2105)) then 
                    i_fu_238 <= sext_ln40_1_fu_736_p1;
                end if;
            end if; 
        end if;
    end process;

    id_fu_166_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    id_fu_166 <= ap_const_lv12_0;
                elsif (((icmp_ln36_fu_652_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    id_fu_166 <= id_4_fu_658_p2;
                end if;
            end if; 
        end if;
    end process;

    j_fu_162_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    j_fu_162 <= ap_const_lv12_0;
                elsif (((icmp_ln36_fu_652_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    j_fu_162 <= select_ln75_fu_771_p3;
                end if;
            end if; 
        end if;
    end process;

    tmp1_V_0_1_fu_234_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    tmp1_V_0_1_fu_234 <= tmp1_V_0_0_reload;
                elsif ((ap_const_boolean_1 = ap_condition_2125)) then 
                    tmp1_V_0_1_fu_234 <= tmp1_V_0_fu_230;
                end if;
            end if; 
        end if;
    end process;

    tmp1_V_0_fu_230_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    tmp1_V_0_fu_230 <= tmp1_V_11_11_reload;
                elsif ((ap_const_boolean_1 = ap_condition_2125)) then 
                    tmp1_V_0_fu_230 <= tmp1_V_3_fu_226;
                end if;
            end if; 
        end if;
    end process;

    tmp1_V_1_1_fu_250_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    tmp1_V_1_1_fu_250 <= tmp1_V_1_0_reload;
                elsif ((ap_const_boolean_1 = ap_condition_2128)) then 
                    tmp1_V_1_1_fu_250 <= tmp1_V_1_fu_246;
                end if;
            end if; 
        end if;
    end process;

    tmp1_V_1_fu_246_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    tmp1_V_1_fu_246 <= tmp1_V_4_0_reload;
                elsif ((ap_const_boolean_1 = ap_condition_2128)) then 
                    tmp1_V_1_fu_246 <= tmp1_V_4_fu_242;
                end if;
            end if; 
        end if;
    end process;

    tmp1_V_2_1_fu_262_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    tmp1_V_2_1_fu_262 <= tmp1_V_2_0_reload;
                elsif ((ap_const_boolean_1 = ap_condition_2128)) then 
                    tmp1_V_2_1_fu_262 <= tmp1_V_2_fu_258;
                end if;
            end if; 
        end if;
    end process;

    tmp1_V_2_fu_258_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    tmp1_V_2_fu_258 <= tmp1_V_5_0_reload;
                elsif ((ap_const_boolean_1 = ap_condition_2128)) then 
                    tmp1_V_2_fu_258 <= tmp1_V_5_fu_254;
                end if;
            end if; 
        end if;
    end process;

    tmp1_V_3_fu_226_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    tmp1_V_3_fu_226 <= tmp1_V_11_9_reload;
                elsif ((ap_const_boolean_1 = ap_condition_2125)) then 
                    tmp1_V_3_fu_226 <= tmp1_V_6_fu_274;
                end if;
            end if; 
        end if;
    end process;

    tmp1_V_4_fu_242_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    tmp1_V_4_fu_242 <= tmp1_V_11_6_reload;
                elsif ((ap_const_boolean_1 = ap_condition_2128)) then 
                    tmp1_V_4_fu_242 <= tmp1_V_7_fu_266;
                end if;
            end if; 
        end if;
    end process;

    tmp1_V_5_fu_254_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    tmp1_V_5_fu_254 <= tmp1_V_11_4_reload;
                elsif ((ap_const_boolean_1 = ap_condition_2128)) then 
                    tmp1_V_5_fu_254 <= tmp1_V_8_fu_270;
                end if;
            end if; 
        end if;
    end process;

    tmp1_V_6_fu_274_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    tmp1_V_6_fu_274 <= tmp1_V_9;
                elsif (((icmp_ln36_reg_2810_pp0_iter3_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
                    tmp1_V_6_fu_274 <= tmp1_V_11_34_fu_1340_p3;
                end if;
            end if; 
        end if;
    end process;

    tmp1_V_7_fu_266_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    tmp1_V_7_fu_266 <= tmp1_V_10_0_reload;
                elsif (((icmp_ln36_reg_2810_pp0_iter3_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
                    tmp1_V_7_fu_266 <= tmp1_V_11_32_fu_1332_p3;
                end if;
            end if; 
        end if;
    end process;

    tmp1_V_8_fu_270_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    tmp1_V_8_fu_270 <= tmp1_V_11_0_reload;
                elsif (((icmp_ln36_reg_2810_pp0_iter3_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
                    tmp1_V_8_fu_270 <= tmp1_V_11_30_fu_1316_p3;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                add_ln123_1_reg_3092 <= add_ln123_1_fu_2243_p2;
                add_ln123_1_reg_3092_pp0_iter10_reg <= add_ln123_1_reg_3092_pp0_iter9_reg;
                add_ln123_1_reg_3092_pp0_iter6_reg <= add_ln123_1_reg_3092;
                add_ln123_1_reg_3092_pp0_iter7_reg <= add_ln123_1_reg_3092_pp0_iter6_reg;
                add_ln123_1_reg_3092_pp0_iter8_reg <= add_ln123_1_reg_3092_pp0_iter7_reg;
                add_ln123_1_reg_3092_pp0_iter9_reg <= add_ln123_1_reg_3092_pp0_iter8_reg;
                add_ln123_reg_2905_pp0_iter3_reg <= add_ln123_reg_2905;
                add_ln123_reg_2905_pp0_iter4_reg <= add_ln123_reg_2905_pp0_iter3_reg;
                add_ln712_11_reg_3312 <= add_ln712_11_fu_2562_p2;
                add_ln712_13_reg_3317 <= add_ln712_13_fu_2567_p2;
                add_ln712_1_reg_3292 <= add_ln712_1_fu_2512_p2;
                add_ln712_3_reg_3297 <= add_ln712_3_fu_2521_p2;
                add_ln712_6_reg_3282 <= add_ln712_6_fu_2499_p2;
                ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
                ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
                ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
                ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
                icmp_ln107_reg_2899_pp0_iter3_reg <= icmp_ln107_reg_2899;
                icmp_ln107_reg_2899_pp0_iter4_reg <= icmp_ln107_reg_2899_pp0_iter3_reg;
                icmp_ln36_reg_2810_pp0_iter2_reg <= icmp_ln36_reg_2810;
                icmp_ln36_reg_2810_pp0_iter3_reg <= icmp_ln36_reg_2810_pp0_iter2_reg;
                icmp_ln49_reg_2825_pp0_iter2_reg <= icmp_ln49_reg_2825;
                icmp_ln49_reg_2825_pp0_iter3_reg <= icmp_ln49_reg_2825_pp0_iter2_reg;
                icmp_ln49_reg_2825_pp0_iter4_reg <= icmp_ln49_reg_2825_pp0_iter3_reg;
                icmp_ln49_reg_2825_pp0_iter5_reg <= icmp_ln49_reg_2825_pp0_iter4_reg;
                icmp_ln49_reg_2825_pp0_iter6_reg <= icmp_ln49_reg_2825_pp0_iter5_reg;
                icmp_ln76_1_reg_2859_pp0_iter3_reg <= icmp_ln76_1_reg_2859;
                icmp_ln76_4_reg_2850_pp0_iter3_reg <= icmp_ln76_4_reg_2850;
                icmp_ln76_4_reg_2850_pp0_iter4_reg <= icmp_ln76_4_reg_2850_pp0_iter3_reg;
                icmp_ln76_reg_2834_pp0_iter3_reg <= icmp_ln76_reg_2834;
                icmp_ln76_reg_2834_pp0_iter4_reg <= icmp_ln76_reg_2834_pp0_iter3_reg;
                icmp_ln77_reg_2870_pp0_iter3_reg <= icmp_ln77_reg_2870;
                icmp_ln82_reg_2891_pp0_iter3_reg <= icmp_ln82_reg_2891;
                icmp_ln82_reg_2891_pp0_iter4_reg <= icmp_ln82_reg_2891_pp0_iter3_reg;
                mul_ln712_10_reg_3272 <= grp_fu_2476_p2;
                mul_ln712_11_reg_3277 <= grp_fu_2485_p2;
                mul_ln712_1_reg_3237 <= grp_fu_2413_p2;
                mul_ln712_2_reg_3182 <= grp_fu_2348_p2;
                mul_ln712_3_reg_3242 <= grp_fu_2422_p2;
                mul_ln712_4_reg_3192 <= grp_fu_2357_p2;
                mul_ln712_5_reg_3247 <= grp_fu_2431_p2;
                mul_ln712_6_reg_3252 <= grp_fu_2440_p2;
                mul_ln712_7_reg_3257 <= grp_fu_2449_p2;
                mul_ln712_8_reg_3262 <= grp_fu_2458_p2;
                mul_ln712_9_reg_3267 <= grp_fu_2467_p2;
                mul_ln712_reg_3232 <= grp_fu_2404_p2;
                num_V_4_reg_3322 <= num_V_4_fu_2598_p3;
                select_ln110_11_reg_3087 <= select_ln110_11_fu_2224_p3;
                select_ln110_11_reg_3087_pp0_iter6_reg <= select_ln110_11_reg_3087;
                select_ln110_1_reg_3067 <= select_ln110_1_fu_2081_p3;
                select_ln110_1_reg_3067_pp0_iter6_reg <= select_ln110_1_reg_3067;
                select_ln110_2_reg_3072 <= select_ln110_2_fu_2113_p3;
                select_ln110_2_reg_3072_pp0_iter6_reg <= select_ln110_2_reg_3072;
                select_ln110_5_reg_3077 <= select_ln110_5_fu_2160_p3;
                select_ln110_5_reg_3077_pp0_iter6_reg <= select_ln110_5_reg_3077;
                select_ln110_8_reg_3082 <= select_ln110_8_fu_2192_p3;
                select_ln110_8_reg_3082_pp0_iter6_reg <= select_ln110_8_reg_3082;
                select_ln110_reg_3062 <= select_ln110_fu_2049_p3;
                select_ln110_reg_3062_pp0_iter6_reg <= select_ln110_reg_3062;
                select_ln84_reg_3037 <= select_ln84_fu_1450_p3;
                select_ln84_reg_3037_pp0_iter6_reg <= select_ln84_reg_3037;
                select_ln94_2_reg_3047 <= select_ln94_2_fu_1723_p3;
                select_ln94_2_reg_3047_pp0_iter6_reg <= select_ln94_2_reg_3047;
                select_ln94_4_reg_3052 <= select_ln94_4_fu_1779_p3;
                select_ln94_4_reg_3052_pp0_iter6_reg <= select_ln94_4_reg_3052;
                select_ln94_8_reg_3057 <= select_ln94_8_fu_1851_p3;
                select_ln94_8_reg_3057_pp0_iter6_reg <= select_ln94_8_reg_3057;
                select_ln94_reg_3042 <= select_ln94_fu_1653_p3;
                t_reg_2844_pp0_iter3_reg <= t_reg_2844;
                tmp1_V_11_36_reg_3032 <= tmp1_V_11_36_fu_1429_p3;
                trunc_ln712_1_reg_3307 <= trunc_ln712_1_fu_2530_p1;
                trunc_ln712_4_reg_3287 <= trunc_ln712_4_fu_2504_p1;
                trunc_ln712_reg_3302 <= trunc_ln712_fu_2526_p1;
                trunc_ln9_reg_2814_pp0_iter2_reg <= trunc_ln9_reg_2814;
                trunc_ln9_reg_2814_pp0_iter3_reg <= trunc_ln9_reg_2814_pp0_iter2_reg;
                trunc_ln9_reg_2814_pp0_iter4_reg <= trunc_ln9_reg_2814_pp0_iter3_reg;
                trunc_ln9_reg_2814_pp0_iter5_reg <= trunc_ln9_reg_2814_pp0_iter4_reg;
                trunc_ln9_reg_2814_pp0_iter6_reg <= trunc_ln9_reg_2814_pp0_iter5_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln36_reg_2810 = ap_const_lv1_0))) then
                add_ln123_reg_2905 <= add_ln123_fu_1048_p2;
                add_ln78_1_reg_2881 <= add_ln78_1_fu_962_p2;
                icmp_ln107_reg_2899 <= icmp_ln107_fu_1020_p2;
                icmp_ln76_1_reg_2859 <= icmp_ln76_1_fu_850_p2;
                icmp_ln76_4_reg_2850 <= icmp_ln76_4_fu_844_p2;
                icmp_ln76_reg_2834 <= icmp_ln76_fu_801_p2;
                icmp_ln77_reg_2870 <= icmp_ln77_fu_904_p2;
                icmp_ln82_reg_2891 <= icmp_ln82_fu_998_p2;
                newSecond76_reg_2865 <= newSecond76_fu_882_p2;
                newSecond78_reg_2876 <= newSecond78_fu_932_p2;
                newSecond_reg_2886 <= newSecond_fu_992_p2;
                t_reg_2844 <= t_fu_812_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready;
                icmp_ln36_reg_2810 <= icmp_ln36_fu_652_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln49_reg_2825_pp0_iter6_reg = ap_const_lv1_1) and (trunc_ln9_reg_2814_pp0_iter6_reg = ap_const_lv2_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1))) then
                b_fu_170 <= sext_ln63_fu_2363_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln49_reg_2825_pp0_iter5_reg = ap_const_lv1_1) and (trunc_ln9_reg_2814_pp0_iter5_reg = ap_const_lv2_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1))) then
                empty_38_fu_182 <= sext_ln60_1_fu_2253_p1;
                empty_40_fu_190 <= sext_ln60_3_fu_2257_p1;
                empty_42_fu_198 <= sext_ln60_5_fu_2261_p1;
                empty_43_fu_202 <= sext_ln60_6_fu_2265_p1;
                empty_44_fu_206 <= sext_ln60_7_fu_2269_p1;
                empty_45_fu_210 <= sext_ln60_8_fu_2273_p1;
                empty_46_fu_214 <= sext_ln60_9_fu_2277_p1;
                empty_47_fu_218 <= sext_ln60_10_fu_2281_p1;
                empty_48_fu_222 <= sext_ln61_fu_2285_p1;
                empty_fu_178 <= sext_ln60_fu_2249_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln49_reg_2825_pp0_iter4_reg = ap_const_lv1_1) and (trunc_ln9_reg_2814_pp0_iter4_reg = ap_const_lv2_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then
                empty_39_fu_186 <= sext_ln60_2_fu_1363_p1;
                empty_41_fu_194 <= sext_ln60_4_fu_1367_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln49_reg_2825_pp0_iter5_reg = ap_const_lv1_1) and (trunc_ln9_reg_2814_pp0_iter5_reg = ap_const_lv2_0))) then
                firstBias_f_V_load_reg_3097 <= firstBias_f_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln36_fu_652_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (trunc_ln9_fu_667_p1 = ap_const_lv2_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln49_reg_2825 <= icmp_ln49_fu_740_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln49_reg_2825_pp0_iter3_reg = ap_const_lv1_1) and (trunc_ln9_reg_2814_pp0_iter3_reg = ap_const_lv2_0) and (icmp_ln36_reg_2810_pp0_iter3_reg = ap_const_lv1_0))) then
                    idxprom87_reg_2930(3 downto 0) <= idxprom87_fu_1210_p1(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln36_reg_2810_pp0_iter3_reg = ap_const_lv1_0))) then
                tmp1_V_11_30_reg_2955 <= tmp1_V_11_30_fu_1316_p3;
                tmp1_V_11_32_reg_2962 <= tmp1_V_11_32_fu_1332_p3;
                tmp1_V_11_34_reg_2969 <= tmp1_V_11_34_fu_1340_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln36_fu_652_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                trunc_ln123_2_reg_2829 <= trunc_ln123_2_fu_779_p1;
                trunc_ln9_reg_2814 <= trunc_ln9_fu_667_p1;
            end if;
        end if;
    end process;
    idxprom87_reg_2930(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln107_fu_1004_p2 <= std_logic_vector(signed(sext_ln76_fu_824_p1) + signed(ap_const_lv17_1));
    add_ln10_fu_2585_p2 <= std_logic_vector(unsigned(add_ln712_13_reg_3317) + unsigned(add_ln712_12_fu_2576_p2));
    add_ln123_1_fu_2243_p2 <= std_logic_vector(unsigned(tmp_74_cast_fu_2232_p3) + unsigned(trunc_ln123_3_fu_2239_p1));
    add_ln123_fu_1048_p2 <= std_logic_vector(unsigned(sub_ln123_fu_1042_p2) + unsigned(trunc_ln123_2_reg_2829));
    add_ln40_fu_682_p2 <= std_logic_vector(signed(sext_ln40_fu_674_p1) + signed(ap_const_lv17_1));
    add_ln50_fu_1152_p2 <= std_logic_vector(signed(sext_ln50_fu_1144_p1) + signed(ap_const_lv17_1));
    add_ln712_10_fu_2556_p2 <= std_logic_vector(unsigned(trunc_ln712_3_fu_2546_p1) + unsigned(trunc_ln712_2_fu_2542_p1));
    add_ln712_11_fu_2562_p2 <= std_logic_vector(unsigned(add_ln712_9_fu_2550_p2) + unsigned(add_ln712_6_reg_3282));
    add_ln712_12_fu_2576_p2 <= std_logic_vector(unsigned(trunc_ln712_1_reg_3307) + unsigned(trunc_ln712_reg_3302));
    add_ln712_13_fu_2567_p2 <= std_logic_vector(unsigned(add_ln712_10_fu_2556_p2) + unsigned(trunc_ln712_4_reg_3287));
    add_ln712_1_fu_2512_p2 <= std_logic_vector(unsigned(add_ln712_fu_2508_p2) + unsigned(mul_ln712_8_reg_3262));
    add_ln712_2_fu_2517_p2 <= std_logic_vector(unsigned(mul_ln712_9_reg_3267) + unsigned(mul_ln712_11_reg_3277));
    add_ln712_3_fu_2521_p2 <= std_logic_vector(unsigned(add_ln712_2_fu_2517_p2) + unsigned(mul_ln712_3_reg_3242));
    add_ln712_4_fu_2572_p2 <= std_logic_vector(unsigned(add_ln712_3_reg_3297) + unsigned(add_ln712_1_reg_3292));
    add_ln712_5_fu_2494_p2 <= std_logic_vector(unsigned(mul_ln712_2_reg_3182) + unsigned(b_fu_170));
    add_ln712_6_fu_2499_p2 <= std_logic_vector(unsigned(add_ln712_5_fu_2494_p2) + unsigned(mul_ln712_4_reg_3192));
    add_ln712_7_fu_2534_p2 <= std_logic_vector(unsigned(mul_ln712_reg_3232) + unsigned(mul_ln712_5_reg_3247));
    add_ln712_8_fu_2538_p2 <= std_logic_vector(unsigned(mul_ln712_1_reg_3237) + unsigned(mul_ln712_7_reg_3257));
    add_ln712_9_fu_2550_p2 <= std_logic_vector(unsigned(add_ln712_8_fu_2538_p2) + unsigned(add_ln712_7_fu_2534_p2));
    add_ln712_fu_2508_p2 <= std_logic_vector(unsigned(mul_ln712_6_reg_3252) + unsigned(mul_ln712_10_reg_3272));
    add_ln75_1_fu_759_p2 <= std_logic_vector(unsigned(j_fu_162) + unsigned(ap_const_lv12_1));
    add_ln75_fu_796_p2 <= std_logic_vector(unsigned(trunc_ln9_reg_2814) + unsigned(ap_const_lv2_1));
    add_ln76_fu_828_p2 <= std_logic_vector(signed(sext_ln76_fu_824_p1) + signed(ap_const_lv17_2));
    add_ln77_fu_888_p2 <= std_logic_vector(signed(sext_ln76_fu_824_p1) + signed(ap_const_lv17_3));
    add_ln78_1_fu_962_p2 <= std_logic_vector(unsigned(sub_ln78_fu_956_p2) + unsigned(zext_ln76_fu_856_p1));
    add_ln78_fu_938_p2 <= std_logic_vector(unsigned(trunc_ln76_fu_820_p1) + unsigned(ap_const_lv7_2));
    add_ln79_fu_968_p2 <= std_logic_vector(unsigned(trunc_ln76_fu_820_p1) + unsigned(ap_const_lv7_3));
    and_ln103_1_fu_1979_p2 <= (xor_ln88_fu_1661_p2 and icmp_ln76_4_reg_2850_pp0_iter4_reg);
    and_ln103_fu_1967_p2 <= (icmp_ln76_reg_2834_pp0_iter4_reg and icmp_ln76_4_reg_2850_pp0_iter4_reg);
    and_ln107_fu_2009_p2 <= (xor_ln76_1_fu_2004_p2 and icmp_ln107_reg_2899_pp0_iter4_reg);
    and_ln110_1_fu_2020_p2 <= (icmp_ln76_reg_2834_pp0_iter4_reg and and_ln107_fu_2009_p2);
    and_ln110_2_fu_2025_p2 <= (icmp_ln81_1_fu_1424_p2 and and_ln110_1_fu_2020_p2);
    and_ln110_3_fu_2031_p2 <= (icmp_ln81_fu_1411_p2 and and_ln110_1_fu_2020_p2);
    and_ln110_fu_2014_p2 <= (xor_ln88_fu_1661_p2 and and_ln107_fu_2009_p2);
    and_ln76_1_fu_1247_p2 <= (xor_ln77_fu_1241_p2 and icmp_ln76_1_reg_2859_pp0_iter3_reg);
    and_ln76_fu_1221_p2 <= (icmp_ln76_4_reg_2850_pp0_iter3_reg and icmp_ln76_1_reg_2859_pp0_iter3_reg);
    and_ln77_fu_1231_p2 <= (xor_ln76_fu_1225_p2 and icmp_ln77_reg_2870_pp0_iter3_reg);
    and_ln88_1_fu_1666_p2 <= (xor_ln88_fu_1661_p2 and icmp_ln82_reg_2891_pp0_iter4_reg);
    and_ln88_fu_1505_p2 <= (icmp_ln82_reg_2891_pp0_iter4_reg and icmp_ln76_reg_2834_pp0_iter4_reg);
    and_ln90_1_fu_1533_p2 <= (icmp_ln90_2_fu_1521_p2 and and_ln88_fu_1505_p2);
    and_ln90_2_fu_1539_p2 <= (and_ln90_fu_1527_p2 and and_ln90_1_fu_1533_p2);
    and_ln90_3_fu_1559_p2 <= (icmp_ln90_3_fu_1553_p2 and and_ln88_fu_1505_p2);
    and_ln90_4_fu_1579_p2 <= (icmp_ln90_4_fu_1573_p2 and and_ln88_fu_1505_p2);
    and_ln90_5_fu_1599_p2 <= (icmp_ln90_5_fu_1593_p2 and and_ln88_fu_1505_p2);
    and_ln90_fu_1527_p2 <= (icmp_ln90_fu_1509_p2 and icmp_ln90_1_fu_1515_p2);
    and_ln94_1_fu_1623_p2 <= (icmp_ln90_3_fu_1553_p2 and and_ln94_fu_1618_p2);
    and_ln94_2_fu_1629_p2 <= (icmp_ln90_4_fu_1573_p2 and and_ln94_fu_1618_p2);
    and_ln94_3_fu_1635_p2 <= (icmp_ln90_5_fu_1593_p2 and and_ln94_fu_1618_p2);
    and_ln94_fu_1618_p2 <= (xor_ln82_fu_1613_p2 and icmp_ln76_reg_2834_pp0_iter4_reg);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_2101_assign_proc : process(ap_enable_reg_pp0_iter4, icmp_ln36_reg_2810_pp0_iter3_reg, trunc_ln9_reg_2814_pp0_iter3_reg, icmp_ln49_reg_2825_pp0_iter3_reg)
    begin
                ap_condition_2101 <= ((icmp_ln49_reg_2825_pp0_iter3_reg = ap_const_lv1_1) and (trunc_ln9_reg_2814_pp0_iter3_reg = ap_const_lv2_0) and (icmp_ln36_reg_2810_pp0_iter3_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1));
    end process;


    ap_condition_2105_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln36_fu_652_p2, trunc_ln9_fu_667_p1, icmp_ln49_fu_740_p2)
    begin
                ap_condition_2105 <= ((icmp_ln36_fu_652_p2 = ap_const_lv1_0) and (icmp_ln49_fu_740_p2 = ap_const_lv1_0) and (trunc_ln9_fu_667_p1 = ap_const_lv2_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_condition_2109_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln36_fu_652_p2, trunc_ln9_fu_667_p1, icmp_ln49_fu_740_p2)
    begin
                ap_condition_2109 <= ((icmp_ln36_fu_652_p2 = ap_const_lv1_0) and (icmp_ln49_fu_740_p2 = ap_const_lv1_1) and (trunc_ln9_fu_667_p1 = ap_const_lv2_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_condition_2125_assign_proc : process(ap_enable_reg_pp0_iter4, icmp_ln36_reg_2810_pp0_iter3_reg, trunc_ln9_reg_2814_pp0_iter3_reg)
    begin
                ap_condition_2125 <= ((trunc_ln9_reg_2814_pp0_iter3_reg = ap_const_lv2_2) and (icmp_ln36_reg_2810_pp0_iter3_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1));
    end process;


    ap_condition_2128_assign_proc : process(ap_enable_reg_pp0_iter4, icmp_ln36_reg_2810_pp0_iter3_reg, trunc_ln9_reg_2814_pp0_iter3_reg)
    begin
                ap_condition_2128 <= ((trunc_ln9_reg_2814_pp0_iter3_reg = ap_const_lv2_0) and (icmp_ln36_reg_2810_pp0_iter3_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1));
    end process;


    ap_condition_888_assign_proc : process(icmp_ln36_reg_2810_pp0_iter2_reg, icmp_ln76_4_reg_2850, icmp_ln76_1_reg_2859)
    begin
                ap_condition_888 <= ((icmp_ln76_1_reg_2859 = ap_const_lv1_1) and (icmp_ln76_4_reg_2850 = ap_const_lv1_1) and (icmp_ln36_reg_2810_pp0_iter2_reg = ap_const_lv1_0));
    end process;


    ap_condition_898_assign_proc : process(icmp_ln36_reg_2810_pp0_iter2_reg, icmp_ln76_4_reg_2850, icmp_ln76_1_reg_2859, icmp_ln77_reg_2870)
    begin
                ap_condition_898 <= (((icmp_ln77_reg_2870 = ap_const_lv1_1) and (icmp_ln76_4_reg_2850 = ap_const_lv1_0) and (icmp_ln36_reg_2810_pp0_iter2_reg = ap_const_lv1_0)) or ((icmp_ln77_reg_2870 = ap_const_lv1_1) and (icmp_ln76_1_reg_2859 = ap_const_lv1_0) and (icmp_ln36_reg_2810_pp0_iter2_reg = ap_const_lv1_0)));
    end process;


    ap_condition_904_assign_proc : process(icmp_ln36_reg_2810_pp0_iter2_reg, icmp_ln76_4_reg_2850, icmp_ln76_1_reg_2859, icmp_ln77_reg_2870)
    begin
                ap_condition_904 <= ((icmp_ln77_reg_2870 = ap_const_lv1_0) and (icmp_ln76_1_reg_2859 = ap_const_lv1_1) and (icmp_ln76_4_reg_2850 = ap_const_lv1_0) and (icmp_ln36_reg_2810_pp0_iter2_reg = ap_const_lv1_0));
    end process;


    ap_condition_908_assign_proc : process(icmp_ln36_reg_2810_pp0_iter2_reg, icmp_ln76_1_reg_2859, icmp_ln77_reg_2870)
    begin
                ap_condition_908 <= ((icmp_ln77_reg_2870 = ap_const_lv1_0) and (icmp_ln76_1_reg_2859 = ap_const_lv1_0) and (icmp_ln36_reg_2810_pp0_iter2_reg = ap_const_lv1_0));
    end process;


    ap_condition_exit_pp0_iter1_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone, icmp_ln36_fu_652_p2)
    begin
        if (((icmp_ln36_fu_652_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_exit_pp0_iter4_stage0_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_subdone, icmp_ln36_reg_2810_pp0_iter3_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln36_reg_2810_pp0_iter3_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            ap_condition_exit_pp0_iter4_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter4_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter10_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter10_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11)
    begin
        if (((ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter1_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;

    d_5_fu_1198_p3 <= 
        sub_ln50_fu_1184_p2 when (tmp_565_fu_1158_p3(0) = '1') else 
        tmp_25_fu_1190_p3;
    firstBias_f_V_address0 <= idxprom87_reg_2930(3 - 1 downto 0);

    firstBias_f_V_ce0_assign_proc : process(ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            firstBias_f_V_ce0 <= ap_const_logic_1;
        else 
            firstBias_f_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    firstKernel_f_V_0_0_address0 <= idxprom87_reg_2930(3 - 1 downto 0);

    firstKernel_f_V_0_0_ce0_assign_proc : process(ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            firstKernel_f_V_0_0_ce0 <= ap_const_logic_1;
        else 
            firstKernel_f_V_0_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    firstKernel_f_V_0_1_address0 <= idxprom87_reg_2930(3 - 1 downto 0);

    firstKernel_f_V_0_1_ce0_assign_proc : process(ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            firstKernel_f_V_0_1_ce0 <= ap_const_logic_1;
        else 
            firstKernel_f_V_0_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    firstKernel_f_V_0_2_address0 <= idxprom87_fu_1210_p1(3 - 1 downto 0);

    firstKernel_f_V_0_2_ce0_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            firstKernel_f_V_0_2_ce0 <= ap_const_logic_1;
        else 
            firstKernel_f_V_0_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    firstKernel_f_V_1_0_address0 <= idxprom87_reg_2930(3 - 1 downto 0);

    firstKernel_f_V_1_0_ce0_assign_proc : process(ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            firstKernel_f_V_1_0_ce0 <= ap_const_logic_1;
        else 
            firstKernel_f_V_1_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    firstKernel_f_V_1_1_address0 <= idxprom87_fu_1210_p1(3 - 1 downto 0);

    firstKernel_f_V_1_1_ce0_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            firstKernel_f_V_1_1_ce0 <= ap_const_logic_1;
        else 
            firstKernel_f_V_1_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    firstKernel_f_V_1_2_address0 <= idxprom87_reg_2930(3 - 1 downto 0);

    firstKernel_f_V_1_2_ce0_assign_proc : process(ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            firstKernel_f_V_1_2_ce0 <= ap_const_logic_1;
        else 
            firstKernel_f_V_1_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    firstKernel_f_V_2_0_address0 <= idxprom87_reg_2930(3 - 1 downto 0);

    firstKernel_f_V_2_0_ce0_assign_proc : process(ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            firstKernel_f_V_2_0_ce0 <= ap_const_logic_1;
        else 
            firstKernel_f_V_2_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    firstKernel_f_V_2_1_address0 <= idxprom87_reg_2930(3 - 1 downto 0);

    firstKernel_f_V_2_1_ce0_assign_proc : process(ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            firstKernel_f_V_2_1_ce0 <= ap_const_logic_1;
        else 
            firstKernel_f_V_2_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    firstKernel_f_V_2_2_address0 <= idxprom87_reg_2930(3 - 1 downto 0);

    firstKernel_f_V_2_2_ce0_assign_proc : process(ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            firstKernel_f_V_2_2_ce0 <= ap_const_logic_1;
        else 
            firstKernel_f_V_2_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    firstKernel_f_V_3_0_address0 <= idxprom87_reg_2930(3 - 1 downto 0);

    firstKernel_f_V_3_0_ce0_assign_proc : process(ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            firstKernel_f_V_3_0_ce0 <= ap_const_logic_1;
        else 
            firstKernel_f_V_3_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    firstKernel_f_V_3_1_address0 <= idxprom87_reg_2930(3 - 1 downto 0);

    firstKernel_f_V_3_1_ce0_assign_proc : process(ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            firstKernel_f_V_3_1_ce0 <= ap_const_logic_1;
        else 
            firstKernel_f_V_3_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    firstKernel_f_V_3_2_address0 <= idxprom87_reg_2930(3 - 1 downto 0);

    firstKernel_f_V_3_2_ce0_assign_proc : process(ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            firstKernel_f_V_3_2_ce0 <= ap_const_logic_1;
        else 
            firstKernel_f_V_3_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    i_6_fu_728_p3 <= 
        sub_ln40_fu_714_p2 when (tmp_564_fu_688_p3(0) = '1') else 
        tmp_s_fu_720_p3;
    icmp_ln107_fu_1020_p2 <= "1" when (signed(tmp_568_fu_1010_p4) < signed(ap_const_lv10_1)) else "0";
    icmp_ln36_fu_652_p2 <= "1" when (id_fu_166 = ap_const_lv12_C00) else "0";
    icmp_ln49_fu_740_p2 <= "1" when (i_6_fu_728_p3 = ap_const_lv8_0) else "0";
    icmp_ln75_fu_765_p2 <= "1" when (unsigned(add_ln75_1_fu_759_p2) < unsigned(ap_const_lv12_3)) else "0";
    icmp_ln76_1_fu_850_p2 <= "0" when (t_fu_812_p3 = ap_const_lv2_0) else "1";
    icmp_ln76_2_fu_1298_p2 <= "1" when (t_reg_2844_pp0_iter3_reg = ap_const_lv2_1) else "0";
    icmp_ln76_3_fu_1311_p2 <= "1" when (t_reg_2844_pp0_iter3_reg = ap_const_lv2_0) else "0";
    icmp_ln76_4_fu_844_p2 <= "1" when (signed(tmp_566_fu_834_p4) < signed(ap_const_lv10_1)) else "0";
    icmp_ln76_fu_801_p2 <= "0" when (add_ln75_fu_796_p2 = ap_const_lv2_3) else "1";
    icmp_ln77_fu_904_p2 <= "1" when (signed(tmp_567_fu_894_p4) < signed(ap_const_lv10_1)) else "0";
    icmp_ln81_1_fu_1424_p2 <= "1" when (trunc_ln9_reg_2814_pp0_iter4_reg = ap_const_lv2_1) else "0";
    icmp_ln81_fu_1411_p2 <= "1" when (trunc_ln9_reg_2814_pp0_iter4_reg = ap_const_lv2_0) else "0";
    icmp_ln82_fu_998_p0 <= i_fu_238;
    icmp_ln82_fu_998_p2 <= "1" when (signed(icmp_ln82_fu_998_p0) > signed(ap_const_lv16_0)) else "0";
    icmp_ln84_fu_1437_p2 <= "0" when (trunc_ln9_reg_2814_pp0_iter4_reg = ap_const_lv2_0) else "1";
    icmp_ln90_1_fu_1515_p2 <= "0" when (or_ln_fu_1474_p3 = ap_const_lv3_5) else "1";
    icmp_ln90_2_fu_1521_p2 <= "0" when (or_ln_fu_1474_p3 = ap_const_lv3_4) else "1";
    icmp_ln90_3_fu_1553_p2 <= "1" when (or_ln_fu_1474_p3 = ap_const_lv3_6) else "0";
    icmp_ln90_4_fu_1573_p2 <= "1" when (or_ln_fu_1474_p3 = ap_const_lv3_5) else "0";
    icmp_ln90_5_fu_1593_p2 <= "1" when (or_ln_fu_1474_p3 = ap_const_lv3_4) else "0";
    icmp_ln90_fu_1509_p2 <= "0" when (or_ln_fu_1474_p3 = ap_const_lv3_6) else "1";
    id_4_fu_658_p2 <= std_logic_vector(unsigned(id_fu_166) + unsigned(ap_const_lv12_1));
    idxprom87_fu_1210_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(d_5_fu_1198_p3),64));

    input_r_address0_assign_proc : process(ap_enable_reg_pp0_iter3, zext_ln76_1_fu_1053_p1, ap_block_pp0_stage0, zext_ln77_fu_1057_p1, zext_ln78_1_fu_1061_p1, zext_ln79_1_fu_1065_p1, ap_condition_888, ap_condition_898, ap_condition_904, ap_condition_908)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then
            if ((ap_const_boolean_1 = ap_condition_908)) then 
                input_r_address0 <= zext_ln79_1_fu_1065_p1(9 - 1 downto 0);
            elsif ((ap_const_boolean_1 = ap_condition_904)) then 
                input_r_address0 <= zext_ln78_1_fu_1061_p1(9 - 1 downto 0);
            elsif ((ap_const_boolean_1 = ap_condition_898)) then 
                input_r_address0 <= zext_ln77_fu_1057_p1(9 - 1 downto 0);
            elsif ((ap_const_boolean_1 = ap_condition_888)) then 
                input_r_address0 <= zext_ln76_1_fu_1053_p1(9 - 1 downto 0);
            else 
                input_r_address0 <= "XXXXXXXXX";
            end if;
        else 
            input_r_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    input_r_ce0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001, icmp_ln36_reg_2810_pp0_iter2_reg, icmp_ln76_4_reg_2850, icmp_ln76_1_reg_2859, icmp_ln77_reg_2870)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln77_reg_2870 = ap_const_lv1_0) and (icmp_ln76_1_reg_2859 = ap_const_lv1_0) and (icmp_ln36_reg_2810_pp0_iter2_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln77_reg_2870 = ap_const_lv1_0) and (icmp_ln76_1_reg_2859 = ap_const_lv1_1) and (icmp_ln76_4_reg_2850 = ap_const_lv1_0) and (icmp_ln36_reg_2810_pp0_iter2_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln76_1_reg_2859 = ap_const_lv1_1) and (icmp_ln76_4_reg_2850 = ap_const_lv1_1) and (icmp_ln36_reg_2810_pp0_iter2_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (((icmp_ln77_reg_2870 = ap_const_lv1_1) and (icmp_ln76_4_reg_2850 = ap_const_lv1_0) and (icmp_ln36_reg_2810_pp0_iter2_reg = ap_const_lv1_0)) or ((icmp_ln77_reg_2870 = ap_const_lv1_1) and (icmp_ln76_1_reg_2859 = ap_const_lv1_0) and (icmp_ln36_reg_2810_pp0_iter2_reg = ap_const_lv1_0)))))) then 
            input_r_ce0 <= ap_const_logic_1;
        else 
            input_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    newFirst75_fu_876_p2 <= std_logic_vector(unsigned(zext_ln76_fu_856_p1) - unsigned(trunc_ln76_1_fu_860_p1));
    newFirst77_fu_926_p2 <= std_logic_vector(unsigned(zext_ln76_fu_856_p1) - unsigned(trunc_ln77_fu_910_p1));
    newFirst_fu_986_p2 <= std_logic_vector(unsigned(tmp_27_fu_978_p3) + unsigned(zext_ln76_fu_856_p1));
    newSecond76_fu_882_p2 <= std_logic_vector(unsigned(tmp_64_cast_fu_868_p3) + unsigned(newFirst75_fu_876_p2));
    newSecond78_fu_932_p2 <= std_logic_vector(unsigned(tmp_65_cast_fu_918_p3) + unsigned(newFirst77_fu_926_p2));
    newSecond_fu_992_p2 <= std_logic_vector(unsigned(newFirst_fu_986_p2) - unsigned(zext_ln79_fu_974_p1));
    num_V_3_fu_2580_p2 <= std_logic_vector(unsigned(add_ln712_11_reg_3312) + unsigned(add_ln712_4_fu_2572_p2));
    num_V_4_fu_2598_p3 <= 
        ap_const_lv35_0 when (tmp_569_fu_2590_p3(0) = '1') else 
        add_ln10_fu_2585_p2;
    or_ln107_fu_1992_p2 <= (icmp_ln76_4_reg_2850_pp0_iter4_reg or icmp_ln107_reg_2899_pp0_iter4_reg);
    or_ln110_1_fu_2043_p2 <= (or_ln110_fu_2037_p2 or and_ln110_fu_2014_p2);
    or_ln110_fu_2037_p2 <= (and_ln110_3_fu_2031_p2 or and_ln110_2_fu_2025_p2);
    or_ln76_fu_1252_p2 <= (and_ln77_fu_1231_p2 or and_ln76_1_fu_1247_p2);
    or_ln77_fu_1236_p2 <= (icmp_ln77_reg_2870_pp0_iter3_reg or and_ln76_fu_1221_p2);
    or_ln94_1_fu_1647_p2 <= (or_ln94_fu_1641_p2 or and_ln94_1_fu_1623_p2);
    or_ln94_2_fu_1679_p2 <= (icmp_ln82_reg_2891_pp0_iter4_reg or icmp_ln76_reg_2834_pp0_iter4_reg);
    or_ln94_fu_1641_p2 <= (and_ln94_3_fu_1635_p2 or and_ln94_2_fu_1629_p2);
    or_ln_fu_1474_p3 <= (ap_const_lv1_1 & trunc_ln9_reg_2814_pp0_iter4_reg);
    out_r_address0 <= zext_ln123_fu_2606_p1(12 - 1 downto 0);

    out_r_ce0_assign_proc : process(ap_enable_reg_pp0_iter11, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter11 = ap_const_logic_1))) then 
            out_r_ce0 <= ap_const_logic_1;
        else 
            out_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_r_d0 <= num_V_4_reg_3322;

    out_r_we0_assign_proc : process(ap_enable_reg_pp0_iter11, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter11 = ap_const_logic_1))) then 
            out_r_we0 <= ap_const_logic_1;
        else 
            out_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

    p_and_t3_cast_fu_706_p3 <= (ap_const_lv1_0 & xor_ln40_fu_700_p2);
    p_and_t7_cast_fu_1176_p3 <= (ap_const_lv1_0 & xor_ln50_fu_1170_p2);
    select_ln103_1_fu_1984_p3 <= 
        ap_const_lv12_0 when (and_ln103_1_fu_1979_p2(0) = '1') else 
        select_ln103_fu_1971_p3;
    select_ln103_2_fu_2057_p3 <= 
        select_ln84_3_fu_1938_p3 when (and_ln103_fu_1967_p2(0) = '1') else 
        ap_const_lv12_0;
    select_ln103_3_fu_2065_p3 <= 
        select_ln84_3_fu_1938_p3 when (and_ln103_1_fu_1979_p2(0) = '1') else 
        select_ln103_2_fu_2057_p3;
    select_ln103_4_fu_2089_p3 <= 
        tmp1_V_11_42_fu_1881_p3 when (and_ln103_fu_1967_p2(0) = '1') else 
        ap_const_lv12_0;
    select_ln103_5_fu_2097_p3 <= 
        tmp1_V_11_42_fu_1881_p3 when (and_ln103_1_fu_1979_p2(0) = '1') else 
        select_ln103_4_fu_2089_p3;
    select_ln103_6_fu_2121_p3 <= 
        tmp1_V_11_44_fu_1953_p3 when (and_ln103_fu_1967_p2(0) = '1') else 
        tmp1_V_11_34_reg_2969;
    select_ln103_7_fu_2128_p3 <= 
        ap_const_lv12_0 when (and_ln103_1_fu_1979_p2(0) = '1') else 
        select_ln103_6_fu_2121_p3;
    select_ln103_fu_1971_p3 <= 
        select_ln105_fu_1961_p3 when (and_ln103_fu_1967_p2(0) = '1') else 
        ap_const_lv12_0;
    select_ln105_fu_1961_p3 <= 
        tmp1_V_11_32_reg_2962 when (icmp_ln81_fu_1411_p2(0) = '1') else 
        tmp1_V_11_30_reg_2955;
    select_ln107_1_fu_2073_p3 <= 
        select_ln103_3_fu_2065_p3 when (or_ln107_fu_1992_p2(0) = '1') else 
        ap_const_lv12_0;
    select_ln107_2_fu_2105_p3 <= 
        select_ln103_5_fu_2097_p3 when (or_ln107_fu_1992_p2(0) = '1') else 
        ap_const_lv12_0;
    select_ln107_3_fu_2136_p3 <= 
        select_ln103_7_fu_2128_p3 when (or_ln107_fu_1992_p2(0) = '1') else 
        ap_const_lv12_0;
    select_ln107_4_fu_2168_p3 <= 
        select_ln84_2_fu_1896_p3 when (or_ln107_fu_1992_p2(0) = '1') else 
        ap_const_lv12_0;
    select_ln107_5_fu_2200_p3 <= 
        tmp1_V_11_40_fu_1867_p3 when (or_ln107_fu_1992_p2(0) = '1') else 
        ap_const_lv12_0;
    select_ln107_fu_1996_p3 <= 
        select_ln103_1_fu_1984_p3 when (or_ln107_fu_1992_p2(0) = '1') else 
        ap_const_lv12_0;
    select_ln109_fu_1888_p3 <= 
        tmp1_V_3_fu_226 when (icmp_ln81_1_fu_1424_p2(0) = '1') else 
        tmp1_V_4_fu_242;
    select_ln110_10_fu_2216_p3 <= 
        tmp1_V_11_40_fu_1867_p3 when (and_ln110_2_fu_2025_p2(0) = '1') else 
        select_ln110_9_fu_2208_p3;
    select_ln110_11_fu_2224_p3 <= 
        tmp1_V_11_40_fu_1867_p3 when (and_ln110_3_fu_2031_p2(0) = '1') else 
        select_ln110_10_fu_2216_p3;
    select_ln110_1_fu_2081_p3 <= 
        ap_const_lv12_0 when (or_ln110_1_fu_2043_p2(0) = '1') else 
        select_ln107_1_fu_2073_p3;
    select_ln110_2_fu_2113_p3 <= 
        ap_const_lv12_0 when (or_ln110_1_fu_2043_p2(0) = '1') else 
        select_ln107_2_fu_2105_p3;
    select_ln110_3_fu_2144_p3 <= 
        ap_const_lv12_0 when (and_ln110_fu_2014_p2(0) = '1') else 
        select_ln107_3_fu_2136_p3;
    select_ln110_4_fu_2152_p3 <= 
        tmp1_V_5_fu_254 when (and_ln110_2_fu_2025_p2(0) = '1') else 
        select_ln110_3_fu_2144_p3;
    select_ln110_5_fu_2160_p3 <= 
        tmp1_V_4_fu_242 when (and_ln110_3_fu_2031_p2(0) = '1') else 
        select_ln110_4_fu_2152_p3;
    select_ln110_6_fu_2176_p3 <= 
        select_ln84_2_fu_1896_p3 when (and_ln110_fu_2014_p2(0) = '1') else 
        select_ln107_4_fu_2168_p3;
    select_ln110_7_fu_2184_p3 <= 
        select_ln84_2_fu_1896_p3 when (and_ln110_2_fu_2025_p2(0) = '1') else 
        select_ln110_6_fu_2176_p3;
    select_ln110_8_fu_2192_p3 <= 
        select_ln84_2_fu_1896_p3 when (and_ln110_3_fu_2031_p2(0) = '1') else 
        select_ln110_7_fu_2184_p3;
    select_ln110_9_fu_2208_p3 <= 
        tmp1_V_11_40_fu_1867_p3 when (and_ln110_fu_2014_p2(0) = '1') else 
        select_ln107_5_fu_2200_p3;
    select_ln110_fu_2049_p3 <= 
        ap_const_lv12_0 when (or_ln110_1_fu_2043_p2(0) = '1') else 
        select_ln107_fu_1996_p3;
    select_ln75_fu_771_p3 <= 
        add_ln75_1_fu_759_p2 when (icmp_ln75_fu_765_p2(0) = '1') else 
        ap_const_lv12_0;
    select_ln76_1_fu_1282_p3 <= 
        trunc_ln76_5_fu_1274_p1 when (and_ln76_fu_1221_p2(0) = '1') else 
        trunc_ln76_6_fu_1278_p1;
    select_ln76_fu_1266_p3 <= 
        trunc_ln76_3_fu_1258_p1 when (and_ln76_1_fu_1247_p2(0) = '1') else 
        trunc_ln76_4_fu_1262_p1;
    select_ln84_1_fu_1489_p3 <= 
        select_ln85_fu_1481_p3 when (icmp_ln84_fu_1437_p2(0) = '1') else 
        ap_const_lv12_0;
    select_ln84_2_fu_1896_p3 <= 
        select_ln109_fu_1888_p3 when (icmp_ln84_fu_1437_p2(0) = '1') else 
        ap_const_lv12_0;
    select_ln84_3_fu_1938_p3 <= 
        tmp_fu_1911_p14 when (icmp_ln84_fu_1437_p2(0) = '1') else 
        ap_const_lv12_0;
    select_ln84_fu_1450_p3 <= 
        select_ln93_fu_1442_p3 when (icmp_ln84_fu_1437_p2(0) = '1') else 
        ap_const_lv12_0;
    select_ln85_fu_1481_p3 <= 
        tmp1_V_0_1_fu_234 when (icmp_ln81_1_fu_1424_p2(0) = '1') else 
        tmp1_V_1_1_fu_250;
    select_ln88_1_fu_1731_p3 <= 
        tmp1_V_11_38_fu_1466_p3 when (and_ln88_1_fu_1666_p2(0) = '1') else 
        ap_const_lv12_0;
    select_ln88_2_fu_1787_p3 <= 
        ap_const_lv12_0 when (and_ln88_1_fu_1666_p2(0) = '1') else 
        tmp1_V_4_fu_242;
    select_ln88_fu_1671_p3 <= 
        select_ln84_1_fu_1489_p3 when (and_ln88_1_fu_1666_p2(0) = '1') else 
        ap_const_lv12_0;
    select_ln89_fu_1497_p3 <= 
        tmp1_V_1_1_fu_250 when (icmp_ln81_fu_1411_p2(0) = '1') else 
        tmp1_V_2_1_fu_262;
    select_ln90_10_fu_1763_p3 <= 
        tmp1_V_11_38_fu_1466_p3 when (and_ln90_4_fu_1579_p2(0) = '1') else 
        select_ln90_9_fu_1755_p3;
    select_ln90_11_fu_1771_p3 <= 
        tmp1_V_11_38_fu_1466_p3 when (and_ln90_5_fu_1599_p2(0) = '1') else 
        select_ln90_10_fu_1763_p3;
    select_ln90_12_fu_1803_p3 <= 
        tmp1_V_4_fu_242 when (and_ln90_2_fu_1539_p2(0) = '1') else 
        select_ln94_5_fu_1795_p3;
    select_ln90_13_fu_1811_p3 <= 
        tmp1_V_3_fu_226 when (and_ln90_3_fu_1559_p2(0) = '1') else 
        select_ln90_12_fu_1803_p3;
    select_ln90_14_fu_1819_p3 <= 
        tmp1_V_2_fu_258 when (and_ln90_4_fu_1579_p2(0) = '1') else 
        select_ln90_13_fu_1811_p3;
    select_ln90_15_fu_1827_p3 <= 
        tmp1_V_1_fu_246 when (and_ln90_5_fu_1599_p2(0) = '1') else 
        select_ln90_14_fu_1819_p3;
    select_ln90_1_fu_1565_p3 <= 
        select_ln89_fu_1497_p3 when (and_ln90_3_fu_1559_p2(0) = '1') else 
        select_ln90_fu_1545_p3;
    select_ln90_2_fu_1585_p3 <= 
        select_ln89_fu_1497_p3 when (and_ln90_4_fu_1579_p2(0) = '1') else 
        select_ln90_1_fu_1565_p3;
    select_ln90_3_fu_1605_p3 <= 
        select_ln89_fu_1497_p3 when (and_ln90_5_fu_1599_p2(0) = '1') else 
        select_ln90_2_fu_1585_p3;
    select_ln90_4_fu_1691_p3 <= 
        select_ln84_1_fu_1489_p3 when (and_ln90_2_fu_1539_p2(0) = '1') else 
        select_ln94_1_fu_1683_p3;
    select_ln90_5_fu_1699_p3 <= 
        select_ln84_1_fu_1489_p3 when (and_ln90_3_fu_1559_p2(0) = '1') else 
        select_ln90_4_fu_1691_p3;
    select_ln90_6_fu_1707_p3 <= 
        select_ln84_1_fu_1489_p3 when (and_ln90_4_fu_1579_p2(0) = '1') else 
        select_ln90_5_fu_1699_p3;
    select_ln90_7_fu_1715_p3 <= 
        select_ln84_1_fu_1489_p3 when (and_ln90_5_fu_1599_p2(0) = '1') else 
        select_ln90_6_fu_1707_p3;
    select_ln90_8_fu_1747_p3 <= 
        tmp1_V_11_38_fu_1466_p3 when (and_ln90_2_fu_1539_p2(0) = '1') else 
        select_ln94_3_fu_1739_p3;
    select_ln90_9_fu_1755_p3 <= 
        tmp1_V_11_38_fu_1466_p3 when (and_ln90_3_fu_1559_p2(0) = '1') else 
        select_ln90_8_fu_1747_p3;
    select_ln90_fu_1545_p3 <= 
        select_ln89_fu_1497_p3 when (and_ln90_2_fu_1539_p2(0) = '1') else 
        ap_const_lv12_0;
    select_ln93_fu_1442_p3 <= 
        tmp1_V_0_fu_230 when (icmp_ln81_1_fu_1424_p2(0) = '1') else 
        tmp1_V_1_fu_246;
    select_ln94_1_fu_1683_p3 <= 
        select_ln88_fu_1671_p3 when (or_ln94_2_fu_1679_p2(0) = '1') else 
        ap_const_lv12_0;
    select_ln94_2_fu_1723_p3 <= 
        ap_const_lv12_0 when (or_ln94_1_fu_1647_p2(0) = '1') else 
        select_ln90_7_fu_1715_p3;
    select_ln94_3_fu_1739_p3 <= 
        select_ln88_1_fu_1731_p3 when (or_ln94_2_fu_1679_p2(0) = '1') else 
        ap_const_lv12_0;
    select_ln94_4_fu_1779_p3 <= 
        ap_const_lv12_0 when (or_ln94_1_fu_1647_p2(0) = '1') else 
        select_ln90_11_fu_1771_p3;
    select_ln94_5_fu_1795_p3 <= 
        select_ln88_2_fu_1787_p3 when (or_ln94_2_fu_1679_p2(0) = '1') else 
        ap_const_lv12_0;
    select_ln94_6_fu_1835_p3 <= 
        tmp1_V_3_fu_226 when (and_ln94_1_fu_1623_p2(0) = '1') else 
        select_ln90_15_fu_1827_p3;
    select_ln94_7_fu_1843_p3 <= 
        tmp1_V_2_fu_258 when (and_ln94_2_fu_1629_p2(0) = '1') else 
        select_ln94_6_fu_1835_p3;
    select_ln94_8_fu_1851_p3 <= 
        tmp1_V_1_fu_246 when (and_ln94_3_fu_1635_p2(0) = '1') else 
        select_ln94_7_fu_1843_p3;
    select_ln94_fu_1653_p3 <= 
        ap_const_lv12_0 when (or_ln94_1_fu_1647_p2(0) = '1') else 
        select_ln90_3_fu_1605_p3;
        sext_ln40_1_fu_736_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(i_6_fu_728_p3),16));

    sext_ln40_fu_674_p0 <= i_fu_238;
        sext_ln40_fu_674_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln40_fu_674_p0),17));

        sext_ln50_1_fu_1206_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(d_5_fu_1198_p3),16));

    sext_ln50_fu_1144_p0 <= d_fu_174;
        sext_ln50_fu_1144_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln50_fu_1144_p0),17));

        sext_ln60_10_fu_2281_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(firstKernel_f_V_3_1_q0),36));

        sext_ln60_1_fu_2253_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(firstKernel_f_V_0_1_q0),36));

        sext_ln60_2_fu_1363_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(firstKernel_f_V_0_2_q0),36));

        sext_ln60_3_fu_2257_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(firstKernel_f_V_1_0_q0),36));

        sext_ln60_4_fu_1367_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(firstKernel_f_V_1_1_q0),36));

        sext_ln60_5_fu_2261_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(firstKernel_f_V_1_2_q0),36));

        sext_ln60_6_fu_2265_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(firstKernel_f_V_2_0_q0),36));

        sext_ln60_7_fu_2269_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(firstKernel_f_V_2_1_q0),36));

        sext_ln60_8_fu_2273_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(firstKernel_f_V_2_2_q0),36));

        sext_ln60_9_fu_2277_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(firstKernel_f_V_3_0_q0),36));

        sext_ln60_fu_2249_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(firstKernel_f_V_0_0_q0),36));

        sext_ln61_fu_2285_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(firstKernel_f_V_3_2_q0),36));

        sext_ln63_fu_2363_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(firstBias_f_V_load_reg_3097),36));

    sext_ln76_fu_824_p0 <= i_fu_238;
        sext_ln76_fu_824_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln76_fu_824_p0),17));

    sub_ln123_fu_1042_p2 <= std_logic_vector(unsigned(tmp_72_cast_fu_1034_p3) - unsigned(trunc_ln123_fu_1026_p1));
    sub_ln40_fu_714_p2 <= std_logic_vector(unsigned(ap_const_lv8_0) - unsigned(p_and_t3_cast_fu_706_p3));
    sub_ln50_fu_1184_p2 <= std_logic_vector(unsigned(ap_const_lv4_0) - unsigned(p_and_t7_cast_fu_1176_p3));
    sub_ln78_fu_956_p2 <= std_logic_vector(unsigned(tmp_26_fu_948_p3) - unsigned(zext_ln78_fu_944_p1));
    t_fu_812_p3 <= 
        add_ln75_fu_796_p2 when (icmp_ln76_fu_801_p2(0) = '1') else 
        xor_ln76_2_fu_807_p2;
    tmp1_V_11_30_fu_1316_p3 <= 
        tmp1_V_8_fu_270 when (icmp_ln76_3_fu_1311_p2(0) = '1') else 
        tmp1_V_11_fu_1303_p3;
    tmp1_V_11_31_fu_1324_p3 <= 
        tmp1_V_11_45_fu_1290_p3 when (icmp_ln76_2_fu_1298_p2(0) = '1') else 
        tmp1_V_7_fu_266;
    tmp1_V_11_32_fu_1332_p3 <= 
        tmp1_V_7_fu_266 when (icmp_ln76_3_fu_1311_p2(0) = '1') else 
        tmp1_V_11_31_fu_1324_p3;
    tmp1_V_11_34_fu_1340_p3 <= 
        tmp1_V_11_45_fu_1290_p3 when (icmp_ln76_3_fu_1311_p2(0) = '1') else 
        tmp1_V_6_fu_274;
    tmp1_V_11_35_fu_1416_p3 <= 
        tmp1_V_0_fu_230 when (icmp_ln81_fu_1411_p2(0) = '1') else 
        tmp1_V_2_fu_258;
    tmp1_V_11_36_fu_1429_p3 <= 
        tmp1_V_1_fu_246 when (icmp_ln81_1_fu_1424_p2(0) = '1') else 
        tmp1_V_11_35_fu_1416_p3;
    tmp1_V_11_37_fu_1458_p3 <= 
        tmp1_V_0_1_fu_234 when (icmp_ln81_fu_1411_p2(0) = '1') else 
        tmp1_V_2_1_fu_262;
    tmp1_V_11_38_fu_1466_p3 <= 
        tmp1_V_1_1_fu_250 when (icmp_ln81_1_fu_1424_p2(0) = '1') else 
        tmp1_V_11_37_fu_1458_p3;
    tmp1_V_11_39_fu_1859_p3 <= 
        tmp1_V_3_fu_226 when (icmp_ln81_fu_1411_p2(0) = '1') else 
        tmp1_V_5_fu_254;
    tmp1_V_11_40_fu_1867_p3 <= 
        tmp1_V_4_fu_242 when (icmp_ln81_1_fu_1424_p2(0) = '1') else 
        tmp1_V_11_39_fu_1859_p3;
    tmp1_V_11_41_fu_1875_p3 <= 
        tmp1_V_11_34_reg_2969 when (icmp_ln81_fu_1411_p2(0) = '1') else 
        tmp1_V_11_30_reg_2955;
    tmp1_V_11_42_fu_1881_p3 <= 
        tmp1_V_11_32_reg_2962 when (icmp_ln81_1_fu_1424_p2(0) = '1') else 
        tmp1_V_11_41_fu_1875_p3;
    tmp1_V_11_43_fu_1946_p3 <= 
        tmp1_V_4_fu_242 when (icmp_ln81_fu_1411_p2(0) = '1') else 
        tmp1_V_11_34_reg_2969;
    tmp1_V_11_44_fu_1953_p3 <= 
        tmp1_V_5_fu_254 when (icmp_ln81_1_fu_1424_p2(0) = '1') else 
        tmp1_V_11_43_fu_1946_p3;
    tmp1_V_11_45_fu_1290_p3 <= 
        select_ln76_fu_1266_p3 when (or_ln76_fu_1252_p2(0) = '1') else 
        select_ln76_1_fu_1282_p3;
    tmp1_V_11_fu_1303_p3 <= 
        tmp1_V_8_fu_270 when (icmp_ln76_2_fu_1298_p2(0) = '1') else 
        tmp1_V_11_45_fu_1290_p3;
    tmp_25_fu_1190_p3 <= (ap_const_lv1_0 & trunc_ln50_1_fu_1166_p1);
    tmp_26_fu_948_p3 <= (add_ln78_fu_938_p2 & ap_const_lv2_0);
    tmp_27_fu_978_p3 <= (add_ln79_fu_968_p2 & ap_const_lv2_0);
    tmp_564_fu_688_p3 <= add_ln40_fu_682_p2(16 downto 16);
    tmp_565_fu_1158_p3 <= add_ln50_fu_1152_p2(16 downto 16);
    tmp_566_fu_834_p4 <= add_ln76_fu_828_p2(16 downto 7);
    tmp_567_fu_894_p4 <= add_ln77_fu_888_p2(16 downto 7);
    tmp_568_fu_1010_p4 <= add_ln107_fu_1004_p2(16 downto 7);
    tmp_569_fu_2590_p3 <= num_V_3_fu_2580_p2(35 downto 35);
    tmp_64_cast_fu_868_p3 <= (trunc_ln76_2_fu_864_p1 & ap_const_lv2_0);
    tmp_65_cast_fu_918_p3 <= (trunc_ln77_1_fu_914_p1 & ap_const_lv2_0);
    tmp_72_cast_fu_1034_p3 <= (trunc_ln123_1_fu_1030_p1 & ap_const_lv2_0);
    tmp_74_cast_fu_2232_p3 <= (add_ln123_reg_2905_pp0_iter4_reg & ap_const_lv3_0);
    tmp_fu_1911_p13 <= (ap_const_lv2_2 & trunc_ln9_reg_2814_pp0_iter4_reg);
    tmp_s_fu_720_p3 <= (ap_const_lv1_0 & trunc_ln40_1_fu_696_p1);
    trunc_ln123_1_fu_1030_p0 <= i_fu_238;
    trunc_ln123_1_fu_1030_p1 <= trunc_ln123_1_fu_1030_p0(7 - 1 downto 0);
    trunc_ln123_2_fu_779_p1 <= j_fu_162(9 - 1 downto 0);
    trunc_ln123_3_fu_2239_p1 <= d_fu_174(12 - 1 downto 0);
    trunc_ln123_fu_1026_p0 <= i_fu_238;
    trunc_ln123_fu_1026_p1 <= trunc_ln123_fu_1026_p0(9 - 1 downto 0);
    trunc_ln40_1_fu_696_p1 <= add_ln40_fu_682_p2(7 - 1 downto 0);
    trunc_ln40_fu_678_p0 <= i_fu_238;
    trunc_ln40_fu_678_p1 <= trunc_ln40_fu_678_p0(7 - 1 downto 0);
    trunc_ln50_1_fu_1166_p1 <= add_ln50_fu_1152_p2(3 - 1 downto 0);
    trunc_ln50_fu_1148_p0 <= d_fu_174;
    trunc_ln50_fu_1148_p1 <= trunc_ln50_fu_1148_p0(3 - 1 downto 0);
    trunc_ln712_1_fu_2530_p1 <= add_ln712_3_fu_2521_p2(35 - 1 downto 0);
    trunc_ln712_2_fu_2542_p1 <= add_ln712_7_fu_2534_p2(35 - 1 downto 0);
    trunc_ln712_3_fu_2546_p1 <= add_ln712_8_fu_2538_p2(35 - 1 downto 0);
    trunc_ln712_4_fu_2504_p1 <= add_ln712_6_fu_2499_p2(35 - 1 downto 0);
    trunc_ln712_fu_2526_p1 <= add_ln712_1_fu_2512_p2(35 - 1 downto 0);
    trunc_ln76_1_fu_860_p1 <= add_ln76_fu_828_p2(9 - 1 downto 0);
    trunc_ln76_2_fu_864_p1 <= add_ln76_fu_828_p2(7 - 1 downto 0);
    trunc_ln76_3_fu_1258_p1 <= input_r_q0(12 - 1 downto 0);
    trunc_ln76_4_fu_1262_p1 <= input_r_q0(12 - 1 downto 0);
    trunc_ln76_5_fu_1274_p1 <= input_r_q0(12 - 1 downto 0);
    trunc_ln76_6_fu_1278_p1 <= input_r_q0(12 - 1 downto 0);
    trunc_ln76_fu_820_p0 <= i_fu_238;
    trunc_ln76_fu_820_p1 <= trunc_ln76_fu_820_p0(7 - 1 downto 0);
    trunc_ln77_1_fu_914_p1 <= add_ln77_fu_888_p2(7 - 1 downto 0);
    trunc_ln77_fu_910_p1 <= add_ln77_fu_888_p2(9 - 1 downto 0);
    trunc_ln9_fu_667_p1 <= j_fu_162(2 - 1 downto 0);
    xor_ln40_fu_700_p2 <= (trunc_ln40_fu_678_p1 xor ap_const_lv7_7F);
    xor_ln50_fu_1170_p2 <= (trunc_ln50_fu_1148_p1 xor ap_const_lv3_7);
    xor_ln76_1_fu_2004_p2 <= (icmp_ln76_4_reg_2850_pp0_iter4_reg xor ap_const_lv1_1);
    xor_ln76_2_fu_807_p2 <= (trunc_ln9_reg_2814 xor ap_const_lv2_2);
    xor_ln76_fu_1225_p2 <= (ap_const_lv1_1 xor and_ln76_fu_1221_p2);
    xor_ln77_fu_1241_p2 <= (or_ln77_fu_1236_p2 xor ap_const_lv1_1);
    xor_ln82_fu_1613_p2 <= (icmp_ln82_reg_2891_pp0_iter4_reg xor ap_const_lv1_1);
    xor_ln88_fu_1661_p2 <= (icmp_ln76_reg_2834_pp0_iter4_reg xor ap_const_lv1_1);
    zext_ln123_fu_2606_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln123_1_reg_3092_pp0_iter10_reg),64));
    zext_ln76_1_fu_1053_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(newSecond76_reg_2865),64));
    zext_ln76_fu_856_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(t_fu_812_p3),9));
    zext_ln77_fu_1057_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(newSecond78_reg_2876),64));
    zext_ln78_1_fu_1061_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln78_1_reg_2881),64));
    zext_ln78_fu_944_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln78_fu_938_p2),9));
    zext_ln79_1_fu_1065_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(newSecond_reg_2886),64));
    zext_ln79_fu_974_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln79_fu_968_p2),9));
end behav;
