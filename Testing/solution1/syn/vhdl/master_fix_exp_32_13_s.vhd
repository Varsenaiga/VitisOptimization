-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
-- Version: 2021.1
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity master_fix_exp_32_13_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    x : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of master_fix_exp_32_13_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv5_F : STD_LOGIC_VECTOR (4 downto 0) := "01111";
    constant ap_const_lv23_78A013 : STD_LOGIC_VECTOR (22 downto 0) := "11110001010000000010011";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv32_55 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010101";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_61 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100001";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv46_3FFFFFFFFFFF : STD_LOGIC_VECTOR (45 downto 0) := "1111111111111111111111111111111111111111111111";
    constant ap_const_lv46_0 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000000000000000000000000000";
    constant ap_const_lv32_63 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_31 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110001";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_7FFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "01111111111111111111111111111111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal f_x_msb_4_h_table_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal f_x_msb_4_h_table_V_ce0 : STD_LOGIC;
    signal f_x_msb_4_h_table_V_q0 : STD_LOGIC_VECTOR (5 downto 0);
    signal f_x_msb_4_l_table_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal f_x_msb_4_l_table_V_ce0 : STD_LOGIC;
    signal f_x_msb_4_l_table_V_q0 : STD_LOGIC_VECTOR (6 downto 0);
    signal f_x_msb_3_table_V_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal f_x_msb_3_table_V_ce0 : STD_LOGIC;
    signal f_x_msb_3_table_V_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal f_x_msb_2_table_V_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal f_x_msb_2_table_V_ce0 : STD_LOGIC;
    signal f_x_msb_2_table_V_q0 : STD_LOGIC_VECTOR (45 downto 0);
    signal exp_x_msb_1_table_V_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal exp_x_msb_1_table_V_ce0 : STD_LOGIC;
    signal exp_x_msb_1_table_V_q0 : STD_LOGIC_VECTOR (49 downto 0);
    signal tmp_fu_251_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_834 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal tmp_reg_834_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_834_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_s_reg_840 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_Result_s_reg_840_pp0_iter1_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_29_reg_845 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_29_reg_845_pp0_iter1_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_30_fu_409_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_30_reg_851 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_31_fu_419_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_31_reg_857 : STD_LOGIC_VECTOR (2 downto 0);
    signal or_ln300_7_fu_476_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln300_7_reg_877 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln300_7_reg_877_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln300_7_reg_877_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exp_x_msb_3_4_lsb_m_1_V_fu_561_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal exp_x_msb_3_4_lsb_m_1_V_reg_882 : STD_LOGIC_VECTOR (47 downto 0);
    signal exp_x_msb_2_3_4_lsb_m_1_V_reg_893 : STD_LOGIC_VECTOR (49 downto 0);
    signal zext_ln573_fu_423_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln573_1_fu_429_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln573_2_fu_567_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln573_3_fu_674_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln640_fu_239_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_11_fu_259_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_12_fu_273_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_13_fu_287_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_14_fu_301_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_15_fu_315_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_19_fu_329_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_20_fu_343_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_21_fu_357_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_5_fu_229_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_Result_6_fu_243_p3 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln1551_fu_371_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1549_fu_377_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln222_2_fu_281_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal overf_fu_267_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln222_3_fu_295_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln222_4_fu_309_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln300_1_fu_440_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln300_fu_434_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln222_fu_323_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln222_5_fu_337_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln222_7_fu_365_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln300_fu_383_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln300_4_fu_458_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln222_6_fu_351_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln300_5_fu_464_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln300_3_fu_452_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln300_6_fu_470_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln300_2_fu_446_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_9_fu_495_p4 : STD_LOGIC_VECTOR (43 downto 0);
    signal p_Result_8_fu_482_p6 : STD_LOGIC_VECTOR (41 downto 0);
    signal r_V_9_fu_512_p0 : STD_LOGIC_VECTOR (43 downto 0);
    signal r_V_9_fu_512_p1 : STD_LOGIC_VECTOR (41 downto 0);
    signal r_V_9_fu_512_p2 : STD_LOGIC_VECTOR (85 downto 0);
    signal trunc_ln8_fu_518_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal rhs_2_fu_532_p5 : STD_LOGIC_VECTOR (46 downto 0);
    signal zext_ln712_fu_547_p1 : STD_LOGIC_VECTOR (42 downto 0);
    signal zext_ln1245_fu_528_p1 : STD_LOGIC_VECTOR (42 downto 0);
    signal add_ln712_fu_551_p2 : STD_LOGIC_VECTOR (42 downto 0);
    signal zext_ln712_1_fu_557_p1 : STD_LOGIC_VECTOR (47 downto 0);
    signal zext_ln1245_1_fu_543_p1 : STD_LOGIC_VECTOR (47 downto 0);
    signal p_Result_10_fu_577_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln712_4_fu_591_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln712_2_fu_587_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal ret_V_5_fu_594_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln640_2_fu_600_p1 : STD_LOGIC_VECTOR (40 downto 0);
    signal p_Result_11_fu_604_p3 : STD_LOGIC_VECTOR (49 downto 0);
    signal r_V_10_fu_619_p0 : STD_LOGIC_VECTOR (49 downto 0);
    signal r_V_10_fu_619_p1 : STD_LOGIC_VECTOR (47 downto 0);
    signal r_V_10_fu_619_p2 : STD_LOGIC_VECTOR (97 downto 0);
    signal trunc_ln1245_2_fu_625_p4 : STD_LOGIC_VECTOR (45 downto 0);
    signal rhs_4_fu_639_p4 : STD_LOGIC_VECTOR (55 downto 0);
    signal zext_ln1245_2_fu_635_p1 : STD_LOGIC_VECTOR (55 downto 0);
    signal ret_V_6_fu_649_p2 : STD_LOGIC_VECTOR (55 downto 0);
    signal zext_ln1245_3_fu_655_p1 : STD_LOGIC_VECTOR (55 downto 0);
    signal ret_V_fu_658_p2 : STD_LOGIC_VECTOR (55 downto 0);
    signal p_Result_7_fu_571_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln288_fu_679_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_fu_699_p0 : STD_LOGIC_VECTOR (49 downto 0);
    signal r_V_fu_699_p1 : STD_LOGIC_VECTOR (49 downto 0);
    signal r_V_fu_699_p2 : STD_LOGIC_VECTOR (99 downto 0);
    signal trunc_ln712_2_fu_705_p4 : STD_LOGIC_VECTOR (47 downto 0);
    signal zext_ln712_3_fu_715_p1 : STD_LOGIC_VECTOR (49 downto 0);
    signal y_l_V_fu_719_p2 : STD_LOGIC_VECTOR (49 downto 0);
    signal select_ln640_fu_684_p3 : STD_LOGIC_VECTOR (45 downto 0);
    signal y_V_fu_725_p4 : STD_LOGIC_VECTOR (45 downto 0);
    signal y_V_2_fu_735_p3 : STD_LOGIC_VECTOR (45 downto 0);
    signal tmp_25_fu_742_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal p_Result_s_65_fu_758_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal overf_1_fu_752_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_27_fu_772_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln533_fu_782_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln533_fu_766_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_28_fu_794_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln533_1_fu_804_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln533_1_fu_788_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal overf_2_fu_810_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_fu_816_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_idle_pp0_0to2 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal r_V_10_fu_619_p00 : STD_LOGIC_VECTOR (97 downto 0);
    signal r_V_10_fu_619_p10 : STD_LOGIC_VECTOR (97 downto 0);
    signal r_V_9_fu_512_p00 : STD_LOGIC_VECTOR (85 downto 0);
    signal r_V_9_fu_512_p10 : STD_LOGIC_VECTOR (85 downto 0);
    signal r_V_fu_699_p00 : STD_LOGIC_VECTOR (99 downto 0);
    signal r_V_fu_699_p10 : STD_LOGIC_VECTOR (99 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component master_fix_mul_44ns_42ns_86_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (43 downto 0);
        din1 : IN STD_LOGIC_VECTOR (41 downto 0);
        dout : OUT STD_LOGIC_VECTOR (85 downto 0) );
    end component;


    component master_fix_mul_50ns_48ns_98_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (49 downto 0);
        din1 : IN STD_LOGIC_VECTOR (47 downto 0);
        dout : OUT STD_LOGIC_VECTOR (97 downto 0) );
    end component;


    component master_fix_mul_50ns_50ns_100_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (49 downto 0);
        din1 : IN STD_LOGIC_VECTOR (49 downto 0);
        dout : OUT STD_LOGIC_VECTOR (99 downto 0) );
    end component;


    component master_fix_exp_32_13_s_f_x_msb_4_h_table_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (5 downto 0) );
    end component;


    component master_fix_exp_32_13_s_f_x_msb_4_l_table_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (6 downto 0) );
    end component;


    component master_fix_exp_32_13_s_f_x_msb_3_table_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component master_fix_exp_32_13_s_f_x_msb_2_table_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (45 downto 0) );
    end component;


    component master_fix_exp_32_13_s_exp_x_msb_1_table_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (49 downto 0) );
    end component;



begin
    f_x_msb_4_h_table_V_U : component master_fix_exp_32_13_s_f_x_msb_4_h_table_V
    generic map (
        DataWidth => 6,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => f_x_msb_4_h_table_V_address0,
        ce0 => f_x_msb_4_h_table_V_ce0,
        q0 => f_x_msb_4_h_table_V_q0);

    f_x_msb_4_l_table_V_U : component master_fix_exp_32_13_s_f_x_msb_4_l_table_V
    generic map (
        DataWidth => 7,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => f_x_msb_4_l_table_V_address0,
        ce0 => f_x_msb_4_l_table_V_ce0,
        q0 => f_x_msb_4_l_table_V_q0);

    f_x_msb_3_table_V_U : component master_fix_exp_32_13_s_f_x_msb_3_table_V
    generic map (
        DataWidth => 32,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => f_x_msb_3_table_V_address0,
        ce0 => f_x_msb_3_table_V_ce0,
        q0 => f_x_msb_3_table_V_q0);

    f_x_msb_2_table_V_U : component master_fix_exp_32_13_s_f_x_msb_2_table_V
    generic map (
        DataWidth => 46,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => f_x_msb_2_table_V_address0,
        ce0 => f_x_msb_2_table_V_ce0,
        q0 => f_x_msb_2_table_V_q0);

    exp_x_msb_1_table_V_U : component master_fix_exp_32_13_s_exp_x_msb_1_table_V
    generic map (
        DataWidth => 50,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => exp_x_msb_1_table_V_address0,
        ce0 => exp_x_msb_1_table_V_ce0,
        q0 => exp_x_msb_1_table_V_q0);

    mul_44ns_42ns_86_1_1_U60 : component master_fix_mul_44ns_42ns_86_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 44,
        din1_WIDTH => 42,
        dout_WIDTH => 86)
    port map (
        din0 => r_V_9_fu_512_p0,
        din1 => r_V_9_fu_512_p1,
        dout => r_V_9_fu_512_p2);

    mul_50ns_48ns_98_1_1_U61 : component master_fix_mul_50ns_48ns_98_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 50,
        din1_WIDTH => 48,
        dout_WIDTH => 98)
    port map (
        din0 => r_V_10_fu_619_p0,
        din1 => r_V_10_fu_619_p1,
        dout => r_V_10_fu_619_p2);

    mul_50ns_50ns_100_1_1_U62 : component master_fix_mul_50ns_50ns_100_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 50,
        din1_WIDTH => 50,
        dout_WIDTH => 100)
    port map (
        din0 => r_V_fu_699_p0,
        din1 => r_V_fu_699_p1,
        dout => r_V_fu_699_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (or_ln300_7_reg_877_pp0_iter1_reg = ap_const_lv1_0))) then
                exp_x_msb_2_3_4_lsb_m_1_V_reg_893 <= ret_V_fu_658_p2(55 downto 6);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (or_ln300_7_reg_877 = ap_const_lv1_0))) then
                exp_x_msb_3_4_lsb_m_1_V_reg_882 <= exp_x_msb_3_4_lsb_m_1_V_fu_561_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                or_ln300_7_reg_877 <= or_ln300_7_fu_476_p2;
                or_ln300_7_reg_877_pp0_iter1_reg <= or_ln300_7_reg_877;
                p_Result_s_reg_840 <= x(22 downto 16);
                p_Result_s_reg_840_pp0_iter1_reg <= p_Result_s_reg_840;
                tmp_29_reg_845 <= x(15 downto 8);
                tmp_29_reg_845_pp0_iter1_reg <= tmp_29_reg_845;
                tmp_30_reg_851 <= x(7 downto 3);
                tmp_31_reg_857 <= tmp_31_fu_419_p1;
                tmp_reg_834 <= x(31 downto 31);
                tmp_reg_834_pp0_iter1_reg <= tmp_reg_834;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                or_ln300_7_reg_877_pp0_iter2_reg <= or_ln300_7_reg_877_pp0_iter1_reg;
                tmp_reg_834_pp0_iter2_reg <= tmp_reg_834_pp0_iter1_reg;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln712_fu_551_p2 <= std_logic_vector(unsigned(zext_ln712_fu_547_p1) + unsigned(zext_ln1245_fu_528_p1));
    and_ln300_fu_383_p2 <= (icmp_ln1551_fu_371_p2 and icmp_ln1549_fu_377_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_done_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start;

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_idle_pp0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to2_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0_0to2 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to2)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0_0to2 = ap_const_logic_1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= 
        ap_const_lv32_7FFFFFFF when (overf_2_fu_810_p2(0) = '1') else 
        tmp_s_fu_816_p4;
    exp_x_msb_1_table_V_address0 <= zext_ln573_3_fu_674_p1(8 - 1 downto 0);

    exp_x_msb_1_table_V_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            exp_x_msb_1_table_V_ce0 <= ap_const_logic_1;
        else 
            exp_x_msb_1_table_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    exp_x_msb_3_4_lsb_m_1_V_fu_561_p2 <= std_logic_vector(unsigned(zext_ln712_1_fu_557_p1) + unsigned(zext_ln1245_1_fu_543_p1));
    f_x_msb_2_table_V_address0 <= zext_ln573_2_fu_567_p1(8 - 1 downto 0);

    f_x_msb_2_table_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            f_x_msb_2_table_V_ce0 <= ap_const_logic_1;
        else 
            f_x_msb_2_table_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    f_x_msb_3_table_V_address0 <= zext_ln573_1_fu_429_p1(5 - 1 downto 0);

    f_x_msb_3_table_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            f_x_msb_3_table_V_ce0 <= ap_const_logic_1;
        else 
            f_x_msb_3_table_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    f_x_msb_4_h_table_V_address0 <= zext_ln573_fu_423_p1(3 - 1 downto 0);

    f_x_msb_4_h_table_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            f_x_msb_4_h_table_V_ce0 <= ap_const_logic_1;
        else 
            f_x_msb_4_h_table_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    f_x_msb_4_l_table_V_address0 <= zext_ln573_fu_423_p1(3 - 1 downto 0);

    f_x_msb_4_l_table_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            f_x_msb_4_l_table_V_ce0 <= ap_const_logic_1;
        else 
            f_x_msb_4_l_table_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln1549_fu_377_p2 <= "1" when (unsigned(p_Result_6_fu_243_p3) > unsigned(ap_const_lv23_78A013)) else "0";
    icmp_ln1551_fu_371_p2 <= "1" when (p_Result_5_fu_229_p4 = ap_const_lv5_F) else "0";
    icmp_ln533_1_fu_804_p2 <= "0" when (tmp_28_fu_794_p4 = ap_const_lv5_0) else "1";
    icmp_ln533_fu_782_p2 <= "0" when (tmp_27_fu_772_p4 = ap_const_lv3_0) else "1";
    or_ln300_1_fu_440_p2 <= (xor_ln222_4_fu_309_p2 or xor_ln222_3_fu_295_p2);
    or_ln300_2_fu_446_p2 <= (or_ln300_fu_434_p2 or or_ln300_1_fu_440_p2);
    or_ln300_3_fu_452_p2 <= (xor_ln222_fu_323_p2 or xor_ln222_5_fu_337_p2);
    or_ln300_4_fu_458_p2 <= (xor_ln222_7_fu_365_p2 or and_ln300_fu_383_p2);
    or_ln300_5_fu_464_p2 <= (xor_ln222_6_fu_351_p2 or or_ln300_4_fu_458_p2);
    or_ln300_6_fu_470_p2 <= (or_ln300_5_fu_464_p2 or or_ln300_3_fu_452_p2);
    or_ln300_7_fu_476_p2 <= (or_ln300_6_fu_470_p2 or or_ln300_2_fu_446_p2);
    or_ln300_fu_434_p2 <= (xor_ln222_2_fu_281_p2 or overf_fu_267_p2);
    or_ln533_1_fu_788_p2 <= (or_ln533_fu_766_p2 or icmp_ln533_fu_782_p2);
    or_ln533_fu_766_p2 <= (p_Result_s_65_fu_758_p3 or overf_1_fu_752_p2);
    overf_1_fu_752_p2 <= "0" when (tmp_25_fu_742_p4 = ap_const_lv2_0) else "1";
    overf_2_fu_810_p2 <= (or_ln533_1_fu_788_p2 or icmp_ln533_1_fu_804_p2);
    overf_fu_267_p2 <= (tmp_fu_251_p3 xor tmp_11_fu_259_p3);
    p_Result_10_fu_577_p4 <= f_x_msb_2_table_V_q0(45 downto 41);
    p_Result_11_fu_604_p3 <= (ret_V_5_fu_594_p2 & trunc_ln640_2_fu_600_p1);
    p_Result_5_fu_229_p4 <= x(23 downto 19);
    p_Result_6_fu_243_p3 <= (trunc_ln640_fu_239_p1 & ap_const_lv4_0);
    p_Result_7_fu_571_p3 <= (tmp_reg_834_pp0_iter1_reg & p_Result_s_reg_840_pp0_iter1_reg);
    p_Result_8_fu_482_p6 <= ((((tmp_31_reg_857 & ap_const_lv14_0) & f_x_msb_4_h_table_V_q0) & ap_const_lv12_0) & f_x_msb_4_l_table_V_q0);
    p_Result_9_fu_495_p4 <= ((tmp_30_reg_851 & ap_const_lv7_0) & f_x_msb_3_table_V_q0);
    p_Result_s_65_fu_758_p3 <= y_V_2_fu_735_p3(43 downto 43);
    r_V_10_fu_619_p0 <= r_V_10_fu_619_p00(50 - 1 downto 0);
    r_V_10_fu_619_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_11_fu_604_p3),98));
    r_V_10_fu_619_p1 <= r_V_10_fu_619_p10(48 - 1 downto 0);
    r_V_10_fu_619_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_x_msb_3_4_lsb_m_1_V_reg_882),98));
    r_V_9_fu_512_p0 <= r_V_9_fu_512_p00(44 - 1 downto 0);
    r_V_9_fu_512_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_9_fu_495_p4),86));
    r_V_9_fu_512_p1 <= r_V_9_fu_512_p10(42 - 1 downto 0);
    r_V_9_fu_512_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_8_fu_482_p6),86));
    r_V_fu_699_p0 <= r_V_fu_699_p00(50 - 1 downto 0);
    r_V_fu_699_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_x_msb_2_3_4_lsb_m_1_V_reg_893),100));
    r_V_fu_699_p1 <= r_V_fu_699_p10(50 - 1 downto 0);
    r_V_fu_699_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_x_msb_1_table_V_q0),100));
    ret_V_5_fu_594_p2 <= std_logic_vector(unsigned(zext_ln712_4_fu_591_p1) + unsigned(zext_ln712_2_fu_587_p1));
    ret_V_6_fu_649_p2 <= std_logic_vector(unsigned(rhs_4_fu_639_p4) + unsigned(zext_ln1245_2_fu_635_p1));
    ret_V_fu_658_p2 <= std_logic_vector(unsigned(ret_V_6_fu_649_p2) + unsigned(zext_ln1245_3_fu_655_p1));
    rhs_2_fu_532_p5 <= (((tmp_30_reg_851 & ap_const_lv7_0) & f_x_msb_3_table_V_q0) & ap_const_lv3_0);
    rhs_4_fu_639_p4 <= ((ret_V_5_fu_594_p2 & trunc_ln640_2_fu_600_p1) & ap_const_lv6_0);
    select_ln640_fu_684_p3 <= 
        ap_const_lv46_3FFFFFFFFFFF when (xor_ln288_fu_679_p2(0) = '1') else 
        ap_const_lv46_0;
    tmp_11_fu_259_p3 <= x(23 downto 23);
    tmp_12_fu_273_p3 <= x(24 downto 24);
    tmp_13_fu_287_p3 <= x(25 downto 25);
    tmp_14_fu_301_p3 <= x(26 downto 26);
    tmp_15_fu_315_p3 <= x(27 downto 27);
    tmp_19_fu_329_p3 <= x(28 downto 28);
    tmp_20_fu_343_p3 <= x(29 downto 29);
    tmp_21_fu_357_p3 <= x(30 downto 30);
    tmp_25_fu_742_p4 <= y_V_2_fu_735_p3(45 downto 44);
    tmp_27_fu_772_p4 <= y_V_2_fu_735_p3(42 downto 40);
    tmp_28_fu_794_p4 <= y_V_2_fu_735_p3(39 downto 35);
    tmp_30_fu_409_p4 <= x(7 downto 3);
    tmp_31_fu_419_p1 <= x(3 - 1 downto 0);
    tmp_fu_251_p3 <= x(31 downto 31);
    tmp_s_fu_816_p4 <= y_V_2_fu_735_p3(35 downto 4);
    trunc_ln1245_2_fu_625_p4 <= r_V_10_fu_619_p2(97 downto 52);
    trunc_ln640_2_fu_600_p1 <= f_x_msb_2_table_V_q0(41 - 1 downto 0);
    trunc_ln640_fu_239_p1 <= x(19 - 1 downto 0);
    trunc_ln712_2_fu_705_p4 <= r_V_fu_699_p2(99 downto 52);
    trunc_ln8_fu_518_p4 <= r_V_9_fu_512_p2(85 downto 55);
    xor_ln222_2_fu_281_p2 <= (tmp_fu_251_p3 xor tmp_12_fu_273_p3);
    xor_ln222_3_fu_295_p2 <= (tmp_fu_251_p3 xor tmp_13_fu_287_p3);
    xor_ln222_4_fu_309_p2 <= (tmp_fu_251_p3 xor tmp_14_fu_301_p3);
    xor_ln222_5_fu_337_p2 <= (tmp_fu_251_p3 xor tmp_19_fu_329_p3);
    xor_ln222_6_fu_351_p2 <= (tmp_fu_251_p3 xor tmp_20_fu_343_p3);
    xor_ln222_7_fu_365_p2 <= (tmp_fu_251_p3 xor tmp_21_fu_357_p3);
    xor_ln222_fu_323_p2 <= (tmp_fu_251_p3 xor tmp_15_fu_315_p3);
    xor_ln288_fu_679_p2 <= (tmp_reg_834_pp0_iter2_reg xor ap_const_lv1_1);
    y_V_2_fu_735_p3 <= 
        select_ln640_fu_684_p3 when (or_ln300_7_reg_877_pp0_iter2_reg(0) = '1') else 
        y_V_fu_725_p4;
    y_V_fu_725_p4 <= y_l_V_fu_719_p2(49 downto 4);
    y_l_V_fu_719_p2 <= std_logic_vector(unsigned(exp_x_msb_1_table_V_q0) + unsigned(zext_ln712_3_fu_715_p1));
    zext_ln1245_1_fu_543_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(rhs_2_fu_532_p5),48));
    zext_ln1245_2_fu_635_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln1245_2_fu_625_p4),56));
    zext_ln1245_3_fu_655_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_x_msb_3_4_lsb_m_1_V_reg_882),56));
    zext_ln1245_fu_528_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln8_fu_518_p4),43));
    zext_ln573_1_fu_429_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_30_fu_409_p4),64));
    zext_ln573_2_fu_567_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_29_reg_845),64));
    zext_ln573_3_fu_674_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_7_fu_571_p3),64));
    zext_ln573_fu_423_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_31_fu_419_p1),64));
    zext_ln712_1_fu_557_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln712_fu_551_p2),48));
    zext_ln712_2_fu_587_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_10_fu_577_p4),9));
    zext_ln712_3_fu_715_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln712_2_fu_705_p4),50));
    zext_ln712_4_fu_591_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_29_reg_845_pp0_iter1_reg),9));
    zext_ln712_fu_547_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_8_fu_482_p6),43));
end behav;
