-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
-- Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity master_fix_convolution2_fix_secondKernel_f_V_0 is 
    generic(
             DataWidth     : integer := 20; 
             AddressWidth     : integer := 7; 
             AddressRange    : integer := 128
    ); 
    port (
          address0      : in std_logic_vector(AddressWidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DataWidth-1 downto 0);
          reset     : in std_logic;
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of master_fix_convolution2_fix_secondKernel_f_V_0 is 

signal address0_tmp : std_logic_vector(AddressWidth-1 downto 0); 
type mem_array is array (0 to AddressRange-1) of std_logic_vector (DataWidth-1 downto 0); 
signal mem : mem_array := (
    0 => "10110111110000101110", 1 => "11001100110000111010", 
    2 => "10110001001110111100", 3 => "10111011001001000010", 
    4 => "11010100000010100101", 5 => "11000100101101011000", 
    6 => "11100001111111001111", 7 => "00000000011000000101", 
    8 => "00000111001000110001", 9 => "00001101011001100110", 
    10 => "11111010001010100001", 11 => "00000110100110010110", 
    12 => "11110000011110100111", 13 => "11111001111000100001", 
    14 => "11111100111111000110", 15 => "00001111001110001110", 
    16 => "11110000111101111101", 17 => "11110010111001000110", 
    18 => "11011011111100011100", 19 => "11110010011110011110", 
    20 => "11101111000110110000", 21 => "11110100000001000010", 
    22 => "11111111010101110011", 23 => "11110111000011100101", 
    24 => "00001000100101100100", 25 => "00111010010001111011", 
    26 => "11110110000110111110", 27 => "11101010100110100111", 
    28 => "00001011111101110100", 29 => "11111001010111101111", 
    30 => "11101010011010100001", 31 => "11111100100110101111", 
    32 => "11110001010100010110", 33 => "00000101011000111001", 
    34 => "11111111100101010100", 35 => "11101011011011010001", 
    36 => "11111111110001111100", 37 => "01100101101000101011", 
    38 => "00010111000001001101", 39 => "11100010001111110111", 
    40 => "11101000011010000010", 41 => "11011010111111111001", 
    42 => "11111111011010001110", 43 => "11100110001011111000", 
    44 => "11110110101111100111", 45 => "11011010100111010100", 
    46 => "11011110010101010001", 47 => "00011101101010101110", 
    48 => "00001110001100010010", 49 => "00001011010111110110", 
    50 => "00000101101101001101", 51 => "00110111101010110101", 
    52 => "00001100000101110101", 53 => "11100010000011100011", 
    54 => "11101001101010110011", 55 => "00010100011110010110", 
    56 => "11101101110100001010", 57 => "00011000001010111111", 
    58 => "11110000010101010111", 59 => "11111000011100010111", 
    60 => "11110101000011011100", 61 => "11111100011111110111", 
    62 => "00100111010110001011", 63 => "11100111000111001100", 
    64 => "11110000111111001100", 65 => "11110100110011110000", 
    66 => "11100100001010100100", 67 => "00000010110010001010", 
    68 => "11101111000110101101", 69 => "11101011001010010110", 
    70 => "00010100111111110100", 71 => "00101001001001011101", 
    72 => "11101011110011000111", 73 => "11100010001100100110", 
    74 => "10110101001011001110", 75 => "10111111010001001001", 
    76 => "11010101001100000110", 77 => "11101010010011001111", 
    78 => "11100110111111111010", 79 => "11011010011011010001", 
    80 => "11111111111111100011", 81 => "11010110000101110111", 
    82 => "00001010010100100101", 83 => "11010011010111100111", 
    84 => "00110000100011000111", 85 => "00000101010000110001", 
    86 => "00001011101011111111", 87 => "11110000100110010100", 
    88 => "00000110110110000000", 89 => "11101111000100001110", 
    90 => "00101110101111101100", 91 => "11110111100100110000", 
    92 => "00010101001001101101", 93 => "00001100011100010101", 
    94 => "00000000010000111000", 95 => "00000011101000101000", 
    96 => "00000100000011011100", 97 => "11110111100111110001", 
    98 => "00011010110001000110", 99 => "11111110110111110010", 
    100 => "10011110101100111110", 101 => "11100111011101100011", 
    102 => "11101110100110111110", 103 => "11111110111000001100", 
    104 => "01010001011001001101", 105 => "00000100011110100110", 
    106 => "11101010110111000111", 107 => "11011011001000011000", 
    108 => "00001011011000011000", 109 => "00000010011101110011", 
    110 => "11111100000010010001", 111 => "00010000101011101100", 
    112 => "00100111011000001011", 113 => "00011110111100101010", 
    114 => "11011110111000101100", 115 => "11011000111001100110", 
    116 => "11110000111010110001", 117 => "00010110001100111101", 
    118 => "00000110010011100101", 119 => "00011011100011000111", 
    120 => "11111000010100010101", 121 => "00000011101100101011", 
    122 => "00000110001010100111", 123 => "11111111100010110111", 
    124 => "00011010000101100001", 125 => "11110101010110100001", 
    126 => "11110100000110001101", 127 => "11110101011011011010" );


begin 


memory_access_guard_0: process (address0) 
begin
      address0_tmp <= address0;
--synthesis translate_off
      if (CONV_INTEGER(address0) > AddressRange-1) then
           address0_tmp <= (others => '0');
      else 
           address0_tmp <= address0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(address0_tmp)); 
        end if;
    end if;
end process;

end rtl;

