-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
-- Version: 2021.1
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity master_fix_convolution2_fix is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_0_0_0_0_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    m_0_0_0_0_ce0 : OUT STD_LOGIC;
    m_0_0_0_0_q0 : IN STD_LOGIC_VECTOR (35 downto 0);
    m_0_0_0_0_address1 : OUT STD_LOGIC_VECTOR (8 downto 0);
    m_0_0_0_0_ce1 : OUT STD_LOGIC;
    m_0_0_0_0_q1 : IN STD_LOGIC_VECTOR (35 downto 0);
    out_0_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    out_0_ce0 : OUT STD_LOGIC;
    out_0_we0 : OUT STD_LOGIC;
    out_0_d0 : OUT STD_LOGIC_VECTOR (35 downto 0);
    grp_fu_1176_p_din0 : OUT STD_LOGIC_VECTOR (20 downto 0);
    grp_fu_1176_p_din1 : OUT STD_LOGIC_VECTOR (35 downto 0);
    grp_fu_1176_p_dout0 : IN STD_LOGIC_VECTOR (54 downto 0);
    grp_fu_1176_p_ce : OUT STD_LOGIC );
end;


architecture behav of master_fix_convolution2_fix is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (26 downto 0) := "000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (26 downto 0) := "000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (26 downto 0) := "000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (26 downto 0) := "000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (26 downto 0) := "000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (26 downto 0) := "000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (26 downto 0) := "000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (26 downto 0) := "000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (26 downto 0) := "000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (26 downto 0) := "001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (26 downto 0) := "010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (26 downto 0) := "100000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv36_0 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000000000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv6_2A : STD_LOGIC_VECTOR (5 downto 0) := "101010";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv6_2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_const_lv6_3F : STD_LOGIC_VECTOR (5 downto 0) := "111111";
    constant ap_const_lv19_0 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000000";
    constant ap_const_lv32_36 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110110";
    constant ap_const_lv18_0 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000000";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal secondBias_f_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal secondBias_f_V_ce0 : STD_LOGIC;
    signal secondBias_f_V_q0 : STD_LOGIC_VECTOR (20 downto 0);
    signal secondKernel_f_V_1_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal secondKernel_f_V_1_ce0 : STD_LOGIC;
    signal secondKernel_f_V_1_q0 : STD_LOGIC_VECTOR (19 downto 0);
    signal secondKernel_f_V_0_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal secondKernel_f_V_0_ce0 : STD_LOGIC;
    signal secondKernel_f_V_0_q0 : STD_LOGIC_VECTOR (19 downto 0);
    signal secondKernel_f_V_2_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal secondKernel_f_V_2_ce0 : STD_LOGIC;
    signal secondKernel_f_V_2_q0 : STD_LOGIC_VECTOR (20 downto 0);
    signal secondKernel_f_V_3_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal secondKernel_f_V_3_ce0 : STD_LOGIC;
    signal secondKernel_f_V_3_q0 : STD_LOGIC_VECTOR (20 downto 0);
    signal reg_360 : STD_LOGIC_VECTOR (35 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal reg_365 : STD_LOGIC_VECTOR (20 downto 0);
    signal zext_ln1171_fu_382_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln1171_reg_1051 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_cast_fu_390_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_cast_reg_1056 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln332_fu_404_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln332_reg_1067 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln332_fu_398_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln334_fu_410_p1 : STD_LOGIC_VECTOR (35 downto 0);
    signal sext_ln334_reg_1077 : STD_LOGIC_VECTOR (35 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_s_fu_414_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_s_reg_1082 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal out_0_addr_reg_1087 : STD_LOGIC_VECTOR (9 downto 0);
    signal indvars_iv_next20_fu_446_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal indvars_iv_next20_reg_1095 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal add_ln340_fu_490_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln340_reg_1115 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_10_fu_502_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_10_reg_1120 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln340_fu_484_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp50_fu_510_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp50_reg_1125 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_11_fu_516_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_11_reg_1129 : STD_LOGIC_VECTOR (8 downto 0);
    signal cmp27_fu_523_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp27_reg_1135 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp87_fu_529_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp87_reg_1139 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_12_fu_540_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_12_reg_1143 : STD_LOGIC_VECTOR (8 downto 0);
    signal secondKernel_f_V_1_load_reg_1148 : STD_LOGIC_VECTOR (19 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal grp_fu_555_p2 : STD_LOGIC_VECTOR (54 downto 0);
    signal r_V_15_reg_1163 : STD_LOGIC_VECTOR (54 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal trunc_ln727_fu_561_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal trunc_ln727_reg_1168 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln415_fu_625_p2 : STD_LOGIC_VECTOR (35 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal add_ln345_fu_665_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln345_reg_1191 : STD_LOGIC_VECTOR (3 downto 0);
    signal secondKernel_f_V_0_load_reg_1196 : STD_LOGIC_VECTOR (19 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal grp_fu_678_p2 : STD_LOGIC_VECTOR (54 downto 0);
    signal r_V_16_reg_1211 : STD_LOGIC_VECTOR (54 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal trunc_ln727_2_fu_684_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal trunc_ln727_2_reg_1216 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln415_2_fu_748_p2 : STD_LOGIC_VECTOR (35 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal add_ln354_fu_788_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln354_reg_1239 : STD_LOGIC_VECTOR (3 downto 0);
    signal sext_ln1168_4_fu_794_p1 : STD_LOGIC_VECTOR (54 downto 0);
    signal sext_ln1171_5_fu_798_p1 : STD_LOGIC_VECTOR (54 downto 0);
    signal r_V_19_reg_1254 : STD_LOGIC_VECTOR (54 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal trunc_ln727_3_fu_808_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal trunc_ln727_3_reg_1259 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln415_4_fu_872_p2 : STD_LOGIC_VECTOR (35 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal add_ln350_fu_923_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln350_reg_1292 : STD_LOGIC_VECTOR (3 downto 0);
    signal r_V_11_reg_1297 : STD_LOGIC_VECTOR (35 downto 0);
    signal secondKernel_f_V_3_load_reg_1302 : STD_LOGIC_VECTOR (20 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal grp_fu_937_p2 : STD_LOGIC_VECTOR (54 downto 0);
    signal r_V_17_reg_1327 : STD_LOGIC_VECTOR (54 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal trunc_ln1168_fu_955_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal trunc_ln1168_reg_1332 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_949_p2 : STD_LOGIC_VECTOR (54 downto 0);
    signal r_V_18_reg_1337 : STD_LOGIC_VECTOR (54 downto 0);
    signal trunc_ln1168_1_fu_959_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal trunc_ln1168_1_reg_1342 : STD_LOGIC_VECTOR (17 downto 0);
    signal ret_V_4_fu_963_p2 : STD_LOGIC_VECTOR (54 downto 0);
    signal ret_V_4_reg_1347 : STD_LOGIC_VECTOR (54 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal r_3_fu_972_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_3_reg_1353 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln415_3_fu_1030_p2 : STD_LOGIC_VECTOR (35 downto 0);
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal tmp_reg_1363 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal i_reg_231 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal h_reg_243 : STD_LOGIC_VECTOR (3 downto 0);
    signal exitcond238_fu_440_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal lhs_reg_254 : STD_LOGIC_VECTOR (35 downto 0);
    signal h_1_reg_265 : STD_LOGIC_VECTOR (3 downto 0);
    signal lhs_5_reg_276 : STD_LOGIC_VECTOR (35 downto 0);
    signal ap_phi_mux_V1_i_i_i_i_i67280_promoted_phi_fu_291_p4 : STD_LOGIC_VECTOR (35 downto 0);
    signal V1_i_i_i_i_i67280_promoted_reg_288 : STD_LOGIC_VECTOR (35 downto 0);
    signal icmp_ln345_fu_659_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal h_3_reg_300 : STD_LOGIC_VECTOR (3 downto 0);
    signal lhs_10_reg_311 : STD_LOGIC_VECTOR (35 downto 0);
    signal h_2_reg_323 : STD_LOGIC_VECTOR (3 downto 0);
    signal lhs_8_reg_334 : STD_LOGIC_VECTOR (35 downto 0);
    signal empty_63_reg_346 : STD_LOGIC_VECTOR (35 downto 0);
    signal icmp_ln350_fu_917_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln354_fu_782_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln332_fu_377_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln339_fu_435_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1171_9_fu_469_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1169_fu_479_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1171_12_fu_644_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1169_1_fu_654_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1171_18_fu_767_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1169_4_fu_777_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1171_15_fu_891_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1169_2_fu_902_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1169_3_fu_912_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal d_fu_92 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln1171_fu_386_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_9_fu_422_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln339_fu_430_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln1171_8_fu_460_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln1171_fu_464_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln1171_7_fu_456_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln1169_1_fu_474_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal empty_59_fu_496_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln1169_fu_534_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal lhs_4_fu_565_p3 : STD_LOGIC_VECTOR (54 downto 0);
    signal ret_V_fu_573_p2 : STD_LOGIC_VECTOR (54 downto 0);
    signal p_Result_s_fu_588_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_fu_604_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln412_fu_609_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_19_fu_596_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln412_fu_615_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_6_fu_578_p4 : STD_LOGIC_VECTOR (35 downto 0);
    signal zext_ln415_fu_621_p1 : STD_LOGIC_VECTOR (35 downto 0);
    signal zext_ln1171_11_fu_635_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln1171_3_fu_639_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln1171_10_fu_631_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln1169_2_fu_649_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal lhs_6_fu_688_p3 : STD_LOGIC_VECTOR (54 downto 0);
    signal ret_V_3_fu_696_p2 : STD_LOGIC_VECTOR (54 downto 0);
    signal p_Result_14_fu_711_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_2_fu_727_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln412_2_fu_732_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_20_fu_719_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln412_2_fu_738_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_8_fu_701_p4 : STD_LOGIC_VECTOR (35 downto 0);
    signal zext_ln415_2_fu_744_p1 : STD_LOGIC_VECTOR (35 downto 0);
    signal zext_ln1171_17_fu_758_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln1171_5_fu_762_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln1171_16_fu_754_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln1169_5_fu_772_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal lhs_11_fu_812_p3 : STD_LOGIC_VECTOR (54 downto 0);
    signal ret_V_6_fu_820_p2 : STD_LOGIC_VECTOR (54 downto 0);
    signal p_Result_18_fu_835_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_4_fu_851_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln412_4_fu_856_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_22_fu_843_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln412_4_fu_862_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_12_fu_825_p4 : STD_LOGIC_VECTOR (35 downto 0);
    signal zext_ln415_4_fu_868_p1 : STD_LOGIC_VECTOR (35 downto 0);
    signal zext_ln1171_14_fu_882_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln1171_4_fu_886_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln1171_13_fu_878_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln1169_3_fu_897_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln1169_4_fu_907_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln727_fu_967_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal lhs_9_fu_977_p3 : STD_LOGIC_VECTOR (54 downto 0);
    signal ret_V_5_fu_985_p2 : STD_LOGIC_VECTOR (54 downto 0);
    signal p_Result_16_fu_1000_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln412_3_fu_1015_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_21_fu_1008_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln412_3_fu_1020_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_10_fu_990_p4 : STD_LOGIC_VECTOR (35 downto 0);
    signal zext_ln415_3_fu_1026_p1 : STD_LOGIC_VECTOR (35 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (26 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal ap_ST_fsm_state14_blk : STD_LOGIC;
    signal ap_ST_fsm_state15_blk : STD_LOGIC;
    signal ap_ST_fsm_state16_blk : STD_LOGIC;
    signal ap_ST_fsm_state17_blk : STD_LOGIC;
    signal ap_ST_fsm_state18_blk : STD_LOGIC;
    signal ap_ST_fsm_state19_blk : STD_LOGIC;
    signal ap_ST_fsm_state20_blk : STD_LOGIC;
    signal ap_ST_fsm_state21_blk : STD_LOGIC;
    signal ap_ST_fsm_state22_blk : STD_LOGIC;
    signal ap_ST_fsm_state23_blk : STD_LOGIC;
    signal ap_ST_fsm_state24_blk : STD_LOGIC;
    signal ap_ST_fsm_state25_blk : STD_LOGIC;
    signal ap_ST_fsm_state26_blk : STD_LOGIC;
    signal ap_ST_fsm_state27_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component master_fix_mul_20s_36s_55_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (19 downto 0);
        din1 : IN STD_LOGIC_VECTOR (35 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (54 downto 0) );
    end component;


    component master_fix_mul_21s_36s_55_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (20 downto 0);
        din1 : IN STD_LOGIC_VECTOR (35 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (54 downto 0) );
    end component;


    component master_fix_convolution2_fix_secondBias_f_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (20 downto 0) );
    end component;


    component master_fix_convolution2_fix_secondKernel_f_V_1 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (19 downto 0) );
    end component;


    component master_fix_convolution2_fix_secondKernel_f_V_0 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (19 downto 0) );
    end component;


    component master_fix_convolution2_fix_secondKernel_f_V_2 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (20 downto 0) );
    end component;


    component master_fix_convolution2_fix_secondKernel_f_V_3 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (20 downto 0) );
    end component;



begin
    secondBias_f_V_U : component master_fix_convolution2_fix_secondBias_f_V
    generic map (
        DataWidth => 21,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => secondBias_f_V_address0,
        ce0 => secondBias_f_V_ce0,
        q0 => secondBias_f_V_q0);

    secondKernel_f_V_1_U : component master_fix_convolution2_fix_secondKernel_f_V_1
    generic map (
        DataWidth => 20,
        AddressRange => 128,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => secondKernel_f_V_1_address0,
        ce0 => secondKernel_f_V_1_ce0,
        q0 => secondKernel_f_V_1_q0);

    secondKernel_f_V_0_U : component master_fix_convolution2_fix_secondKernel_f_V_0
    generic map (
        DataWidth => 20,
        AddressRange => 128,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => secondKernel_f_V_0_address0,
        ce0 => secondKernel_f_V_0_ce0,
        q0 => secondKernel_f_V_0_q0);

    secondKernel_f_V_2_U : component master_fix_convolution2_fix_secondKernel_f_V_2
    generic map (
        DataWidth => 21,
        AddressRange => 128,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => secondKernel_f_V_2_address0,
        ce0 => secondKernel_f_V_2_ce0,
        q0 => secondKernel_f_V_2_q0);

    secondKernel_f_V_3_U : component master_fix_convolution2_fix_secondKernel_f_V_3
    generic map (
        DataWidth => 21,
        AddressRange => 128,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => secondKernel_f_V_3_address0,
        ce0 => secondKernel_f_V_3_ce0,
        q0 => secondKernel_f_V_3_q0);

    mul_20s_36s_55_2_1_U91 : component master_fix_mul_20s_36s_55_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 20,
        din1_WIDTH => 36,
        dout_WIDTH => 55)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => secondKernel_f_V_1_load_reg_1148,
        din1 => reg_360,
        ce => ap_const_logic_1,
        dout => grp_fu_555_p2);

    mul_20s_36s_55_2_1_U92 : component master_fix_mul_20s_36s_55_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 20,
        din1_WIDTH => 36,
        dout_WIDTH => 55)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => secondKernel_f_V_0_load_reg_1196,
        din1 => reg_360,
        ce => ap_const_logic_1,
        dout => grp_fu_678_p2);

    mul_21s_36s_55_2_1_U94 : component master_fix_mul_21s_36s_55_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 21,
        din1_WIDTH => 36,
        dout_WIDTH => 55)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_365,
        din1 => reg_360,
        ce => ap_const_logic_1,
        dout => grp_fu_937_p2);

    mul_21s_36s_55_2_1_U95 : component master_fix_mul_21s_36s_55_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 21,
        din1_WIDTH => 36,
        dout_WIDTH => 55)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => secondKernel_f_V_3_load_reg_1302,
        din1 => r_V_11_reg_1297,
        ce => ap_const_logic_1,
        dout => grp_fu_949_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    V1_i_i_i_i_i67280_promoted_reg_288_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (cmp27_fu_523_p2 = ap_const_lv1_1) and (icmp_ln340_fu_484_p2 = ap_const_lv1_1))) then 
                V1_i_i_i_i_i67280_promoted_reg_288 <= lhs_reg_254;
            elsif (((icmp_ln345_fu_659_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state10) and (cmp27_reg_1135 = ap_const_lv1_0))) then 
                V1_i_i_i_i_i67280_promoted_reg_288 <= lhs_5_reg_276;
            end if; 
        end if;
    end process;

    d_fu_92_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                d_fu_92 <= ap_const_lv5_0;
            elsif (((exitcond238_fu_440_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                d_fu_92 <= add_ln332_reg_1067;
            end if; 
        end if;
    end process;

    empty_63_reg_346_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state10) and (((cmp87_reg_1139 = ap_const_lv1_0) and (cmp27_reg_1135 = ap_const_lv1_1) and (cmp50_reg_1125 = ap_const_lv1_0)) or ((icmp_ln345_fu_659_p2 = ap_const_lv1_1) and (cmp87_reg_1139 = ap_const_lv1_0) and (cmp50_reg_1125 = ap_const_lv1_0))))) then 
                empty_63_reg_346 <= ap_phi_mux_V1_i_i_i_i_i67280_promoted_phi_fu_291_p4;
            elsif (((icmp_ln354_fu_782_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state15))) then 
                empty_63_reg_346 <= lhs_10_reg_311;
            elsif (((icmp_ln350_fu_917_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state20))) then 
                empty_63_reg_346 <= lhs_8_reg_334;
            end if; 
        end if;
    end process;

    h_1_reg_265_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (cmp27_fu_523_p2 = ap_const_lv1_0) and (icmp_ln340_fu_484_p2 = ap_const_lv1_1))) then 
                h_1_reg_265 <= ap_const_lv4_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                h_1_reg_265 <= add_ln345_reg_1191;
            end if; 
        end if;
    end process;

    h_2_reg_323_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state10) and (((cmp27_reg_1135 = ap_const_lv1_1) and (cmp50_reg_1125 = ap_const_lv1_1)) or ((icmp_ln345_fu_659_p2 = ap_const_lv1_1) and (cmp50_reg_1125 = ap_const_lv1_1))))) then 
                h_2_reg_323 <= ap_const_lv4_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
                h_2_reg_323 <= add_ln350_reg_1292;
            end if; 
        end if;
    end process;

    h_3_reg_300_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state10) and (((cmp87_reg_1139 = ap_const_lv1_1) and (cmp27_reg_1135 = ap_const_lv1_1) and (cmp50_reg_1125 = ap_const_lv1_0)) or ((icmp_ln345_fu_659_p2 = ap_const_lv1_1) and (cmp87_reg_1139 = ap_const_lv1_1) and (cmp50_reg_1125 = ap_const_lv1_0))))) then 
                h_3_reg_300 <= ap_const_lv4_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
                h_3_reg_300 <= add_ln354_reg_1239;
            end if; 
        end if;
    end process;

    h_reg_243_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                h_reg_243 <= add_ln340_reg_1115;
            elsif (((exitcond238_fu_440_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                h_reg_243 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    i_reg_231_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                i_reg_231 <= ap_const_lv6_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
                i_reg_231 <= indvars_iv_next20_reg_1095;
            end if; 
        end if;
    end process;

    lhs_10_reg_311_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state10) and (((cmp87_reg_1139 = ap_const_lv1_1) and (cmp27_reg_1135 = ap_const_lv1_1) and (cmp50_reg_1125 = ap_const_lv1_0)) or ((icmp_ln345_fu_659_p2 = ap_const_lv1_1) and (cmp87_reg_1139 = ap_const_lv1_1) and (cmp50_reg_1125 = ap_const_lv1_0))))) then 
                lhs_10_reg_311 <= ap_phi_mux_V1_i_i_i_i_i67280_promoted_phi_fu_291_p4;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
                lhs_10_reg_311 <= add_ln415_4_fu_872_p2;
            end if; 
        end if;
    end process;

    lhs_5_reg_276_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (cmp27_fu_523_p2 = ap_const_lv1_0) and (icmp_ln340_fu_484_p2 = ap_const_lv1_1))) then 
                lhs_5_reg_276 <= lhs_reg_254;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                lhs_5_reg_276 <= add_ln415_2_fu_748_p2;
            end if; 
        end if;
    end process;

    lhs_8_reg_334_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state10) and (((cmp27_reg_1135 = ap_const_lv1_1) and (cmp50_reg_1125 = ap_const_lv1_1)) or ((icmp_ln345_fu_659_p2 = ap_const_lv1_1) and (cmp50_reg_1125 = ap_const_lv1_1))))) then 
                lhs_8_reg_334 <= ap_phi_mux_V1_i_i_i_i_i67280_promoted_phi_fu_291_p4;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
                lhs_8_reg_334 <= add_ln415_3_fu_1030_p2;
            end if; 
        end if;
    end process;

    lhs_reg_254_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                lhs_reg_254 <= add_ln415_fu_625_p2;
            elsif (((exitcond238_fu_440_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                lhs_reg_254 <= sext_ln334_reg_1077;
            end if; 
        end if;
    end process;

    reg_360_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
                reg_360 <= m_0_0_0_0_q1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                reg_360 <= m_0_0_0_0_q0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                add_ln332_reg_1067 <= add_ln332_fu_404_p2;
                    tmp_cast_reg_1056(6 downto 3) <= tmp_cast_fu_390_p3(6 downto 3);
                    zext_ln1171_reg_1051(4 downto 0) <= zext_ln1171_fu_382_p1(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                add_ln340_reg_1115 <= add_ln340_fu_490_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state10) and (cmp27_reg_1135 = ap_const_lv1_0))) then
                add_ln345_reg_1191 <= add_ln345_fu_665_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then
                add_ln350_reg_1292 <= add_ln350_fu_923_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                add_ln354_reg_1239 <= add_ln354_fu_788_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln340_fu_484_p2 = ap_const_lv1_1))) then
                cmp27_reg_1135 <= cmp27_fu_523_p2;
                cmp50_reg_1125 <= cmp50_fu_510_p2;
                cmp87_reg_1139 <= cmp87_fu_529_p2;
                    tmp_10_reg_1120(8 downto 3) <= tmp_10_fu_502_p3(8 downto 3);
                    tmp_11_reg_1129(8 downto 3) <= tmp_11_fu_516_p3(8 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                indvars_iv_next20_reg_1095 <= indvars_iv_next20_fu_446_p2;
                out_0_addr_reg_1087 <= zext_ln339_fu_435_p1(10 - 1 downto 0);
                    tmp_s_reg_1082(8 downto 3) <= tmp_s_fu_414_p3(8 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state24)) then
                r_3_reg_1353 <= r_3_fu_972_p2;
                ret_V_4_reg_1347 <= ret_V_4_fu_963_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state21)) then
                r_V_11_reg_1297 <= m_0_0_0_0_q0;
                secondKernel_f_V_3_load_reg_1302 <= secondKernel_f_V_3_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                r_V_15_reg_1163 <= grp_fu_555_p2;
                trunc_ln727_reg_1168 <= trunc_ln727_fu_561_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                r_V_16_reg_1211 <= grp_fu_678_p2;
                trunc_ln727_2_reg_1216 <= trunc_ln727_2_fu_684_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state23)) then
                r_V_17_reg_1327 <= grp_fu_937_p2;
                r_V_18_reg_1337 <= grp_fu_949_p2;
                trunc_ln1168_1_reg_1342 <= trunc_ln1168_1_fu_959_p1;
                trunc_ln1168_reg_1332 <= trunc_ln1168_fu_955_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then
                r_V_19_reg_1254 <= grp_fu_1176_p_dout0;
                trunc_ln727_3_reg_1259 <= trunc_ln727_3_fu_808_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state16))) then
                reg_365 <= secondKernel_f_V_2_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                secondKernel_f_V_0_load_reg_1196 <= secondKernel_f_V_0_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                secondKernel_f_V_1_load_reg_1148 <= secondKernel_f_V_1_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                sext_ln334_reg_1077 <= sext_ln334_fu_410_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (cmp27_fu_523_p2 = ap_const_lv1_0) and (icmp_ln340_fu_484_p2 = ap_const_lv1_1))) then
                    tmp_12_reg_1143(8 downto 3) <= tmp_12_fu_540_p3(8 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state26)) then
                tmp_reg_1363 <= empty_63_reg_346(35 downto 35);
            end if;
        end if;
    end process;
    zext_ln1171_reg_1051(9 downto 5) <= "00000";
    tmp_cast_reg_1056(2 downto 0) <= "000";
    tmp_s_reg_1082(2 downto 0) <= "000";
    tmp_10_reg_1120(2 downto 0) <= "000";
    tmp_11_reg_1129(2 downto 0) <= "000";
    tmp_12_reg_1143(2 downto 0) <= "000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln332_fu_398_p2, ap_CS_fsm_state4, ap_CS_fsm_state5, icmp_ln340_fu_484_p2, cmp50_reg_1125, cmp27_reg_1135, cmp87_reg_1139, ap_CS_fsm_state10, ap_CS_fsm_state15, ap_CS_fsm_state20, exitcond238_fu_440_p2, icmp_ln345_fu_659_p2, icmp_ln350_fu_917_p2, icmp_ln354_fu_782_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln332_fu_398_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((exitcond238_fu_440_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln340_fu_484_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state10 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state10) and (((cmp27_reg_1135 = ap_const_lv1_1) and (cmp50_reg_1125 = ap_const_lv1_1)) or ((icmp_ln345_fu_659_p2 = ap_const_lv1_1) and (cmp50_reg_1125 = ap_const_lv1_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_state20;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state10) and (((cmp87_reg_1139 = ap_const_lv1_1) and (cmp27_reg_1135 = ap_const_lv1_1) and (cmp50_reg_1125 = ap_const_lv1_0)) or ((icmp_ln345_fu_659_p2 = ap_const_lv1_1) and (cmp87_reg_1139 = ap_const_lv1_1) and (cmp50_reg_1125 = ap_const_lv1_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state10) and (((cmp87_reg_1139 = ap_const_lv1_0) and (cmp27_reg_1135 = ap_const_lv1_1) and (cmp50_reg_1125 = ap_const_lv1_0)) or ((icmp_ln345_fu_659_p2 = ap_const_lv1_1) and (cmp87_reg_1139 = ap_const_lv1_0) and (cmp50_reg_1125 = ap_const_lv1_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_state26;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state15 => 
                if (((icmp_ln354_fu_782_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state15))) then
                    ap_NS_fsm <= ap_ST_fsm_state26;
                else
                    ap_NS_fsm <= ap_ST_fsm_state16;
                end if;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state20 => 
                if (((icmp_ln350_fu_917_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state20))) then
                    ap_NS_fsm <= ap_ST_fsm_state26;
                else
                    ap_NS_fsm <= ap_ST_fsm_state21;
                end if;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln1169_1_fu_474_p2 <= std_logic_vector(unsigned(tmp_s_reg_1082) + unsigned(zext_ln1171_7_fu_456_p1));
    add_ln1169_2_fu_649_p2 <= std_logic_vector(unsigned(tmp_12_reg_1143) + unsigned(zext_ln1171_10_fu_631_p1));
    add_ln1169_3_fu_897_p2 <= std_logic_vector(unsigned(tmp_11_reg_1129) + unsigned(zext_ln1171_13_fu_878_p1));
    add_ln1169_4_fu_907_p2 <= std_logic_vector(unsigned(tmp_10_reg_1120) + unsigned(zext_ln1171_13_fu_878_p1));
    add_ln1169_5_fu_772_p2 <= std_logic_vector(unsigned(tmp_11_reg_1129) + unsigned(zext_ln1171_16_fu_754_p1));
    add_ln1169_fu_534_p2 <= std_logic_vector(unsigned(i_reg_231) + unsigned(ap_const_lv6_3F));
    add_ln1171_3_fu_639_p2 <= std_logic_vector(unsigned(tmp_cast_reg_1056) + unsigned(zext_ln1171_11_fu_635_p1));
    add_ln1171_4_fu_886_p2 <= std_logic_vector(unsigned(tmp_cast_reg_1056) + unsigned(zext_ln1171_14_fu_882_p1));
    add_ln1171_5_fu_762_p2 <= std_logic_vector(unsigned(tmp_cast_reg_1056) + unsigned(zext_ln1171_17_fu_758_p1));
    add_ln1171_fu_464_p2 <= std_logic_vector(unsigned(tmp_cast_reg_1056) + unsigned(zext_ln1171_8_fu_460_p1));
    add_ln332_fu_404_p2 <= std_logic_vector(unsigned(d_fu_92) + unsigned(ap_const_lv5_1));
    add_ln339_fu_430_p2 <= std_logic_vector(unsigned(tmp_9_fu_422_p3) + unsigned(zext_ln1171_reg_1051));
    add_ln340_fu_490_p2 <= std_logic_vector(unsigned(h_reg_243) + unsigned(ap_const_lv4_1));
    add_ln345_fu_665_p2 <= std_logic_vector(unsigned(h_1_reg_265) + unsigned(ap_const_lv4_1));
    add_ln350_fu_923_p2 <= std_logic_vector(unsigned(h_2_reg_323) + unsigned(ap_const_lv4_1));
    add_ln354_fu_788_p2 <= std_logic_vector(unsigned(h_3_reg_300) + unsigned(ap_const_lv4_1));
    add_ln415_2_fu_748_p2 <= std_logic_vector(unsigned(p_Val2_8_fu_701_p4) + unsigned(zext_ln415_2_fu_744_p1));
    add_ln415_3_fu_1030_p2 <= std_logic_vector(unsigned(p_Val2_10_fu_990_p4) + unsigned(zext_ln415_3_fu_1026_p1));
    add_ln415_4_fu_872_p2 <= std_logic_vector(unsigned(p_Val2_12_fu_825_p4) + unsigned(zext_ln415_4_fu_868_p1));
    add_ln415_fu_625_p2 <= std_logic_vector(unsigned(p_Val2_6_fu_578_p4) + unsigned(zext_ln415_fu_621_p1));
    and_ln412_2_fu_738_p2 <= (p_Result_20_fu_719_p3 and or_ln412_2_fu_732_p2);
    and_ln412_3_fu_1020_p2 <= (p_Result_21_fu_1008_p3 and or_ln412_3_fu_1015_p2);
    and_ln412_4_fu_862_p2 <= (p_Result_22_fu_843_p3 and or_ln412_4_fu_856_p2);
    and_ln412_fu_615_p2 <= (p_Result_19_fu_596_p3 and or_ln412_fu_609_p2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
    ap_ST_fsm_state10_blk <= ap_const_logic_0;
    ap_ST_fsm_state11_blk <= ap_const_logic_0;
    ap_ST_fsm_state12_blk <= ap_const_logic_0;
    ap_ST_fsm_state13_blk <= ap_const_logic_0;
    ap_ST_fsm_state14_blk <= ap_const_logic_0;
    ap_ST_fsm_state15_blk <= ap_const_logic_0;
    ap_ST_fsm_state16_blk <= ap_const_logic_0;
    ap_ST_fsm_state17_blk <= ap_const_logic_0;
    ap_ST_fsm_state18_blk <= ap_const_logic_0;
    ap_ST_fsm_state19_blk <= ap_const_logic_0;

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state20_blk <= ap_const_logic_0;
    ap_ST_fsm_state21_blk <= ap_const_logic_0;
    ap_ST_fsm_state22_blk <= ap_const_logic_0;
    ap_ST_fsm_state23_blk <= ap_const_logic_0;
    ap_ST_fsm_state24_blk <= ap_const_logic_0;
    ap_ST_fsm_state25_blk <= ap_const_logic_0;
    ap_ST_fsm_state26_blk <= ap_const_logic_0;
    ap_ST_fsm_state27_blk <= ap_const_logic_0;
    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;
    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln332_fu_398_p2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln332_fu_398_p2 = ap_const_lv1_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_V1_i_i_i_i_i67280_promoted_phi_fu_291_p4_assign_proc : process(cmp27_reg_1135, ap_CS_fsm_state10, lhs_5_reg_276, V1_i_i_i_i_i67280_promoted_reg_288, icmp_ln345_fu_659_p2)
    begin
        if (((icmp_ln345_fu_659_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state10) and (cmp27_reg_1135 = ap_const_lv1_0))) then 
            ap_phi_mux_V1_i_i_i_i_i67280_promoted_phi_fu_291_p4 <= lhs_5_reg_276;
        else 
            ap_phi_mux_V1_i_i_i_i_i67280_promoted_phi_fu_291_p4 <= V1_i_i_i_i_i67280_promoted_reg_288;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln332_fu_398_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln332_fu_398_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    cmp27_fu_523_p2 <= "1" when (i_reg_231 = ap_const_lv6_0) else "0";
    cmp50_fu_510_p2 <= "1" when (unsigned(empty_59_fu_496_p2) < unsigned(ap_const_lv6_2A)) else "0";
    cmp87_fu_529_p2 <= "1" when (unsigned(indvars_iv_next20_reg_1095) < unsigned(ap_const_lv6_2A)) else "0";
    empty_59_fu_496_p2 <= std_logic_vector(unsigned(i_reg_231) + unsigned(ap_const_lv6_2));
    exitcond238_fu_440_p2 <= "1" when (i_reg_231 = ap_const_lv6_2A) else "0";
    grp_fu_1176_p_ce <= ap_const_logic_1;
    grp_fu_1176_p_din0 <= sext_ln1171_5_fu_798_p1(21 - 1 downto 0);
    grp_fu_1176_p_din1 <= sext_ln1168_4_fu_794_p1(36 - 1 downto 0);
    icmp_ln332_fu_398_p2 <= "1" when (d_fu_92 = ap_const_lv5_10) else "0";
    icmp_ln340_fu_484_p2 <= "1" when (h_reg_243 = ap_const_lv4_8) else "0";
    icmp_ln345_fu_659_p2 <= "1" when (h_1_reg_265 = ap_const_lv4_8) else "0";
    icmp_ln350_fu_917_p2 <= "1" when (h_2_reg_323 = ap_const_lv4_8) else "0";
    icmp_ln354_fu_782_p2 <= "1" when (h_3_reg_300 = ap_const_lv4_8) else "0";
    indvars_iv_next20_fu_446_p2 <= std_logic_vector(unsigned(i_reg_231) + unsigned(ap_const_lv6_1));
    lhs_11_fu_812_p3 <= (lhs_10_reg_311 & ap_const_lv19_0);
    lhs_4_fu_565_p3 <= (lhs_reg_254 & ap_const_lv19_0);
    lhs_6_fu_688_p3 <= (lhs_5_reg_276 & ap_const_lv19_0);
    lhs_9_fu_977_p3 <= (lhs_8_reg_334 & ap_const_lv19_0);

    m_0_0_0_0_address0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state10, ap_CS_fsm_state15, ap_CS_fsm_state20, zext_ln1169_fu_479_p1, zext_ln1169_1_fu_654_p1, zext_ln1169_4_fu_777_p1, zext_ln1169_3_fu_912_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            m_0_0_0_0_address0 <= zext_ln1169_3_fu_912_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            m_0_0_0_0_address0 <= zext_ln1169_4_fu_777_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            m_0_0_0_0_address0 <= zext_ln1169_1_fu_654_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            m_0_0_0_0_address0 <= zext_ln1169_fu_479_p1(9 - 1 downto 0);
        else 
            m_0_0_0_0_address0 <= "XXXXXXXXX";
        end if; 
    end process;

    m_0_0_0_0_address1 <= zext_ln1169_2_fu_902_p1(9 - 1 downto 0);

    m_0_0_0_0_ce0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state10, ap_CS_fsm_state15, ap_CS_fsm_state20)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            m_0_0_0_0_ce0 <= ap_const_logic_1;
        else 
            m_0_0_0_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    m_0_0_0_0_ce1_assign_proc : process(ap_CS_fsm_state20)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            m_0_0_0_0_ce1 <= ap_const_logic_1;
        else 
            m_0_0_0_0_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    or_ln412_2_fu_732_p2 <= (r_2_fu_727_p2 or p_Result_14_fu_711_p3);
    or_ln412_3_fu_1015_p2 <= (r_3_reg_1353 or p_Result_16_fu_1000_p3);
    or_ln412_4_fu_856_p2 <= (r_4_fu_851_p2 or p_Result_18_fu_835_p3);
    or_ln412_fu_609_p2 <= (r_fu_604_p2 or p_Result_s_fu_588_p3);
    out_0_address0 <= out_0_addr_reg_1087;

    out_0_ce0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state10, ap_CS_fsm_state15, ap_CS_fsm_state20, ap_CS_fsm_state27)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            out_0_ce0 <= ap_const_logic_1;
        else 
            out_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    out_0_d0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state10, ap_CS_fsm_state15, ap_CS_fsm_state20, ap_CS_fsm_state27, lhs_reg_254, lhs_5_reg_276, lhs_10_reg_311, lhs_8_reg_334)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            out_0_d0 <= ap_const_lv36_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            out_0_d0 <= lhs_8_reg_334;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            out_0_d0 <= lhs_10_reg_311;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            out_0_d0 <= lhs_5_reg_276;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            out_0_d0 <= lhs_reg_254;
        else 
            out_0_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    out_0_we0_assign_proc : process(ap_CS_fsm_state5, icmp_ln340_fu_484_p2, cmp27_reg_1135, ap_CS_fsm_state10, ap_CS_fsm_state15, ap_CS_fsm_state20, tmp_reg_1363, ap_CS_fsm_state27, icmp_ln345_fu_659_p2, icmp_ln350_fu_917_p2, icmp_ln354_fu_782_p2)
    begin
        if ((((tmp_reg_1363 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state27)) or ((icmp_ln354_fu_782_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state15)) or ((icmp_ln350_fu_917_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state20)) or ((icmp_ln345_fu_659_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state10) and (cmp27_reg_1135 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln340_fu_484_p2 = ap_const_lv1_1)))) then 
            out_0_we0 <= ap_const_logic_1;
        else 
            out_0_we0 <= ap_const_logic_0;
        end if; 
    end process;

    p_Result_14_fu_711_p3 <= ret_V_3_fu_696_p2(19 downto 19);
    p_Result_16_fu_1000_p3 <= ret_V_5_fu_985_p2(19 downto 19);
    p_Result_18_fu_835_p3 <= ret_V_6_fu_820_p2(19 downto 19);
    p_Result_19_fu_596_p3 <= ret_V_fu_573_p2(18 downto 18);
    p_Result_20_fu_719_p3 <= ret_V_3_fu_696_p2(18 downto 18);
    p_Result_21_fu_1008_p3 <= ret_V_4_reg_1347(18 downto 18);
    p_Result_22_fu_843_p3 <= ret_V_6_fu_820_p2(18 downto 18);
    p_Result_s_fu_588_p3 <= ret_V_fu_573_p2(19 downto 19);
    p_Val2_10_fu_990_p4 <= ret_V_5_fu_985_p2(54 downto 19);
    p_Val2_12_fu_825_p4 <= ret_V_6_fu_820_p2(54 downto 19);
    p_Val2_6_fu_578_p4 <= ret_V_fu_573_p2(54 downto 19);
    p_Val2_8_fu_701_p4 <= ret_V_3_fu_696_p2(54 downto 19);
    r_2_fu_727_p2 <= "0" when (trunc_ln727_2_reg_1216 = ap_const_lv18_0) else "1";
    r_3_fu_972_p2 <= "0" when (trunc_ln1168_1_reg_1342 = sub_ln727_fu_967_p2) else "1";
    r_4_fu_851_p2 <= "0" when (trunc_ln727_3_reg_1259 = ap_const_lv18_0) else "1";
    r_fu_604_p2 <= "0" when (trunc_ln727_reg_1168 = ap_const_lv18_0) else "1";
    ret_V_3_fu_696_p2 <= std_logic_vector(unsigned(lhs_6_fu_688_p3) + unsigned(r_V_16_reg_1211));
    ret_V_4_fu_963_p2 <= std_logic_vector(unsigned(r_V_18_reg_1337) + unsigned(r_V_17_reg_1327));
    ret_V_5_fu_985_p2 <= std_logic_vector(unsigned(lhs_9_fu_977_p3) + unsigned(ret_V_4_reg_1347));
    ret_V_6_fu_820_p2 <= std_logic_vector(unsigned(lhs_11_fu_812_p3) + unsigned(r_V_19_reg_1254));
    ret_V_fu_573_p2 <= std_logic_vector(unsigned(lhs_4_fu_565_p3) + unsigned(r_V_15_reg_1163));
    secondBias_f_V_address0 <= zext_ln332_fu_377_p1(4 - 1 downto 0);

    secondBias_f_V_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            secondBias_f_V_ce0 <= ap_const_logic_1;
        else 
            secondBias_f_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    secondKernel_f_V_0_address0 <= zext_ln1171_12_fu_644_p1(7 - 1 downto 0);

    secondKernel_f_V_0_ce0_assign_proc : process(ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            secondKernel_f_V_0_ce0 <= ap_const_logic_1;
        else 
            secondKernel_f_V_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    secondKernel_f_V_1_address0 <= zext_ln1171_9_fu_469_p1(7 - 1 downto 0);

    secondKernel_f_V_1_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            secondKernel_f_V_1_ce0 <= ap_const_logic_1;
        else 
            secondKernel_f_V_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    secondKernel_f_V_2_address0_assign_proc : process(ap_CS_fsm_state15, ap_CS_fsm_state20, zext_ln1171_18_fu_767_p1, zext_ln1171_15_fu_891_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            secondKernel_f_V_2_address0 <= zext_ln1171_15_fu_891_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            secondKernel_f_V_2_address0 <= zext_ln1171_18_fu_767_p1(7 - 1 downto 0);
        else 
            secondKernel_f_V_2_address0 <= "XXXXXXX";
        end if; 
    end process;


    secondKernel_f_V_2_ce0_assign_proc : process(ap_CS_fsm_state15, ap_CS_fsm_state20)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state15))) then 
            secondKernel_f_V_2_ce0 <= ap_const_logic_1;
        else 
            secondKernel_f_V_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    secondKernel_f_V_3_address0 <= zext_ln1171_15_fu_891_p1(7 - 1 downto 0);

    secondKernel_f_V_3_ce0_assign_proc : process(ap_CS_fsm_state20)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            secondKernel_f_V_3_ce0 <= ap_const_logic_1;
        else 
            secondKernel_f_V_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

        sext_ln1168_4_fu_794_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(reg_360),55));

        sext_ln1171_5_fu_798_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(reg_365),55));

        sext_ln334_fu_410_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(secondBias_f_V_q0),36));

    sub_ln727_fu_967_p2 <= std_logic_vector(unsigned(ap_const_lv18_0) - unsigned(trunc_ln1168_reg_1332));
    tmp_10_fu_502_p3 <= (empty_59_fu_496_p2 & ap_const_lv3_0);
    tmp_11_fu_516_p3 <= (indvars_iv_next20_reg_1095 & ap_const_lv3_0);
    tmp_12_fu_540_p3 <= (add_ln1169_fu_534_p2 & ap_const_lv3_0);
    tmp_9_fu_422_p3 <= (i_reg_231 & ap_const_lv4_0);
    tmp_cast_fu_390_p3 <= (trunc_ln1171_fu_386_p1 & ap_const_lv3_0);
    tmp_s_fu_414_p3 <= (i_reg_231 & ap_const_lv3_0);
    trunc_ln1168_1_fu_959_p1 <= grp_fu_949_p2(18 - 1 downto 0);
    trunc_ln1168_fu_955_p1 <= grp_fu_937_p2(18 - 1 downto 0);
    trunc_ln1171_fu_386_p1 <= d_fu_92(4 - 1 downto 0);
    trunc_ln727_2_fu_684_p1 <= grp_fu_678_p2(18 - 1 downto 0);
    trunc_ln727_3_fu_808_p1 <= grp_fu_1176_p_dout0(18 - 1 downto 0);
    trunc_ln727_fu_561_p1 <= grp_fu_555_p2(18 - 1 downto 0);
    zext_ln1169_1_fu_654_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1169_2_fu_649_p2),64));
    zext_ln1169_2_fu_902_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1169_3_fu_897_p2),64));
    zext_ln1169_3_fu_912_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1169_4_fu_907_p2),64));
    zext_ln1169_4_fu_777_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1169_5_fu_772_p2),64));
    zext_ln1169_fu_479_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1169_1_fu_474_p2),64));
    zext_ln1171_10_fu_631_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(h_1_reg_265),9));
    zext_ln1171_11_fu_635_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(h_1_reg_265),7));
    zext_ln1171_12_fu_644_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1171_3_fu_639_p2),64));
    zext_ln1171_13_fu_878_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(h_2_reg_323),9));
    zext_ln1171_14_fu_882_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(h_2_reg_323),7));
    zext_ln1171_15_fu_891_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1171_4_fu_886_p2),64));
    zext_ln1171_16_fu_754_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(h_3_reg_300),9));
    zext_ln1171_17_fu_758_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(h_3_reg_300),7));
    zext_ln1171_18_fu_767_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1171_5_fu_762_p2),64));
    zext_ln1171_7_fu_456_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(h_reg_243),9));
    zext_ln1171_8_fu_460_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(h_reg_243),7));
    zext_ln1171_9_fu_469_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1171_fu_464_p2),64));
    zext_ln1171_fu_382_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(d_fu_92),10));
    zext_ln332_fu_377_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(d_fu_92),64));
    zext_ln339_fu_435_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln339_fu_430_p2),64));
    zext_ln415_2_fu_744_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln412_2_fu_738_p2),36));
    zext_ln415_3_fu_1026_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln412_3_fu_1020_p2),36));
    zext_ln415_4_fu_868_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln412_4_fu_862_p2),36));
    zext_ln415_fu_621_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln412_fu_615_p2),36));
end behav;
