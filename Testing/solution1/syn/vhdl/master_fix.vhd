-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
-- Version: 2021.1
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity master_fix is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_r_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    input_r_ce0 : OUT STD_LOGIC;
    input_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    input_r_address1 : OUT STD_LOGIC_VECTOR (8 downto 0);
    input_r_ce1 : OUT STD_LOGIC;
    input_r_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    out_r_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    out_r_ce0 : OUT STD_LOGIC;
    out_r_we0 : OUT STD_LOGIC;
    out_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of master_fix is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "master_fix_master_fix,hls_ip_2021_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu7ev-ffvf1517-3-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.216000,HLS_SYN_LAT=89150,HLS_SYN_TPT=none,HLS_SYN_MEM=28,HLS_SYN_DSP=0,HLS_SYN_FF=8989,HLS_SYN_LUT=11034,HLS_VERSION=2021_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (40 downto 0) := "00000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (40 downto 0) := "00000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (40 downto 0) := "00000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (40 downto 0) := "00000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (40 downto 0) := "00000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (40 downto 0) := "00000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (40 downto 0) := "00001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (40 downto 0) := "00010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (40 downto 0) := "00100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (40 downto 0) := "01000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (40 downto 0) := "10000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv8_80 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv15_AB : STD_LOGIC_VECTOR (14 downto 0) := "000000010101011";
    constant ap_const_lv8_82 : STD_LOGIC_VECTOR (7 downto 0) := "10000010";
    constant ap_const_lv8_3 : STD_LOGIC_VECTOR (7 downto 0) := "00000011";
    constant ap_const_lv7_3 : STD_LOGIC_VECTOR (6 downto 0) := "0000011";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv12_3 : STD_LOGIC_VECTOR (11 downto 0) := "000000000011";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv6_2A : STD_LOGIC_VECTOR (5 downto 0) := "101010";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv12_56 : STD_LOGIC_VECTOR (11 downto 0) := "000001010110";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv6_3 : STD_LOGIC_VECTOR (5 downto 0) := "000011";
    constant ap_const_lv4_E : STD_LOGIC_VECTOR (3 downto 0) := "1110";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv19_0 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000000";
    constant ap_const_lv32_32 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110010";
    constant ap_const_lv18_0 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000000";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv32_FFF49664 : STD_LOGIC_VECTOR (31 downto 0) := "11111111111101001001011001100100";
    constant ap_const_lv32_8B87F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000010001011100001111111";
    constant ap_const_lv32_FFF657C5 : STD_LOGIC_VECTOR (31 downto 0) := "11111111111101100101011111000101";
    constant ap_const_lv32_FFFE856D : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111101000010101101101";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal thirdBias_f_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal thirdBias_f_V_ce0 : STD_LOGIC;
    signal thirdBias_f_V_q0 : STD_LOGIC_VECTOR (20 downto 0);
    signal firstDense_f_V_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal firstDense_f_V_ce0 : STD_LOGIC;
    signal firstDense_f_V_q0 : STD_LOGIC_VECTOR (20 downto 0);
    signal secondDense_f_V_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal secondDense_f_V_ce0 : STD_LOGIC;
    signal secondDense_f_V_q0 : STD_LOGIC_VECTOR (18 downto 0);
    signal zext_ln250_fu_678_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln250_reg_1557 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal zext_ln250_1_fu_682_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln250_1_reg_1562 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln250_fu_692_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln250_reg_1570 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln252_fu_725_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln252_reg_1582 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal add_ln252_fu_735_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln252_reg_1590 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_54_fu_741_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln252_fu_729_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln256_fu_795_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln256_reg_1603 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln254_fu_765_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal max1_V_0_addr_reg_1611 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal max1_V_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal add_ln258_fu_849_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln258_reg_1629 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln260_fu_861_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal zext_ln270_fu_872_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln270_reg_1639 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal zext_ln270_1_fu_876_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln270_1_reg_1644 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln270_fu_886_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln270_reg_1652 : STD_LOGIC_VECTOR (4 downto 0);
    signal conv2_0_0_0_0_addr_reg_1664 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal add_ln272_fu_921_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln272_reg_1672 : STD_LOGIC_VECTOR (5 downto 0);
    signal next_mul_fu_927_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal next_mul_reg_1677 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln272_fu_915_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal max2_V_0_addr_reg_1685 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln1548_fu_983_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln1548_reg_1690 : STD_LOGIC_VECTOR (5 downto 0);
    signal sub_ln1171_fu_1043_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sub_ln1171_reg_1695 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal add_ln290_fu_1055_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln290_reg_1703 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln290_fu_1049_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal den1_V_0_addr_reg_1713 : STD_LOGIC_VECTOR (3 downto 0);
    signal sext_ln293_fu_1066_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal tmp_11_cast_fu_1079_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_11_cast_reg_1754 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal tmp_s_fu_1087_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_s_reg_1759 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln293_fu_1101_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln293_reg_1767 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal add_ln297_fu_1166_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln297_reg_1785 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln415_1_fu_1252_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal trunc_ln1171_1_fu_1261_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln1171_1_reg_1795 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal tmp_9_cast_fu_1265_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_9_cast_reg_1799 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln311_fu_1279_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln311_reg_1807 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_fu_1285_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln311_fu_1273_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal add_ln314_fu_1350_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln314_reg_1859 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln314_fu_1344_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln415_fu_1464_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal x_V_fu_1501_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_V_reg_1889 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal icmp_ln330_fu_1485_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sum_V_load_1_reg_1894 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_exp_32_13_s_fu_651_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal op2_V_reg_1899 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state39 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state39 : signal is "none";
    signal conv1_0_0_0_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal conv1_0_0_0_ce0 : STD_LOGIC;
    signal conv1_0_0_0_we0 : STD_LOGIC;
    signal conv1_0_0_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal max1_V_0_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal max1_V_0_ce0 : STD_LOGIC;
    signal max1_V_0_we0 : STD_LOGIC;
    signal max1_V_0_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal max1_V_0_ce1 : STD_LOGIC;
    signal max1_V_0_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv2_0_0_0_0_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal conv2_0_0_0_0_ce0 : STD_LOGIC;
    signal conv2_0_0_0_0_we0 : STD_LOGIC;
    signal conv2_0_0_0_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal max2_V_0_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal max2_V_0_ce0 : STD_LOGIC;
    signal max2_V_0_we0 : STD_LOGIC;
    signal max2_V_0_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal max2_V_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal den1_V_0_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal den1_V_0_ce0 : STD_LOGIC;
    signal den1_V_0_we0 : STD_LOGIC;
    signal den1_V_0_d0 : STD_LOGIC_VECTOR (30 downto 0);
    signal den1_V_0_q0 : STD_LOGIC_VECTOR (30 downto 0);
    signal grp_convolution1_fix_fu_568_ap_start : STD_LOGIC;
    signal grp_convolution1_fix_fu_568_ap_done : STD_LOGIC;
    signal grp_convolution1_fix_fu_568_ap_idle : STD_LOGIC;
    signal grp_convolution1_fix_fu_568_ap_ready : STD_LOGIC;
    signal grp_convolution1_fix_fu_568_input_r_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_convolution1_fix_fu_568_input_r_ce0 : STD_LOGIC;
    signal grp_convolution1_fix_fu_568_input_r_address1 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_convolution1_fix_fu_568_input_r_ce1 : STD_LOGIC;
    signal grp_convolution1_fix_fu_568_out_0_0_0_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_convolution1_fix_fu_568_out_0_0_0_ce0 : STD_LOGIC;
    signal grp_convolution1_fix_fu_568_out_0_0_0_we0 : STD_LOGIC;
    signal grp_convolution1_fix_fu_568_out_0_0_0_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_convolution2_fix_fu_602_ap_start : STD_LOGIC;
    signal grp_convolution2_fix_fu_602_ap_done : STD_LOGIC;
    signal grp_convolution2_fix_fu_602_ap_idle : STD_LOGIC;
    signal grp_convolution2_fix_fu_602_ap_ready : STD_LOGIC;
    signal grp_convolution2_fix_fu_602_m_0_0_0_0_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_convolution2_fix_fu_602_m_0_0_0_0_ce0 : STD_LOGIC;
    signal grp_convolution2_fix_fu_602_m_0_0_0_0_address1 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_convolution2_fix_fu_602_m_0_0_0_0_ce1 : STD_LOGIC;
    signal grp_convolution2_fix_fu_602_out_0_0_0_0_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_convolution2_fix_fu_602_out_0_0_0_0_ce0 : STD_LOGIC;
    signal grp_convolution2_fix_fu_602_out_0_0_0_0_we0 : STD_LOGIC;
    signal grp_convolution2_fix_fu_602_out_0_0_0_0_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_master_fix_Pipeline_VITIS_LOOP_324_1_fu_618_ap_start : STD_LOGIC;
    signal grp_master_fix_Pipeline_VITIS_LOOP_324_1_fu_618_ap_done : STD_LOGIC;
    signal grp_master_fix_Pipeline_VITIS_LOOP_324_1_fu_618_ap_idle : STD_LOGIC;
    signal grp_master_fix_Pipeline_VITIS_LOOP_324_1_fu_618_ap_ready : STD_LOGIC;
    signal grp_master_fix_Pipeline_VITIS_LOOP_324_1_fu_618_m_V_3_04_out : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_master_fix_Pipeline_VITIS_LOOP_324_1_fu_618_m_V_3_04_out_ap_vld : STD_LOGIC;
    signal grp_master_fix_Pipeline_VITIS_LOOP_324_1_fu_618_m_V_2_03_out : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_master_fix_Pipeline_VITIS_LOOP_324_1_fu_618_m_V_2_03_out_ap_vld : STD_LOGIC;
    signal grp_master_fix_Pipeline_VITIS_LOOP_324_1_fu_618_m_V_1_02_out : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_master_fix_Pipeline_VITIS_LOOP_324_1_fu_618_m_V_1_02_out_ap_vld : STD_LOGIC;
    signal grp_master_fix_Pipeline_VITIS_LOOP_324_1_fu_618_m_V_0_01_out : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_master_fix_Pipeline_VITIS_LOOP_324_1_fu_618_m_V_0_01_out_ap_vld : STD_LOGIC;
    signal grp_master_fix_Pipeline_VITIS_LOOP_335_3_fu_630_ap_start : STD_LOGIC;
    signal grp_master_fix_Pipeline_VITIS_LOOP_335_3_fu_630_ap_done : STD_LOGIC;
    signal grp_master_fix_Pipeline_VITIS_LOOP_335_3_fu_630_ap_idle : STD_LOGIC;
    signal grp_master_fix_Pipeline_VITIS_LOOP_335_3_fu_630_ap_ready : STD_LOGIC;
    signal grp_master_fix_Pipeline_VITIS_LOOP_335_3_fu_630_out_r_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_master_fix_Pipeline_VITIS_LOOP_335_3_fu_630_out_r_ce0 : STD_LOGIC;
    signal grp_master_fix_Pipeline_VITIS_LOOP_335_3_fu_630_out_r_we0 : STD_LOGIC;
    signal grp_master_fix_Pipeline_VITIS_LOOP_335_3_fu_630_out_r_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_master_fix_Pipeline_VITIS_LOOP_335_3_fu_630_grp_exp_32_13_s_fu_651_p_din1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_master_fix_Pipeline_VITIS_LOOP_335_3_fu_630_grp_exp_32_13_s_fu_651_p_start : STD_LOGIC;
    signal grp_exp_32_13_s_fu_651_ap_start : STD_LOGIC;
    signal grp_exp_32_13_s_fu_651_ap_done : STD_LOGIC;
    signal grp_exp_32_13_s_fu_651_ap_idle : STD_LOGIC;
    signal grp_exp_32_13_s_fu_651_ap_ready : STD_LOGIC;
    signal grp_exp_32_13_s_fu_651_x : STD_LOGIC_VECTOR (31 downto 0);
    signal i_reg_437 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln258_fu_843_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln250_fu_686_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_55_reg_448 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_reg_459 : STD_LOGIC_VECTOR (1 downto 0);
    signal i_1_reg_470 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal icmp_ln270_fu_880_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal phi_mul_reg_481 : STD_LOGIC_VECTOR (11 downto 0);
    signal phi_urem_reg_492 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_2_reg_503 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln297_fu_1160_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_i_i_i_lcssa_lcssa7_i_reg_514 : STD_LOGIC_VECTOR (31 downto 0);
    signal h_reg_524 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln293_fu_1095_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal lhs_2_reg_535 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_4_reg_547 : STD_LOGIC_VECTOR (4 downto 0);
    signal den2_V_0_0_reg_558 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_convolution1_fix_fu_568_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal grp_convolution2_fix_fu_602_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal grp_master_fix_Pipeline_VITIS_LOOP_324_1_fu_618_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal grp_master_fix_Pipeline_VITIS_LOOP_335_3_fu_630_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state41 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state41 : signal is "none";
    signal grp_exp_32_13_s_fu_651_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (40 downto 0);
    signal ap_NS_fsm_state36 : STD_LOGIC;
    signal ap_CS_fsm_state36 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state36 : signal is "none";
    signal zext_ln256_fu_814_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1548_4_fu_838_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1548_2_fu_910_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln276_fu_966_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln290_fu_1013_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1171_6_fu_1145_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1169_fu_1155_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1171_3_fu_1339_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln736_fu_1325_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal d_fu_248 : STD_LOGIC_VECTOR (3 downto 0);
    signal d_1_fu_288 : STD_LOGIC_VECTOR (4 downto 0);
    signal d_2_fu_292 : STD_LOGIC_VECTOR (4 downto 0);
    signal d_3_fu_296 : STD_LOGIC_VECTOR (2 downto 0);
    signal den2_V_0_3_fu_300 : STD_LOGIC_VECTOR (31 downto 0);
    signal den2_V_0_3_1_fu_304 : STD_LOGIC_VECTOR (31 downto 0);
    signal den2_V_0_3_2_fu_308 : STD_LOGIC_VECTOR (31 downto 0);
    signal den2_V_0_3_3_fu_312 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_V_fu_316 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_V_1_fu_1516_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state40 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state40 : signal is "none";
    signal i_3_fu_320 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln330_fu_1491_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln255_fu_808_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal icmp_ln275_fu_937_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal select_ln280_fu_1001_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_707_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln1548_1_fu_715_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln1548_fu_703_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln1548_fu_719_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal mul_fu_753_p0 : STD_LOGIC_VECTOR (6 downto 0);
    signal mul_fu_753_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_cast_cast_fu_745_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln254_fu_759_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_771_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal mul_fu_753_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_2_fu_777_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_6_cast_fu_787_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_771_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln255_fu_804_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln1548_3_fu_818_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln1548_1_fu_822_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal shl_ln1548_fu_827_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln1548_2_fu_833_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln1548_2_fu_855_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_fu_897_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln1548_fu_905_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln275_fu_933_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_5_fu_943_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_8_cast_fu_953_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln276_fu_961_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln1548_3_fu_971_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln1548_fu_977_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1548_1_fu_995_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln1171_fu_1019_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_3_fu_1031_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_2_cast_fu_1023_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln1171_fu_1039_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln1171_1_fu_1070_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln1171_fu_1074_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_6_fu_1111_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln293_fu_1107_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal zext_ln1171_5_fu_1136_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln1171_2_fu_1140_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln1171_4_fu_1132_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln1169_fu_1150_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal lhs_3_fu_1186_p3 : STD_LOGIC_VECTOR (50 downto 0);
    signal r_V_4_fu_1180_p2 : STD_LOGIC_VECTOR (50 downto 0);
    signal ret_V_fu_1194_p2 : STD_LOGIC_VECTOR (50 downto 0);
    signal trunc_ln727_1_fu_1226_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Result_2_fu_1210_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_1_fu_1230_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln412_1_fu_1236_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_3_fu_1218_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln412_1_fu_1242_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_3_fu_1200_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln415_1_fu_1248_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln1171_2_fu_1330_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln1171_1_fu_1334_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal r_V_5_fu_1388_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal r_V_5_fu_1388_p2 : STD_LOGIC_VECTOR (49 downto 0);
    signal lhs_1_fu_1394_p3 : STD_LOGIC_VECTOR (50 downto 0);
    signal sext_ln1245_fu_1402_p1 : STD_LOGIC_VECTOR (50 downto 0);
    signal ret_V_2_fu_1406_p2 : STD_LOGIC_VECTOR (50 downto 0);
    signal trunc_ln727_fu_1438_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Result_s_fu_1422_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_fu_1442_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln412_fu_1448_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_4_fu_1430_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln412_fu_1454_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_1_fu_1412_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln415_fu_1460_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_V_fu_1501_p5 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_771_ap_start : STD_LOGIC;
    signal grp_fu_771_ap_done : STD_LOGIC;
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal ap_ST_fsm_state14_blk : STD_LOGIC;
    signal ap_ST_fsm_state15_blk : STD_LOGIC;
    signal ap_ST_fsm_state16_blk : STD_LOGIC;
    signal ap_ST_fsm_state17_blk : STD_LOGIC;
    signal ap_ST_fsm_state18_blk : STD_LOGIC;
    signal ap_ST_fsm_state19_blk : STD_LOGIC;
    signal ap_ST_fsm_state20_blk : STD_LOGIC;
    signal ap_ST_fsm_state21_blk : STD_LOGIC;
    signal ap_ST_fsm_state22_blk : STD_LOGIC;
    signal ap_ST_fsm_state23_blk : STD_LOGIC;
    signal ap_ST_fsm_state24_blk : STD_LOGIC;
    signal ap_ST_fsm_state25_blk : STD_LOGIC;
    signal ap_ST_fsm_state26_blk : STD_LOGIC;
    signal ap_ST_fsm_state27_blk : STD_LOGIC;
    signal ap_ST_fsm_state28_blk : STD_LOGIC;
    signal ap_ST_fsm_state29_blk : STD_LOGIC;
    signal ap_ST_fsm_state30_blk : STD_LOGIC;
    signal ap_ST_fsm_state31_blk : STD_LOGIC;
    signal ap_ST_fsm_state32_blk : STD_LOGIC;
    signal ap_ST_fsm_state33_blk : STD_LOGIC;
    signal ap_ST_fsm_state34_blk : STD_LOGIC;
    signal ap_ST_fsm_state35_blk : STD_LOGIC;
    signal ap_ST_fsm_state36_blk : STD_LOGIC;
    signal ap_ST_fsm_state37_blk : STD_LOGIC;
    signal ap_ST_fsm_state38_blk : STD_LOGIC;
    signal ap_ST_fsm_state39_blk : STD_LOGIC;
    signal ap_ST_fsm_state40_blk : STD_LOGIC;
    signal ap_ST_fsm_state41_blk : STD_LOGIC;
    signal mul_fu_753_p00 : STD_LOGIC_VECTOR (14 downto 0);
    signal r_V_5_fu_1388_p10 : STD_LOGIC_VECTOR (49 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component master_fix_convolution1_fix IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        input_r_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        input_r_ce0 : OUT STD_LOGIC;
        input_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        input_r_address1 : OUT STD_LOGIC_VECTOR (8 downto 0);
        input_r_ce1 : OUT STD_LOGIC;
        input_r_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        out_0_0_0_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        out_0_0_0_ce0 : OUT STD_LOGIC;
        out_0_0_0_we0 : OUT STD_LOGIC;
        out_0_0_0_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component master_fix_convolution2_fix IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_0_0_0_0_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        m_0_0_0_0_ce0 : OUT STD_LOGIC;
        m_0_0_0_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        m_0_0_0_0_address1 : OUT STD_LOGIC_VECTOR (8 downto 0);
        m_0_0_0_0_ce1 : OUT STD_LOGIC;
        m_0_0_0_0_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        out_0_0_0_0_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        out_0_0_0_0_ce0 : OUT STD_LOGIC;
        out_0_0_0_0_we0 : OUT STD_LOGIC;
        out_0_0_0_0_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component master_fix_master_fix_Pipeline_VITIS_LOOP_324_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        den2_V_0_0_05 : IN STD_LOGIC_VECTOR (31 downto 0);
        den2_V_0_1_06 : IN STD_LOGIC_VECTOR (31 downto 0);
        den2_V_0_2_07 : IN STD_LOGIC_VECTOR (31 downto 0);
        den2_V_0_3_08 : IN STD_LOGIC_VECTOR (31 downto 0);
        m_V_3_04_out : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_V_3_04_out_ap_vld : OUT STD_LOGIC;
        m_V_2_03_out : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_V_2_03_out_ap_vld : OUT STD_LOGIC;
        m_V_1_02_out : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_V_1_02_out_ap_vld : OUT STD_LOGIC;
        m_V_0_01_out : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_V_0_01_out_ap_vld : OUT STD_LOGIC );
    end component;


    component master_fix_master_fix_Pipeline_VITIS_LOOP_335_3 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_V_0_01_reload : IN STD_LOGIC_VECTOR (31 downto 0);
        m_V_1_02_reload : IN STD_LOGIC_VECTOR (31 downto 0);
        m_V_2_03_reload : IN STD_LOGIC_VECTOR (31 downto 0);
        m_V_3_04_reload : IN STD_LOGIC_VECTOR (31 downto 0);
        conv_i_i84 : IN STD_LOGIC_VECTOR (31 downto 0);
        out_r_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
        out_r_ce0 : OUT STD_LOGIC;
        out_r_we0 : OUT STD_LOGIC;
        out_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_exp_32_13_s_fu_651_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_exp_32_13_s_fu_651_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
        grp_exp_32_13_s_fu_651_p_start : OUT STD_LOGIC;
        grp_exp_32_13_s_fu_651_p_ready : IN STD_LOGIC;
        grp_exp_32_13_s_fu_651_p_done : IN STD_LOGIC;
        grp_exp_32_13_s_fu_651_p_idle : IN STD_LOGIC );
    end component;


    component master_fix_exp_32_13_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        x : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component master_fix_mul_7ns_9ns_15_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (6 downto 0);
        din1 : IN STD_LOGIC_VECTOR (8 downto 0);
        dout : OUT STD_LOGIC_VECTOR (14 downto 0) );
    end component;


    component master_fix_urem_7ns_3ns_2_11_seq_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        start : IN STD_LOGIC;
        done : OUT STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (6 downto 0);
        din1 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (1 downto 0) );
    end component;


    component master_fix_mul_21s_32s_51_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (20 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (50 downto 0) );
    end component;


    component master_fix_mux_42_32_1_1_x IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        din4 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component master_fix_mul_19s_31ns_50_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (18 downto 0);
        din1 : IN STD_LOGIC_VECTOR (30 downto 0);
        dout : OUT STD_LOGIC_VECTOR (49 downto 0) );
    end component;


    component master_fix_mux_42_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        din4 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component master_fix_thirdBias_f_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (20 downto 0) );
    end component;


    component master_fix_firstDense_f_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (20 downto 0) );
    end component;


    component master_fix_secondDense_f_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (18 downto 0) );
    end component;


    component master_fix_conv1_0_0_0 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component master_fix_max1_V_0 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component master_fix_conv2_0_0_0_0 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component master_fix_max2_V_0 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component master_fix_den1_V_0 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (30 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (30 downto 0) );
    end component;



begin
    thirdBias_f_V_U : component master_fix_thirdBias_f_V
    generic map (
        DataWidth => 21,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => thirdBias_f_V_address0,
        ce0 => thirdBias_f_V_ce0,
        q0 => thirdBias_f_V_q0);

    firstDense_f_V_U : component master_fix_firstDense_f_V
    generic map (
        DataWidth => 21,
        AddressRange => 3584,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => firstDense_f_V_address0,
        ce0 => firstDense_f_V_ce0,
        q0 => firstDense_f_V_q0);

    secondDense_f_V_U : component master_fix_secondDense_f_V
    generic map (
        DataWidth => 19,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => secondDense_f_V_address0,
        ce0 => secondDense_f_V_ce0,
        q0 => secondDense_f_V_q0);

    conv1_0_0_0_U : component master_fix_conv1_0_0_0
    generic map (
        DataWidth => 32,
        AddressRange => 3072,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv1_0_0_0_address0,
        ce0 => conv1_0_0_0_ce0,
        we0 => conv1_0_0_0_we0,
        d0 => grp_convolution1_fix_fu_568_out_0_0_0_d0,
        q0 => conv1_0_0_0_q0);

    max1_V_0_U : component master_fix_max1_V_0
    generic map (
        DataWidth => 32,
        AddressRange => 336,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => max1_V_0_address0,
        ce0 => max1_V_0_ce0,
        we0 => max1_V_0_we0,
        d0 => max1_V_0_d0,
        q0 => max1_V_0_q0,
        address1 => grp_convolution2_fix_fu_602_m_0_0_0_0_address1,
        ce1 => max1_V_0_ce1,
        q1 => max1_V_0_q1);

    conv2_0_0_0_0_U : component master_fix_conv2_0_0_0_0
    generic map (
        DataWidth => 32,
        AddressRange => 672,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv2_0_0_0_0_address0,
        ce0 => conv2_0_0_0_0_ce0,
        we0 => conv2_0_0_0_0_we0,
        d0 => grp_convolution2_fix_fu_602_out_0_0_0_0_d0,
        q0 => conv2_0_0_0_0_q0);

    max2_V_0_U : component master_fix_max2_V_0
    generic map (
        DataWidth => 32,
        AddressRange => 224,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => max2_V_0_address0,
        ce0 => max2_V_0_ce0,
        we0 => max2_V_0_we0,
        d0 => max2_V_0_d0,
        q0 => max2_V_0_q0);

    den1_V_0_U : component master_fix_den1_V_0
    generic map (
        DataWidth => 31,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => den1_V_0_address0,
        ce0 => den1_V_0_ce0,
        we0 => den1_V_0_we0,
        d0 => den1_V_0_d0,
        q0 => den1_V_0_q0);

    grp_convolution1_fix_fu_568 : component master_fix_convolution1_fix
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_convolution1_fix_fu_568_ap_start,
        ap_done => grp_convolution1_fix_fu_568_ap_done,
        ap_idle => grp_convolution1_fix_fu_568_ap_idle,
        ap_ready => grp_convolution1_fix_fu_568_ap_ready,
        input_r_address0 => grp_convolution1_fix_fu_568_input_r_address0,
        input_r_ce0 => grp_convolution1_fix_fu_568_input_r_ce0,
        input_r_q0 => input_r_q0,
        input_r_address1 => grp_convolution1_fix_fu_568_input_r_address1,
        input_r_ce1 => grp_convolution1_fix_fu_568_input_r_ce1,
        input_r_q1 => input_r_q1,
        out_0_0_0_address0 => grp_convolution1_fix_fu_568_out_0_0_0_address0,
        out_0_0_0_ce0 => grp_convolution1_fix_fu_568_out_0_0_0_ce0,
        out_0_0_0_we0 => grp_convolution1_fix_fu_568_out_0_0_0_we0,
        out_0_0_0_d0 => grp_convolution1_fix_fu_568_out_0_0_0_d0);

    grp_convolution2_fix_fu_602 : component master_fix_convolution2_fix
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_convolution2_fix_fu_602_ap_start,
        ap_done => grp_convolution2_fix_fu_602_ap_done,
        ap_idle => grp_convolution2_fix_fu_602_ap_idle,
        ap_ready => grp_convolution2_fix_fu_602_ap_ready,
        m_0_0_0_0_address0 => grp_convolution2_fix_fu_602_m_0_0_0_0_address0,
        m_0_0_0_0_ce0 => grp_convolution2_fix_fu_602_m_0_0_0_0_ce0,
        m_0_0_0_0_q0 => max1_V_0_q0,
        m_0_0_0_0_address1 => grp_convolution2_fix_fu_602_m_0_0_0_0_address1,
        m_0_0_0_0_ce1 => grp_convolution2_fix_fu_602_m_0_0_0_0_ce1,
        m_0_0_0_0_q1 => max1_V_0_q1,
        out_0_0_0_0_address0 => grp_convolution2_fix_fu_602_out_0_0_0_0_address0,
        out_0_0_0_0_ce0 => grp_convolution2_fix_fu_602_out_0_0_0_0_ce0,
        out_0_0_0_0_we0 => grp_convolution2_fix_fu_602_out_0_0_0_0_we0,
        out_0_0_0_0_d0 => grp_convolution2_fix_fu_602_out_0_0_0_0_d0);

    grp_master_fix_Pipeline_VITIS_LOOP_324_1_fu_618 : component master_fix_master_fix_Pipeline_VITIS_LOOP_324_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_master_fix_Pipeline_VITIS_LOOP_324_1_fu_618_ap_start,
        ap_done => grp_master_fix_Pipeline_VITIS_LOOP_324_1_fu_618_ap_done,
        ap_idle => grp_master_fix_Pipeline_VITIS_LOOP_324_1_fu_618_ap_idle,
        ap_ready => grp_master_fix_Pipeline_VITIS_LOOP_324_1_fu_618_ap_ready,
        den2_V_0_0_05 => den2_V_0_3_fu_300,
        den2_V_0_1_06 => den2_V_0_3_1_fu_304,
        den2_V_0_2_07 => den2_V_0_3_2_fu_308,
        den2_V_0_3_08 => den2_V_0_3_3_fu_312,
        m_V_3_04_out => grp_master_fix_Pipeline_VITIS_LOOP_324_1_fu_618_m_V_3_04_out,
        m_V_3_04_out_ap_vld => grp_master_fix_Pipeline_VITIS_LOOP_324_1_fu_618_m_V_3_04_out_ap_vld,
        m_V_2_03_out => grp_master_fix_Pipeline_VITIS_LOOP_324_1_fu_618_m_V_2_03_out,
        m_V_2_03_out_ap_vld => grp_master_fix_Pipeline_VITIS_LOOP_324_1_fu_618_m_V_2_03_out_ap_vld,
        m_V_1_02_out => grp_master_fix_Pipeline_VITIS_LOOP_324_1_fu_618_m_V_1_02_out,
        m_V_1_02_out_ap_vld => grp_master_fix_Pipeline_VITIS_LOOP_324_1_fu_618_m_V_1_02_out_ap_vld,
        m_V_0_01_out => grp_master_fix_Pipeline_VITIS_LOOP_324_1_fu_618_m_V_0_01_out,
        m_V_0_01_out_ap_vld => grp_master_fix_Pipeline_VITIS_LOOP_324_1_fu_618_m_V_0_01_out_ap_vld);

    grp_master_fix_Pipeline_VITIS_LOOP_335_3_fu_630 : component master_fix_master_fix_Pipeline_VITIS_LOOP_335_3
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_master_fix_Pipeline_VITIS_LOOP_335_3_fu_630_ap_start,
        ap_done => grp_master_fix_Pipeline_VITIS_LOOP_335_3_fu_630_ap_done,
        ap_idle => grp_master_fix_Pipeline_VITIS_LOOP_335_3_fu_630_ap_idle,
        ap_ready => grp_master_fix_Pipeline_VITIS_LOOP_335_3_fu_630_ap_ready,
        m_V_0_01_reload => grp_master_fix_Pipeline_VITIS_LOOP_324_1_fu_618_m_V_0_01_out,
        m_V_1_02_reload => grp_master_fix_Pipeline_VITIS_LOOP_324_1_fu_618_m_V_1_02_out,
        m_V_2_03_reload => grp_master_fix_Pipeline_VITIS_LOOP_324_1_fu_618_m_V_2_03_out,
        m_V_3_04_reload => grp_master_fix_Pipeline_VITIS_LOOP_324_1_fu_618_m_V_3_04_out,
        conv_i_i84 => sum_V_load_1_reg_1894,
        out_r_address0 => grp_master_fix_Pipeline_VITIS_LOOP_335_3_fu_630_out_r_address0,
        out_r_ce0 => grp_master_fix_Pipeline_VITIS_LOOP_335_3_fu_630_out_r_ce0,
        out_r_we0 => grp_master_fix_Pipeline_VITIS_LOOP_335_3_fu_630_out_r_we0,
        out_r_d0 => grp_master_fix_Pipeline_VITIS_LOOP_335_3_fu_630_out_r_d0,
        grp_exp_32_13_s_fu_651_p_din1 => grp_master_fix_Pipeline_VITIS_LOOP_335_3_fu_630_grp_exp_32_13_s_fu_651_p_din1,
        grp_exp_32_13_s_fu_651_p_dout0 => grp_exp_32_13_s_fu_651_ap_return,
        grp_exp_32_13_s_fu_651_p_start => grp_master_fix_Pipeline_VITIS_LOOP_335_3_fu_630_grp_exp_32_13_s_fu_651_p_start,
        grp_exp_32_13_s_fu_651_p_ready => grp_exp_32_13_s_fu_651_ap_ready,
        grp_exp_32_13_s_fu_651_p_done => grp_exp_32_13_s_fu_651_ap_done,
        grp_exp_32_13_s_fu_651_p_idle => grp_exp_32_13_s_fu_651_ap_idle);

    grp_exp_32_13_s_fu_651 : component master_fix_exp_32_13_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_exp_32_13_s_fu_651_ap_start,
        ap_done => grp_exp_32_13_s_fu_651_ap_done,
        ap_idle => grp_exp_32_13_s_fu_651_ap_idle,
        ap_ready => grp_exp_32_13_s_fu_651_ap_ready,
        x => grp_exp_32_13_s_fu_651_x,
        ap_return => grp_exp_32_13_s_fu_651_ap_return);

    mul_7ns_9ns_15_1_1_U81 : component master_fix_mul_7ns_9ns_15_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 7,
        din1_WIDTH => 9,
        dout_WIDTH => 15)
    port map (
        din0 => mul_fu_753_p0,
        din1 => mul_fu_753_p1,
        dout => mul_fu_753_p2);

    urem_7ns_3ns_2_11_seq_1_U82 : component master_fix_urem_7ns_3ns_2_11_seq_1
    generic map (
        ID => 1,
        NUM_STAGE => 11,
        din0_WIDTH => 7,
        din1_WIDTH => 3,
        dout_WIDTH => 2)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        start => grp_fu_771_ap_start,
        done => grp_fu_771_ap_done,
        din0 => empty_54_fu_741_p1,
        din1 => grp_fu_771_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_771_p2);

    mul_21s_32s_51_1_1_U83 : component master_fix_mul_21s_32s_51_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 21,
        din1_WIDTH => 32,
        dout_WIDTH => 51)
    port map (
        din0 => firstDense_f_V_q0,
        din1 => max2_V_0_q0,
        dout => r_V_4_fu_1180_p2);

    mux_42_32_1_1_x_U84 : component master_fix_mux_42_32_1_1_x
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => ap_const_lv32_FFF49664,
        din1 => ap_const_lv32_8B87F,
        din2 => ap_const_lv32_FFF657C5,
        din3 => ap_const_lv32_FFFE856D,
        din4 => trunc_ln1171_1_fu_1261_p1,
        dout => tmp_fu_1285_p6);

    mul_19s_31ns_50_1_1_U85 : component master_fix_mul_19s_31ns_50_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 19,
        din1_WIDTH => 31,
        dout_WIDTH => 50)
    port map (
        din0 => secondDense_f_V_q0,
        din1 => r_V_5_fu_1388_p1,
        dout => r_V_5_fu_1388_p2);

    mux_42_32_1_1_U86 : component master_fix_mux_42_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => grp_master_fix_Pipeline_VITIS_LOOP_324_1_fu_618_m_V_0_01_out,
        din1 => grp_master_fix_Pipeline_VITIS_LOOP_324_1_fu_618_m_V_1_02_out,
        din2 => grp_master_fix_Pipeline_VITIS_LOOP_324_1_fu_618_m_V_2_03_out,
        din3 => grp_master_fix_Pipeline_VITIS_LOOP_324_1_fu_618_m_V_3_04_out,
        din4 => x_V_fu_1501_p5,
        dout => x_V_fu_1501_p6);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_convolution1_fix_fu_568_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_convolution1_fix_fu_568_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    grp_convolution1_fix_fu_568_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_convolution1_fix_fu_568_ap_ready = ap_const_logic_1)) then 
                    grp_convolution1_fix_fu_568_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_convolution2_fix_fu_602_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_convolution2_fix_fu_602_ap_start_reg <= ap_const_logic_0;
            else
                if (((icmp_ln250_fu_686_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                    grp_convolution2_fix_fu_602_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_convolution2_fix_fu_602_ap_ready = ap_const_logic_1)) then 
                    grp_convolution2_fix_fu_602_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_exp_32_13_s_fu_651_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_exp_32_13_s_fu_651_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_NS_fsm_state36) and (ap_const_logic_1 = ap_CS_fsm_state35))) then 
                    grp_exp_32_13_s_fu_651_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_exp_32_13_s_fu_651_ap_ready = ap_const_logic_1)) then 
                    grp_exp_32_13_s_fu_651_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_master_fix_Pipeline_VITIS_LOOP_324_1_fu_618_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_master_fix_Pipeline_VITIS_LOOP_324_1_fu_618_ap_start_reg <= ap_const_logic_0;
            else
                if (((icmp_ln311_fu_1273_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state29))) then 
                    grp_master_fix_Pipeline_VITIS_LOOP_324_1_fu_618_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_master_fix_Pipeline_VITIS_LOOP_324_1_fu_618_ap_ready = ap_const_logic_1)) then 
                    grp_master_fix_Pipeline_VITIS_LOOP_324_1_fu_618_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_master_fix_Pipeline_VITIS_LOOP_335_3_fu_630_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_master_fix_Pipeline_VITIS_LOOP_335_3_fu_630_ap_start_reg <= ap_const_logic_0;
            else
                if (((icmp_ln330_fu_1485_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state34))) then 
                    grp_master_fix_Pipeline_VITIS_LOOP_335_3_fu_630_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_master_fix_Pipeline_VITIS_LOOP_335_3_fu_630_ap_ready = ap_const_logic_1)) then 
                    grp_master_fix_Pipeline_VITIS_LOOP_335_3_fu_630_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    add_i_i_i_lcssa_lcssa7_i_reg_514_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
                add_i_i_i_lcssa_lcssa7_i_reg_514 <= sext_ln293_fu_1066_p1;
            elsif (((icmp_ln297_fu_1160_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state27))) then 
                add_i_i_i_lcssa_lcssa7_i_reg_514 <= lhs_2_reg_535;
            end if; 
        end if;
    end process;

    d_1_fu_288_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln250_fu_686_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                d_1_fu_288 <= ap_const_lv5_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state21) and (icmp_ln272_fu_915_p2 = ap_const_lv1_1))) then 
                d_1_fu_288 <= add_ln270_reg_1652;
            end if; 
        end if;
    end process;

    d_2_fu_292_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln270_fu_880_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state20))) then 
                d_2_fu_292 <= ap_const_lv5_0;
            elsif (((icmp_ln293_fu_1095_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state26))) then 
                d_2_fu_292 <= add_ln290_reg_1703;
            end if; 
        end if;
    end process;

    d_3_fu_296_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln290_fu_1049_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state24))) then 
                d_3_fu_296 <= ap_const_lv3_0;
            elsif (((icmp_ln314_fu_1344_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state30))) then 
                d_3_fu_296 <= add_ln311_reg_1807;
            end if; 
        end if;
    end process;

    d_fu_248_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                d_fu_248 <= ap_const_lv4_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and ((icmp_ln254_fu_765_p2 = ap_const_lv1_1) or (icmp_ln252_fu_729_p2 = ap_const_lv1_1)))) then 
                d_fu_248 <= add_ln250_reg_1570;
            end if; 
        end if;
    end process;

    den2_V_0_0_reg_558_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln311_fu_1273_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state29))) then 
                den2_V_0_0_reg_558 <= tmp_fu_1285_p6;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
                den2_V_0_0_reg_558 <= add_ln415_fu_1464_p2;
            end if; 
        end if;
    end process;

    empty_55_reg_448_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
                empty_55_reg_448 <= max1_V_0_q0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
                empty_55_reg_448 <= select_ln260_fu_861_p3;
            end if; 
        end if;
    end process;

    h_reg_524_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln293_fu_1095_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state26))) then 
                h_reg_524 <= ap_const_lv5_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
                h_reg_524 <= add_ln297_reg_1785;
            end if; 
        end if;
    end process;

    i_1_reg_470_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln270_fu_880_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state20))) then 
                i_1_reg_470 <= ap_const_lv6_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
                i_1_reg_470 <= add_ln272_reg_1672;
            end if; 
        end if;
    end process;

    i_2_reg_503_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
                i_2_reg_503 <= ap_const_lv4_0;
            elsif (((icmp_ln297_fu_1160_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state27))) then 
                i_2_reg_503 <= add_ln293_reg_1767;
            end if; 
        end if;
    end process;

    i_3_fu_320_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln311_fu_1273_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state29))) then 
                i_3_fu_320 <= ap_const_lv3_0;
            elsif (((icmp_ln330_fu_1485_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state34))) then 
                i_3_fu_320 <= add_ln330_fu_1491_p2;
            end if; 
        end if;
    end process;

    i_4_reg_547_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln311_fu_1273_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state29))) then 
                i_4_reg_547 <= ap_const_lv5_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
                i_4_reg_547 <= add_ln314_reg_1859;
            end if; 
        end if;
    end process;

    i_reg_437_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln250_fu_686_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                i_reg_437 <= ap_const_lv8_0;
            elsif (((icmp_ln258_fu_843_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state17))) then 
                i_reg_437 <= add_ln252_reg_1590;
            end if; 
        end if;
    end process;

    j_reg_459_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
                j_reg_459 <= ap_const_lv2_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
                j_reg_459 <= add_ln258_reg_1629;
            end if; 
        end if;
    end process;

    lhs_2_reg_535_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln293_fu_1095_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state26))) then 
                lhs_2_reg_535 <= add_i_i_i_lcssa_lcssa7_i_reg_514;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
                lhs_2_reg_535 <= add_ln415_1_fu_1252_p2;
            end if; 
        end if;
    end process;

    phi_mul_reg_481_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln270_fu_880_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state20))) then 
                phi_mul_reg_481 <= ap_const_lv12_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
                phi_mul_reg_481 <= next_mul_reg_1677;
            end if; 
        end if;
    end process;

    phi_urem_reg_492_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln270_fu_880_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state20))) then 
                phi_urem_reg_492 <= ap_const_lv6_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
                phi_urem_reg_492 <= select_ln1548_reg_1690;
            end if; 
        end if;
    end process;

    sum_V_fu_316_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln311_fu_1273_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state29))) then 
                sum_V_fu_316 <= ap_const_lv32_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
                sum_V_fu_316 <= sum_V_1_fu_1516_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                add_ln250_reg_1570 <= add_ln250_fu_692_p2;
                    zext_ln250_1_reg_1562(3 downto 0) <= zext_ln250_1_fu_682_p1(3 downto 0);
                    zext_ln250_reg_1557(3 downto 0) <= zext_ln250_fu_678_p1(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                add_ln252_reg_1590 <= add_ln252_fu_735_p2;
                    zext_ln252_reg_1582(10 downto 0) <= zext_ln252_fu_725_p1(10 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln254_fu_765_p2 = ap_const_lv1_0) and (icmp_ln252_fu_729_p2 = ap_const_lv1_0))) then
                add_ln256_reg_1603 <= add_ln256_fu_795_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then
                add_ln258_reg_1629 <= add_ln258_fu_849_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then
                add_ln270_reg_1652 <= add_ln270_fu_886_p2;
                    zext_ln270_1_reg_1644(4 downto 0) <= zext_ln270_1_fu_876_p1(4 downto 0);
                    zext_ln270_reg_1639(4 downto 0) <= zext_ln270_fu_872_p1(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state21)) then
                add_ln272_reg_1672 <= add_ln272_fu_921_p2;
                conv2_0_0_0_0_addr_reg_1664 <= zext_ln1548_2_fu_910_p1(10 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state24)) then
                add_ln290_reg_1703 <= add_ln290_fu_1055_p2;
                    sub_ln1171_reg_1695(7 downto 1) <= sub_ln1171_fu_1043_p2(7 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state26)) then
                add_ln293_reg_1767 <= add_ln293_fu_1101_p2;
                    tmp_11_cast_reg_1754(11 downto 4) <= tmp_11_cast_fu_1079_p3(11 downto 4);
                    tmp_s_reg_1759(7 downto 4) <= tmp_s_fu_1087_p3(7 downto 4);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state27)) then
                add_ln297_reg_1785 <= add_ln297_fu_1166_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state29)) then
                add_ln311_reg_1807 <= add_ln311_fu_1279_p2;
                    tmp_9_cast_reg_1799(5 downto 4) <= tmp_9_cast_fu_1265_p3(5 downto 4);
                trunc_ln1171_1_reg_1795 <= trunc_ln1171_1_fu_1261_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state30)) then
                add_ln314_reg_1859 <= add_ln314_fu_1350_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln290_fu_1049_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state24))) then
                den1_V_0_addr_reg_1713 <= zext_ln290_fu_1013_p1(4 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln314_fu_1344_p2 = ap_const_lv1_1) and (trunc_ln1171_1_reg_1795 = ap_const_lv2_1) and (ap_const_logic_1 = ap_CS_fsm_state30))) then
                den2_V_0_3_1_fu_304 <= den2_V_0_0_reg_558;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln314_fu_1344_p2 = ap_const_lv1_1) and (trunc_ln1171_1_reg_1795 = ap_const_lv2_2) and (ap_const_logic_1 = ap_CS_fsm_state30))) then
                den2_V_0_3_2_fu_308 <= den2_V_0_0_reg_558;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln314_fu_1344_p2 = ap_const_lv1_1) and (trunc_ln1171_1_reg_1795 = ap_const_lv2_3) and (ap_const_logic_1 = ap_CS_fsm_state30))) then
                den2_V_0_3_3_fu_312 <= den2_V_0_0_reg_558;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln314_fu_1344_p2 = ap_const_lv1_1) and (trunc_ln1171_1_reg_1795 = ap_const_lv2_0) and (ap_const_logic_1 = ap_CS_fsm_state30))) then
                den2_V_0_3_fu_300 <= den2_V_0_0_reg_558;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                max1_V_0_addr_reg_1611 <= zext_ln256_fu_814_p1(9 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state21) and (icmp_ln272_fu_915_p2 = ap_const_lv1_0))) then
                max2_V_0_addr_reg_1685 <= zext_ln276_fu_966_p1(8 - 1 downto 0);
                next_mul_reg_1677 <= next_mul_fu_927_p2;
                select_ln1548_reg_1690 <= select_ln1548_fu_983_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state39)) then
                op2_V_reg_1899 <= grp_exp_32_13_s_fu_651_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln330_fu_1485_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state34))) then
                sum_V_load_1_reg_1894 <= sum_V_fu_316;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln330_fu_1485_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state34))) then
                x_V_reg_1889 <= x_V_fu_1501_p6;
            end if;
        end if;
    end process;
    zext_ln250_reg_1557(11 downto 4) <= "00000000";
    zext_ln250_1_reg_1562(8 downto 4) <= "00000";
    zext_ln252_reg_1582(11) <= '0';
    zext_ln270_reg_1639(7 downto 5) <= "000";
    zext_ln270_1_reg_1644(9 downto 5) <= "00000";
    sub_ln1171_reg_1695(0) <= '0';
    tmp_11_cast_reg_1754(3 downto 0) <= "0000";
    tmp_s_reg_1759(3 downto 0) <= "0000";
    tmp_9_cast_reg_1799(3 downto 0) <= "0000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state3, ap_CS_fsm_state4, icmp_ln252_fu_729_p2, icmp_ln254_fu_765_p2, ap_CS_fsm_state17, ap_CS_fsm_state20, ap_CS_fsm_state21, icmp_ln272_fu_915_p2, ap_CS_fsm_state24, icmp_ln290_fu_1049_p2, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state29, icmp_ln311_fu_1273_p2, ap_CS_fsm_state30, icmp_ln314_fu_1344_p2, ap_CS_fsm_state34, icmp_ln330_fu_1485_p2, grp_convolution1_fix_fu_568_ap_done, grp_convolution2_fix_fu_602_ap_done, grp_master_fix_Pipeline_VITIS_LOOP_324_1_fu_618_ap_done, grp_master_fix_Pipeline_VITIS_LOOP_335_3_fu_630_ap_done, icmp_ln258_fu_843_p2, icmp_ln250_fu_686_p2, icmp_ln270_fu_880_p2, icmp_ln297_fu_1160_p2, icmp_ln293_fu_1095_p2, ap_CS_fsm_state2, ap_CS_fsm_state19, ap_CS_fsm_state32, ap_CS_fsm_state41)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((grp_convolution1_fix_fu_568_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln250_fu_686_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state19;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and ((icmp_ln254_fu_765_p2 = ap_const_lv1_1) or (icmp_ln252_fu_729_p2 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                if (((icmp_ln258_fu_843_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state17))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state18;
                end if;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state19 => 
                if (((grp_convolution2_fix_fu_602_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state19))) then
                    ap_NS_fsm <= ap_ST_fsm_state20;
                else
                    ap_NS_fsm <= ap_ST_fsm_state19;
                end if;
            when ap_ST_fsm_state20 => 
                if (((icmp_ln270_fu_880_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state20))) then
                    ap_NS_fsm <= ap_ST_fsm_state24;
                else
                    ap_NS_fsm <= ap_ST_fsm_state21;
                end if;
            when ap_ST_fsm_state21 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state21) and (icmp_ln272_fu_915_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state20;
                else
                    ap_NS_fsm <= ap_ST_fsm_state22;
                end if;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state24 => 
                if (((icmp_ln290_fu_1049_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state24))) then
                    ap_NS_fsm <= ap_ST_fsm_state29;
                else
                    ap_NS_fsm <= ap_ST_fsm_state25;
                end if;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                if (((icmp_ln293_fu_1095_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state26))) then
                    ap_NS_fsm <= ap_ST_fsm_state24;
                else
                    ap_NS_fsm <= ap_ST_fsm_state27;
                end if;
            when ap_ST_fsm_state27 => 
                if (((icmp_ln297_fu_1160_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state27))) then
                    ap_NS_fsm <= ap_ST_fsm_state26;
                else
                    ap_NS_fsm <= ap_ST_fsm_state28;
                end if;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state29 => 
                if (((icmp_ln311_fu_1273_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state29))) then
                    ap_NS_fsm <= ap_ST_fsm_state30;
                else
                    ap_NS_fsm <= ap_ST_fsm_state32;
                end if;
            when ap_ST_fsm_state30 => 
                if (((icmp_ln314_fu_1344_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state30))) then
                    ap_NS_fsm <= ap_ST_fsm_state29;
                else
                    ap_NS_fsm <= ap_ST_fsm_state31;
                end if;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state32 => 
                if (((grp_master_fix_Pipeline_VITIS_LOOP_324_1_fu_618_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state32))) then
                    ap_NS_fsm <= ap_ST_fsm_state33;
                else
                    ap_NS_fsm <= ap_ST_fsm_state32;
                end if;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                if (((icmp_ln330_fu_1485_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state34))) then
                    ap_NS_fsm <= ap_ST_fsm_state41;
                else
                    ap_NS_fsm <= ap_ST_fsm_state35;
                end if;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state41 => 
                if (((grp_master_fix_Pipeline_VITIS_LOOP_335_3_fu_630_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state41))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state41;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln1169_fu_1150_p2 <= std_logic_vector(unsigned(tmp_s_reg_1759) + unsigned(zext_ln1171_4_fu_1132_p1));
    add_ln1171_1_fu_1334_p2 <= std_logic_vector(unsigned(tmp_9_cast_reg_1799) + unsigned(zext_ln1171_2_fu_1330_p1));
    add_ln1171_2_fu_1140_p2 <= std_logic_vector(unsigned(tmp_11_cast_reg_1754) + unsigned(zext_ln1171_5_fu_1136_p1));
    add_ln1171_fu_1074_p2 <= std_logic_vector(unsigned(sub_ln1171_reg_1695) + unsigned(zext_ln1171_1_fu_1070_p1));
    add_ln1548_1_fu_822_p2 <= std_logic_vector(unsigned(zext_ln252_reg_1582) + unsigned(zext_ln1548_3_fu_818_p1));
    add_ln1548_2_fu_833_p2 <= std_logic_vector(unsigned(shl_ln1548_fu_827_p2) + unsigned(zext_ln250_reg_1557));
    add_ln1548_3_fu_971_p2 <= std_logic_vector(unsigned(phi_urem_reg_492) + unsigned(ap_const_lv6_1));
    add_ln1548_fu_905_p2 <= std_logic_vector(unsigned(tmp_4_fu_897_p3) + unsigned(zext_ln270_1_reg_1644));
    add_ln250_fu_692_p2 <= std_logic_vector(unsigned(d_fu_248) + unsigned(ap_const_lv4_1));
    add_ln252_fu_735_p2 <= std_logic_vector(unsigned(i_reg_437) + unsigned(ap_const_lv8_1));
    add_ln254_fu_759_p2 <= std_logic_vector(unsigned(i_cast_cast_fu_745_p1) + unsigned(ap_const_lv8_82));
    add_ln256_fu_795_p2 <= std_logic_vector(unsigned(tmp_6_cast_fu_787_p3) + unsigned(zext_ln250_1_reg_1562));
    add_ln258_fu_849_p2 <= std_logic_vector(unsigned(j_reg_459) + unsigned(ap_const_lv2_1));
    add_ln270_fu_886_p2 <= std_logic_vector(unsigned(d_1_fu_288) + unsigned(ap_const_lv5_1));
    add_ln272_fu_921_p2 <= std_logic_vector(unsigned(i_1_reg_470) + unsigned(ap_const_lv6_1));
    add_ln276_fu_961_p2 <= std_logic_vector(unsigned(tmp_8_cast_fu_953_p3) + unsigned(zext_ln270_reg_1639));
    add_ln290_fu_1055_p2 <= std_logic_vector(unsigned(d_2_fu_292) + unsigned(ap_const_lv5_1));
    add_ln293_fu_1101_p2 <= std_logic_vector(unsigned(i_2_reg_503) + unsigned(ap_const_lv4_1));
    add_ln297_fu_1166_p2 <= std_logic_vector(unsigned(h_reg_524) + unsigned(ap_const_lv5_1));
    add_ln311_fu_1279_p2 <= std_logic_vector(unsigned(d_3_fu_296) + unsigned(ap_const_lv3_1));
    add_ln314_fu_1350_p2 <= std_logic_vector(unsigned(i_4_reg_547) + unsigned(ap_const_lv5_1));
    add_ln330_fu_1491_p2 <= std_logic_vector(unsigned(i_3_fu_320) + unsigned(ap_const_lv3_1));
    add_ln415_1_fu_1252_p2 <= std_logic_vector(unsigned(p_Val2_3_fu_1200_p4) + unsigned(zext_ln415_1_fu_1248_p1));
    add_ln415_fu_1464_p2 <= std_logic_vector(unsigned(p_Val2_1_fu_1412_p4) + unsigned(zext_ln415_fu_1460_p1));
    and_ln412_1_fu_1242_p2 <= (p_Result_3_fu_1218_p3 and or_ln412_1_fu_1236_p2);
    and_ln412_fu_1454_p2 <= (p_Result_4_fu_1430_p3 and or_ln412_fu_1448_p2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_CS_fsm_state31 <= ap_CS_fsm(30);
    ap_CS_fsm_state32 <= ap_CS_fsm(31);
    ap_CS_fsm_state34 <= ap_CS_fsm(33);
    ap_CS_fsm_state35 <= ap_CS_fsm(34);
    ap_CS_fsm_state36 <= ap_CS_fsm(35);
    ap_CS_fsm_state39 <= ap_CS_fsm(38);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state40 <= ap_CS_fsm(39);
    ap_CS_fsm_state41 <= ap_CS_fsm(40);
    ap_NS_fsm_state36 <= ap_NS_fsm(35);
    ap_ST_fsm_state10_blk <= ap_const_logic_0;
    ap_ST_fsm_state11_blk <= ap_const_logic_0;
    ap_ST_fsm_state12_blk <= ap_const_logic_0;
    ap_ST_fsm_state13_blk <= ap_const_logic_0;
    ap_ST_fsm_state14_blk <= ap_const_logic_0;
    ap_ST_fsm_state15_blk <= ap_const_logic_0;
    ap_ST_fsm_state16_blk <= ap_const_logic_0;
    ap_ST_fsm_state17_blk <= ap_const_logic_0;
    ap_ST_fsm_state18_blk <= ap_const_logic_0;

    ap_ST_fsm_state19_blk_assign_proc : process(grp_convolution2_fix_fu_602_ap_done)
    begin
        if ((grp_convolution2_fix_fu_602_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state19_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state19_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state20_blk <= ap_const_logic_0;
    ap_ST_fsm_state21_blk <= ap_const_logic_0;
    ap_ST_fsm_state22_blk <= ap_const_logic_0;
    ap_ST_fsm_state23_blk <= ap_const_logic_0;
    ap_ST_fsm_state24_blk <= ap_const_logic_0;
    ap_ST_fsm_state25_blk <= ap_const_logic_0;
    ap_ST_fsm_state26_blk <= ap_const_logic_0;
    ap_ST_fsm_state27_blk <= ap_const_logic_0;
    ap_ST_fsm_state28_blk <= ap_const_logic_0;
    ap_ST_fsm_state29_blk <= ap_const_logic_0;

    ap_ST_fsm_state2_blk_assign_proc : process(grp_convolution1_fix_fu_568_ap_done)
    begin
        if ((grp_convolution1_fix_fu_568_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state2_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state2_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state30_blk <= ap_const_logic_0;
    ap_ST_fsm_state31_blk <= ap_const_logic_0;

    ap_ST_fsm_state32_blk_assign_proc : process(grp_master_fix_Pipeline_VITIS_LOOP_324_1_fu_618_ap_done)
    begin
        if ((grp_master_fix_Pipeline_VITIS_LOOP_324_1_fu_618_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state32_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state32_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state33_blk <= ap_const_logic_0;
    ap_ST_fsm_state34_blk <= ap_const_logic_0;
    ap_ST_fsm_state35_blk <= ap_const_logic_0;
    ap_ST_fsm_state36_blk <= ap_const_logic_0;
    ap_ST_fsm_state37_blk <= ap_const_logic_0;
    ap_ST_fsm_state38_blk <= ap_const_logic_0;
    ap_ST_fsm_state39_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state40_blk <= ap_const_logic_0;

    ap_ST_fsm_state41_blk_assign_proc : process(grp_master_fix_Pipeline_VITIS_LOOP_335_3_fu_630_ap_done)
    begin
        if ((grp_master_fix_Pipeline_VITIS_LOOP_335_3_fu_630_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state41_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state41_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;
    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_done_assign_proc : process(grp_master_fix_Pipeline_VITIS_LOOP_335_3_fu_630_ap_done, ap_CS_fsm_state41)
    begin
        if (((grp_master_fix_Pipeline_VITIS_LOOP_335_3_fu_630_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state41))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(grp_master_fix_Pipeline_VITIS_LOOP_335_3_fu_630_ap_done, ap_CS_fsm_state41)
    begin
        if (((grp_master_fix_Pipeline_VITIS_LOOP_335_3_fu_630_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state41))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    conv1_0_0_0_address0_assign_proc : process(ap_CS_fsm_state17, grp_convolution1_fix_fu_568_out_0_0_0_address0, ap_CS_fsm_state2, zext_ln1548_4_fu_838_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            conv1_0_0_0_address0 <= zext_ln1548_4_fu_838_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            conv1_0_0_0_address0 <= grp_convolution1_fix_fu_568_out_0_0_0_address0;
        else 
            conv1_0_0_0_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    conv1_0_0_0_ce0_assign_proc : process(ap_CS_fsm_state17, grp_convolution1_fix_fu_568_out_0_0_0_ce0, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            conv1_0_0_0_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            conv1_0_0_0_ce0 <= grp_convolution1_fix_fu_568_out_0_0_0_ce0;
        else 
            conv1_0_0_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    conv1_0_0_0_we0_assign_proc : process(grp_convolution1_fix_fu_568_out_0_0_0_we0, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            conv1_0_0_0_we0 <= grp_convolution1_fix_fu_568_out_0_0_0_we0;
        else 
            conv1_0_0_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    conv2_0_0_0_0_address0_assign_proc : process(conv2_0_0_0_0_addr_reg_1664, grp_convolution2_fix_fu_602_out_0_0_0_0_address0, ap_CS_fsm_state19, ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            conv2_0_0_0_0_address0 <= conv2_0_0_0_0_addr_reg_1664;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            conv2_0_0_0_0_address0 <= grp_convolution2_fix_fu_602_out_0_0_0_0_address0;
        else 
            conv2_0_0_0_0_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    conv2_0_0_0_0_ce0_assign_proc : process(grp_convolution2_fix_fu_602_out_0_0_0_0_ce0, ap_CS_fsm_state19, ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            conv2_0_0_0_0_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            conv2_0_0_0_0_ce0 <= grp_convolution2_fix_fu_602_out_0_0_0_0_ce0;
        else 
            conv2_0_0_0_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    conv2_0_0_0_0_we0_assign_proc : process(grp_convolution2_fix_fu_602_out_0_0_0_0_we0, ap_CS_fsm_state19)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            conv2_0_0_0_0_we0 <= grp_convolution2_fix_fu_602_out_0_0_0_0_we0;
        else 
            conv2_0_0_0_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    den1_V_0_address0_assign_proc : process(den1_V_0_addr_reg_1713, ap_CS_fsm_state26, ap_CS_fsm_state30, zext_ln736_fu_1325_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            den1_V_0_address0 <= zext_ln736_fu_1325_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            den1_V_0_address0 <= den1_V_0_addr_reg_1713;
        else 
            den1_V_0_address0 <= "XXXX";
        end if; 
    end process;


    den1_V_0_ce0_assign_proc : process(ap_CS_fsm_state26, ap_CS_fsm_state30)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state26))) then 
            den1_V_0_ce0 <= ap_const_logic_1;
        else 
            den1_V_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    den1_V_0_d0 <= 
        ap_const_lv31_0 when (tmp_6_fu_1111_p3(0) = '1') else 
        trunc_ln293_fu_1107_p1;

    den1_V_0_we0_assign_proc : process(ap_CS_fsm_state26, icmp_ln293_fu_1095_p2)
    begin
        if (((icmp_ln293_fu_1095_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state26))) then 
            den1_V_0_we0 <= ap_const_logic_1;
        else 
            den1_V_0_we0 <= ap_const_logic_0;
        end if; 
    end process;

    empty_54_fu_741_p1 <= i_reg_437(7 - 1 downto 0);
    firstDense_f_V_address0 <= zext_ln1171_6_fu_1145_p1(12 - 1 downto 0);

    firstDense_f_V_ce0_assign_proc : process(ap_CS_fsm_state27)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            firstDense_f_V_ce0 <= ap_const_logic_1;
        else 
            firstDense_f_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_convolution1_fix_fu_568_ap_start <= grp_convolution1_fix_fu_568_ap_start_reg;
    grp_convolution2_fix_fu_602_ap_start <= grp_convolution2_fix_fu_602_ap_start_reg;

    grp_exp_32_13_s_fu_651_ap_start_assign_proc : process(ap_CS_fsm_state34, grp_master_fix_Pipeline_VITIS_LOOP_335_3_fu_630_grp_exp_32_13_s_fu_651_p_start, ap_CS_fsm_state41, grp_exp_32_13_s_fu_651_ap_start_reg)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state34))) then 
            grp_exp_32_13_s_fu_651_ap_start <= grp_master_fix_Pipeline_VITIS_LOOP_335_3_fu_630_grp_exp_32_13_s_fu_651_p_start;
        else 
            grp_exp_32_13_s_fu_651_ap_start <= grp_exp_32_13_s_fu_651_ap_start_reg;
        end if; 
    end process;


    grp_exp_32_13_s_fu_651_x_assign_proc : process(x_V_reg_1889, ap_CS_fsm_state34, grp_master_fix_Pipeline_VITIS_LOOP_335_3_fu_630_grp_exp_32_13_s_fu_651_p_din1, ap_CS_fsm_state41, ap_CS_fsm_state36)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state34))) then 
            grp_exp_32_13_s_fu_651_x <= grp_master_fix_Pipeline_VITIS_LOOP_335_3_fu_630_grp_exp_32_13_s_fu_651_p_din1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            grp_exp_32_13_s_fu_651_x <= x_V_reg_1889;
        else 
            grp_exp_32_13_s_fu_651_x <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_771_ap_start_assign_proc : process(ap_CS_fsm_state4, icmp_ln252_fu_729_p2, icmp_ln254_fu_765_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln254_fu_765_p2 = ap_const_lv1_0) and (icmp_ln252_fu_729_p2 = ap_const_lv1_0))) then 
            grp_fu_771_ap_start <= ap_const_logic_1;
        else 
            grp_fu_771_ap_start <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_771_p1 <= ap_const_lv7_3(3 - 1 downto 0);
    grp_master_fix_Pipeline_VITIS_LOOP_324_1_fu_618_ap_start <= grp_master_fix_Pipeline_VITIS_LOOP_324_1_fu_618_ap_start_reg;
    grp_master_fix_Pipeline_VITIS_LOOP_335_3_fu_630_ap_start <= grp_master_fix_Pipeline_VITIS_LOOP_335_3_fu_630_ap_start_reg;
    i_cast_cast_fu_745_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_54_fu_741_p1),8));
    icmp_ln1548_1_fu_995_p2 <= "1" when (signed(max2_V_0_q0) < signed(conv2_0_0_0_0_q0)) else "0";
    icmp_ln1548_2_fu_855_p2 <= "1" when (signed(empty_55_reg_448) < signed(conv1_0_0_0_q0)) else "0";
    icmp_ln1548_fu_977_p2 <= "1" when (unsigned(add_ln1548_3_fu_971_p2) < unsigned(ap_const_lv6_3)) else "0";
    icmp_ln250_fu_686_p2 <= "1" when (d_fu_248 = ap_const_lv4_8) else "0";
    icmp_ln252_fu_729_p2 <= "1" when (i_reg_437 = ap_const_lv8_80) else "0";
    icmp_ln254_fu_765_p2 <= "1" when (unsigned(add_ln254_fu_759_p2) < unsigned(ap_const_lv8_3)) else "0";
    icmp_ln255_fu_808_p2 <= "1" when (trunc_ln255_fu_804_p1 = ap_const_lv2_0) else "0";
    icmp_ln258_fu_843_p2 <= "1" when (j_reg_459 = ap_const_lv2_3) else "0";
    icmp_ln270_fu_880_p2 <= "1" when (d_1_fu_288 = ap_const_lv5_10) else "0";
    icmp_ln272_fu_915_p2 <= "1" when (i_1_reg_470 = ap_const_lv6_2A) else "0";
    icmp_ln275_fu_937_p2 <= "1" when (trunc_ln275_fu_933_p1 = ap_const_lv2_0) else "0";
    icmp_ln290_fu_1049_p2 <= "1" when (d_2_fu_292 = ap_const_lv5_10) else "0";
    icmp_ln293_fu_1095_p2 <= "1" when (i_2_reg_503 = ap_const_lv4_E) else "0";
    icmp_ln297_fu_1160_p2 <= "1" when (h_reg_524 = ap_const_lv5_10) else "0";
    icmp_ln311_fu_1273_p2 <= "1" when (d_3_fu_296 = ap_const_lv3_4) else "0";
    icmp_ln314_fu_1344_p2 <= "1" when (i_4_reg_547 = ap_const_lv5_10) else "0";
    icmp_ln330_fu_1485_p2 <= "1" when (i_3_fu_320 = ap_const_lv3_4) else "0";
    input_r_address0 <= grp_convolution1_fix_fu_568_input_r_address0;
    input_r_address1 <= grp_convolution1_fix_fu_568_input_r_address1;
    input_r_ce0 <= grp_convolution1_fix_fu_568_input_r_ce0;
    input_r_ce1 <= grp_convolution1_fix_fu_568_input_r_ce1;
    lhs_1_fu_1394_p3 <= (den2_V_0_0_reg_558 & ap_const_lv19_0);
    lhs_3_fu_1186_p3 <= (lhs_2_reg_535 & ap_const_lv19_0);

    max1_V_0_address0_assign_proc : process(max1_V_0_addr_reg_1611, ap_CS_fsm_state14, ap_CS_fsm_state17, grp_convolution2_fix_fu_602_m_0_0_0_0_address0, ap_CS_fsm_state19, zext_ln256_fu_814_p1, ap_CS_fsm_state15)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state17))) then 
            max1_V_0_address0 <= max1_V_0_addr_reg_1611;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            max1_V_0_address0 <= zext_ln256_fu_814_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            max1_V_0_address0 <= grp_convolution2_fix_fu_602_m_0_0_0_0_address0;
        else 
            max1_V_0_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    max1_V_0_ce0_assign_proc : process(ap_CS_fsm_state14, ap_CS_fsm_state17, grp_convolution2_fix_fu_602_m_0_0_0_0_ce0, ap_CS_fsm_state19, ap_CS_fsm_state15)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            max1_V_0_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            max1_V_0_ce0 <= grp_convolution2_fix_fu_602_m_0_0_0_0_ce0;
        else 
            max1_V_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    max1_V_0_ce1_assign_proc : process(grp_convolution2_fix_fu_602_m_0_0_0_0_ce1, ap_CS_fsm_state19)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            max1_V_0_ce1 <= grp_convolution2_fix_fu_602_m_0_0_0_0_ce1;
        else 
            max1_V_0_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    max1_V_0_d0_assign_proc : process(ap_CS_fsm_state14, ap_CS_fsm_state17, empty_55_reg_448)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            max1_V_0_d0 <= empty_55_reg_448;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            max1_V_0_d0 <= ap_const_lv32_0;
        else 
            max1_V_0_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    max1_V_0_we0_assign_proc : process(ap_CS_fsm_state14, ap_CS_fsm_state17, icmp_ln258_fu_843_p2, icmp_ln255_fu_808_p2)
    begin
        if ((((icmp_ln255_fu_808_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state14)) or ((icmp_ln258_fu_843_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state17)))) then 
            max1_V_0_we0 <= ap_const_logic_1;
        else 
            max1_V_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    max2_V_0_address0_assign_proc : process(ap_CS_fsm_state21, max2_V_0_addr_reg_1685, ap_CS_fsm_state27, ap_CS_fsm_state23, zext_ln276_fu_966_p1, zext_ln1169_fu_1155_p1, ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            max2_V_0_address0 <= zext_ln1169_fu_1155_p1(8 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state23))) then 
            max2_V_0_address0 <= max2_V_0_addr_reg_1685;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            max2_V_0_address0 <= zext_ln276_fu_966_p1(8 - 1 downto 0);
        else 
            max2_V_0_address0 <= "XXXXXXXX";
        end if; 
    end process;


    max2_V_0_ce0_assign_proc : process(ap_CS_fsm_state21, ap_CS_fsm_state27, ap_CS_fsm_state23, ap_CS_fsm_state22)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state21))) then 
            max2_V_0_ce0 <= ap_const_logic_1;
        else 
            max2_V_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    max2_V_0_d0_assign_proc : process(ap_CS_fsm_state21, ap_CS_fsm_state23, select_ln280_fu_1001_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            max2_V_0_d0 <= select_ln280_fu_1001_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            max2_V_0_d0 <= ap_const_lv32_0;
        else 
            max2_V_0_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    max2_V_0_we0_assign_proc : process(ap_CS_fsm_state21, icmp_ln272_fu_915_p2, ap_CS_fsm_state23, icmp_ln275_fu_937_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state23) or ((icmp_ln275_fu_937_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state21) and (icmp_ln272_fu_915_p2 = ap_const_lv1_0)))) then 
            max2_V_0_we0 <= ap_const_logic_1;
        else 
            max2_V_0_we0 <= ap_const_logic_0;
        end if; 
    end process;

    mul_fu_753_p0 <= mul_fu_753_p00(7 - 1 downto 0);
    mul_fu_753_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_54_fu_741_p1),15));
    mul_fu_753_p1 <= ap_const_lv15_AB(9 - 1 downto 0);
    next_mul_fu_927_p2 <= std_logic_vector(unsigned(phi_mul_reg_481) + unsigned(ap_const_lv12_56));
    or_ln412_1_fu_1236_p2 <= (r_1_fu_1230_p2 or p_Result_2_fu_1210_p3);
    or_ln412_fu_1448_p2 <= (r_fu_1442_p2 or p_Result_s_fu_1422_p3);
    out_r_address0 <= grp_master_fix_Pipeline_VITIS_LOOP_335_3_fu_630_out_r_address0;
    out_r_ce0 <= grp_master_fix_Pipeline_VITIS_LOOP_335_3_fu_630_out_r_ce0;
    out_r_d0 <= grp_master_fix_Pipeline_VITIS_LOOP_335_3_fu_630_out_r_d0;
    out_r_we0 <= grp_master_fix_Pipeline_VITIS_LOOP_335_3_fu_630_out_r_we0;
    p_Result_2_fu_1210_p3 <= ret_V_fu_1194_p2(19 downto 19);
    p_Result_3_fu_1218_p3 <= ret_V_fu_1194_p2(18 downto 18);
    p_Result_4_fu_1430_p3 <= r_V_5_fu_1388_p2(18 downto 18);
    p_Result_s_fu_1422_p3 <= ret_V_2_fu_1406_p2(19 downto 19);
    p_Val2_1_fu_1412_p4 <= ret_V_2_fu_1406_p2(50 downto 19);
    p_Val2_3_fu_1200_p4 <= ret_V_fu_1194_p2(50 downto 19);
    r_1_fu_1230_p2 <= "0" when (trunc_ln727_1_fu_1226_p1 = ap_const_lv18_0) else "1";
    r_V_5_fu_1388_p1 <= r_V_5_fu_1388_p10(31 - 1 downto 0);
    r_V_5_fu_1388_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(den1_V_0_q0),50));
    r_fu_1442_p2 <= "0" when (trunc_ln727_fu_1438_p1 = ap_const_lv18_0) else "1";
    ret_V_2_fu_1406_p2 <= std_logic_vector(unsigned(lhs_1_fu_1394_p3) + unsigned(sext_ln1245_fu_1402_p1));
    ret_V_fu_1194_p2 <= std_logic_vector(unsigned(lhs_3_fu_1186_p3) + unsigned(r_V_4_fu_1180_p2));
    secondDense_f_V_address0 <= zext_ln1171_3_fu_1339_p1(6 - 1 downto 0);

    secondDense_f_V_ce0_assign_proc : process(ap_CS_fsm_state30)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            secondDense_f_V_ce0 <= ap_const_logic_1;
        else 
            secondDense_f_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln1548_fu_983_p3 <= 
        add_ln1548_3_fu_971_p2 when (icmp_ln1548_fu_977_p2(0) = '1') else 
        ap_const_lv6_0;
    select_ln260_fu_861_p3 <= 
        conv1_0_0_0_q0 when (icmp_ln1548_2_fu_855_p2(0) = '1') else 
        empty_55_reg_448;
    select_ln280_fu_1001_p3 <= 
        conv2_0_0_0_0_q0 when (icmp_ln1548_1_fu_995_p2(0) = '1') else 
        max2_V_0_q0;
        sext_ln1245_fu_1402_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_5_fu_1388_p2),51));

        sext_ln293_fu_1066_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(thirdBias_f_V_q0),32));

    shl_ln1548_fu_827_p2 <= std_logic_vector(shift_left(unsigned(add_ln1548_1_fu_822_p2),to_integer(unsigned('0' & ap_const_lv12_3(12-1 downto 0)))));
    sub_ln1171_fu_1043_p2 <= std_logic_vector(unsigned(tmp_2_cast_fu_1023_p3) - unsigned(zext_ln1171_fu_1039_p1));
    sub_ln1548_fu_719_p2 <= std_logic_vector(unsigned(zext_ln1548_1_fu_715_p1) - unsigned(zext_ln1548_fu_703_p1));
    sum_V_1_fu_1516_p2 <= std_logic_vector(unsigned(op2_V_reg_1899) + unsigned(sum_V_fu_316));
    thirdBias_f_V_address0 <= zext_ln290_fu_1013_p1(4 - 1 downto 0);

    thirdBias_f_V_ce0_assign_proc : process(ap_CS_fsm_state24)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            thirdBias_f_V_ce0 <= ap_const_logic_1;
        else 
            thirdBias_f_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_11_cast_fu_1079_p3 <= (add_ln1171_fu_1074_p2 & ap_const_lv4_0);
    tmp_1_fu_707_p3 <= (i_reg_437 & ap_const_lv2_0);
    tmp_2_cast_fu_1023_p3 <= (trunc_ln1171_fu_1019_p1 & ap_const_lv4_0);
    tmp_2_fu_777_p4 <= mul_fu_753_p2(14 downto 9);
    tmp_3_fu_1031_p3 <= (d_2_fu_292 & ap_const_lv1_0);
    tmp_4_fu_897_p3 <= (i_1_reg_470 & ap_const_lv4_0);
    tmp_5_fu_943_p4 <= phi_mul_reg_481(11 downto 8);
    tmp_6_cast_fu_787_p3 <= (tmp_2_fu_777_p4 & ap_const_lv3_0);
    tmp_6_fu_1111_p3 <= add_i_i_i_lcssa_lcssa7_i_reg_514(31 downto 31);
    tmp_8_cast_fu_953_p3 <= (tmp_5_fu_943_p4 & ap_const_lv4_0);
    tmp_9_cast_fu_1265_p3 <= (trunc_ln1171_1_fu_1261_p1 & ap_const_lv4_0);
    tmp_s_fu_1087_p3 <= (i_2_reg_503 & ap_const_lv4_0);
    trunc_ln1171_1_fu_1261_p1 <= d_3_fu_296(2 - 1 downto 0);
    trunc_ln1171_fu_1019_p1 <= d_2_fu_292(4 - 1 downto 0);
    trunc_ln255_fu_804_p1 <= grp_fu_771_p2(2 - 1 downto 0);
    trunc_ln275_fu_933_p1 <= phi_urem_reg_492(2 - 1 downto 0);
    trunc_ln293_fu_1107_p1 <= add_i_i_i_lcssa_lcssa7_i_reg_514(31 - 1 downto 0);
    trunc_ln727_1_fu_1226_p1 <= r_V_4_fu_1180_p2(18 - 1 downto 0);
    trunc_ln727_fu_1438_p1 <= r_V_5_fu_1388_p2(18 - 1 downto 0);
    x_V_fu_1501_p5 <= i_3_fu_320(2 - 1 downto 0);
    zext_ln1169_fu_1155_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1169_fu_1150_p2),64));
    zext_ln1171_1_fu_1070_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_2_reg_503),8));
    zext_ln1171_2_fu_1330_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_4_reg_547),6));
    zext_ln1171_3_fu_1339_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1171_1_fu_1334_p2),64));
    zext_ln1171_4_fu_1132_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(h_reg_524),8));
    zext_ln1171_5_fu_1136_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(h_reg_524),12));
    zext_ln1171_6_fu_1145_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1171_2_fu_1140_p2),64));
    zext_ln1171_fu_1039_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_3_fu_1031_p3),8));
    zext_ln1548_1_fu_715_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_fu_707_p3),11));
    zext_ln1548_2_fu_910_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1548_fu_905_p2),64));
    zext_ln1548_3_fu_818_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_459),12));
    zext_ln1548_4_fu_838_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1548_2_fu_833_p2),64));
    zext_ln1548_fu_703_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_437),11));
    zext_ln250_1_fu_682_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(d_fu_248),9));
    zext_ln250_fu_678_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(d_fu_248),12));
    zext_ln252_fu_725_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln1548_fu_719_p2),12));
    zext_ln256_fu_814_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln256_reg_1603),64));
    zext_ln270_1_fu_876_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(d_1_fu_288),10));
    zext_ln270_fu_872_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(d_1_fu_288),8));
    zext_ln276_fu_966_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln276_fu_961_p2),64));
    zext_ln290_fu_1013_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(d_2_fu_292),64));
    zext_ln415_1_fu_1248_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln412_1_fu_1242_p2),32));
    zext_ln415_fu_1460_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln412_fu_1454_p2),32));
    zext_ln736_fu_1325_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_4_reg_547),64));
end behav;
