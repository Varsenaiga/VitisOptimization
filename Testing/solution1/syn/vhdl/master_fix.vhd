-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
-- Version: 2021.1
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity master_fix is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_r_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    input_r_ce0 : OUT STD_LOGIC;
    input_r_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    out_r_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    out_r_ce0 : OUT STD_LOGIC;
    out_r_we0 : OUT STD_LOGIC;
    out_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of master_fix is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "master_fix_master_fix,hls_ip_2021_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.400000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.574250,HLS_SYN_LAT=35758,HLS_SYN_TPT=none,HLS_SYN_MEM=48,HLS_SYN_DSP=0,HLS_SYN_FF=30128,HLS_SYN_LUT=27008,HLS_VERSION=2021_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (67 downto 0) := "00000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (67 downto 0) := "00000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (67 downto 0) := "00000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (67 downto 0) := "00000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (67 downto 0) := "00000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state63 : STD_LOGIC_VECTOR (67 downto 0) := "00000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state64 : STD_LOGIC_VECTOR (67 downto 0) := "00001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state65 : STD_LOGIC_VECTOR (67 downto 0) := "00010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state66 : STD_LOGIC_VECTOR (67 downto 0) := "00100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state67 : STD_LOGIC_VECTOR (67 downto 0) := "01000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state68 : STD_LOGIC_VECTOR (67 downto 0) := "10000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111011";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_3A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111010";
    constant ap_const_lv32_41 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000001";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv32_43 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000011";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv32_42 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000010";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv36_0 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000000000000000";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv35_0 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000000000000";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv8_80 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv15_AB : STD_LOGIC_VECTOR (14 downto 0) := "000000010101011";
    constant ap_const_lv8_82 : STD_LOGIC_VECTOR (7 downto 0) := "10000010";
    constant ap_const_lv8_3 : STD_LOGIC_VECTOR (7 downto 0) := "00000011";
    constant ap_const_lv7_3 : STD_LOGIC_VECTOR (6 downto 0) := "0000011";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv12_3 : STD_LOGIC_VECTOR (11 downto 0) := "000000000011";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv6_2A : STD_LOGIC_VECTOR (5 downto 0) := "101010";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv12_56 : STD_LOGIC_VECTOR (11 downto 0) := "000001010110";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv6_3 : STD_LOGIC_VECTOR (5 downto 0) := "000011";
    constant ap_const_lv4_E : STD_LOGIC_VECTOR (3 downto 0) := "1110";
    constant ap_const_lv19_0 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000000";
    constant ap_const_lv32_36 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110110";
    constant ap_const_lv18_0 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000000";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv36_FFFF49664 : STD_LOGIC_VECTOR (35 downto 0) := "111111111111111101001001011001100100";
    constant ap_const_lv36_8B87F : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000010001011100001111111";
    constant ap_const_lv36_FFFF657C5 : STD_LOGIC_VECTOR (35 downto 0) := "111111111111111101100101011111000101";
    constant ap_const_lv36_FFFFE856D : STD_LOGIC_VECTOR (35 downto 0) := "111111111111111111101000010101101101";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal thirdBias_f_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal thirdBias_f_V_ce0 : STD_LOGIC;
    signal thirdBias_f_V_q0 : STD_LOGIC_VECTOR (20 downto 0);
    signal firstDense_f_V_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal firstDense_f_V_ce0 : STD_LOGIC;
    signal firstDense_f_V_q0 : STD_LOGIC_VECTOR (20 downto 0);
    signal secondDense_f_V_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal secondDense_f_V_ce0 : STD_LOGIC;
    signal secondDense_f_V_q0 : STD_LOGIC_VECTOR (18 downto 0);
    signal reg_763 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state41 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state41 : signal is "none";
    signal icmp_ln504_fu_1586_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state60 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state60 : signal is "none";
    signal zext_ln422_fu_777_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln422_reg_1652 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal zext_ln422_1_fu_781_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln422_1_reg_1657 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln422_fu_791_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln422_reg_1665 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln424_fu_824_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln424_reg_1677 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal add_ln424_fu_834_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln424_reg_1685 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_41_fu_840_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln424_fu_828_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln428_fu_894_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln428_reg_1698 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln426_fu_864_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal max1_V_0_addr_reg_1706 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal max1_V_0_q0 : STD_LOGIC_VECTOR (35 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal add_ln430_fu_948_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln430_reg_1724 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln430_fu_976_p1 : STD_LOGIC_VECTOR (35 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal zext_ln443_fu_983_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln443_reg_1734 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal zext_ln443_1_fu_987_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln443_1_reg_1739 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln443_fu_997_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln443_reg_1747 : STD_LOGIC_VECTOR (4 downto 0);
    signal conv2_0_addr_reg_1759 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal add_ln445_fu_1032_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln445_reg_1767 : STD_LOGIC_VECTOR (5 downto 0);
    signal next_mul_fu_1038_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal next_mul_reg_1772 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln445_fu_1026_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal max2_V_0_addr_reg_1780 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln453_fu_1094_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln453_reg_1785 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln454_fu_1112_p3 : STD_LOGIC_VECTOR (34 downto 0);
    signal select_ln454_reg_1790 : STD_LOGIC_VECTOR (34 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal sub_ln1171_fu_1153_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sub_ln1171_reg_1795 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal add_ln464_fu_1165_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln464_reg_1803 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln464_fu_1159_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal den1_V_0_addr_reg_1813 : STD_LOGIC_VECTOR (3 downto 0);
    signal sext_ln467_fu_1176_p1 : STD_LOGIC_VECTOR (35 downto 0);
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal tmp_18_cast_fu_1189_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_18_cast_reg_1854 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal tmp_8_fu_1197_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_8_reg_1859 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln467_fu_1211_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln467_reg_1867 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal add_ln471_fu_1276_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln471_reg_1885 : STD_LOGIC_VECTOR (4 downto 0);
    signal max2_V_0_q0 : STD_LOGIC_VECTOR (34 downto 0);
    signal r_V_2_reg_1890 : STD_LOGIC_VECTOR (34 downto 0);
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal firstDense_f_V_load_reg_1895 : STD_LOGIC_VECTOR (20 downto 0);
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal grp_fu_1288_p2 : STD_LOGIC_VECTOR (54 downto 0);
    signal r_V_4_reg_1910 : STD_LOGIC_VECTOR (54 downto 0);
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal trunc_ln727_1_fu_1294_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal trunc_ln727_1_reg_1915 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln415_1_fu_1358_p2 : STD_LOGIC_VECTOR (35 downto 0);
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal trunc_ln1171_1_fu_1367_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln1171_1_reg_1925 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal tmp_16_cast_fu_1371_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_16_cast_reg_1929 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln485_fu_1385_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln485_reg_1937 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_2_fu_1391_p6 : STD_LOGIC_VECTOR (35 downto 0);
    signal icmp_ln485_fu_1379_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal add_ln488_fu_1456_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln488_reg_1989 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln488_fu_1450_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal den1_V_0_q0 : STD_LOGIC_VECTOR (34 downto 0);
    signal r_V_reg_1999 : STD_LOGIC_VECTOR (34 downto 0);
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal secondDense_f_V_load_reg_2004 : STD_LOGIC_VECTOR (18 downto 0);
    signal ap_CS_fsm_state36 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state36 : signal is "none";
    signal grp_fu_1492_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal r_V_5_reg_2019 : STD_LOGIC_VECTOR (53 downto 0);
    signal ap_CS_fsm_state37 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state37 : signal is "none";
    signal trunc_ln727_fu_1498_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal trunc_ln727_reg_2025 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln415_fu_1565_p2 : STD_LOGIC_VECTOR (35 downto 0);
    signal ap_CS_fsm_state38 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state38 : signal is "none";
    signal tmp_5_fu_1602_p6 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_5_reg_2050 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_753_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_7_reg_2055 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state59 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state59 : signal is "none";
    signal grp_fu_749_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum_1_reg_2060 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state66 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state66 : signal is "none";
    signal conv1_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal conv1_ce0 : STD_LOGIC;
    signal conv1_we0 : STD_LOGIC;
    signal conv1_q0 : STD_LOGIC_VECTOR (34 downto 0);
    signal max1_V_0_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal max1_V_0_ce0 : STD_LOGIC;
    signal max1_V_0_we0 : STD_LOGIC;
    signal max1_V_0_d0 : STD_LOGIC_VECTOR (35 downto 0);
    signal max1_V_0_ce1 : STD_LOGIC;
    signal max1_V_0_q1 : STD_LOGIC_VECTOR (35 downto 0);
    signal max1_V_0_ce2 : STD_LOGIC;
    signal max1_V_0_q2 : STD_LOGIC_VECTOR (35 downto 0);
    signal max1_V_0_ce3 : STD_LOGIC;
    signal max1_V_0_q3 : STD_LOGIC_VECTOR (35 downto 0);
    signal max1_V_0_ce4 : STD_LOGIC;
    signal max1_V_0_q4 : STD_LOGIC_VECTOR (35 downto 0);
    signal max1_V_0_ce5 : STD_LOGIC;
    signal max1_V_0_q5 : STD_LOGIC_VECTOR (35 downto 0);
    signal max1_V_0_ce6 : STD_LOGIC;
    signal max1_V_0_q6 : STD_LOGIC_VECTOR (35 downto 0);
    signal max1_V_0_ce7 : STD_LOGIC;
    signal max1_V_0_q7 : STD_LOGIC_VECTOR (35 downto 0);
    signal max1_V_0_ce8 : STD_LOGIC;
    signal max1_V_0_q8 : STD_LOGIC_VECTOR (35 downto 0);
    signal max1_V_0_ce9 : STD_LOGIC;
    signal max1_V_0_q9 : STD_LOGIC_VECTOR (35 downto 0);
    signal max1_V_0_ce10 : STD_LOGIC;
    signal max1_V_0_q10 : STD_LOGIC_VECTOR (35 downto 0);
    signal max1_V_0_ce11 : STD_LOGIC;
    signal max1_V_0_q11 : STD_LOGIC_VECTOR (35 downto 0);
    signal max1_V_0_ce12 : STD_LOGIC;
    signal max1_V_0_q12 : STD_LOGIC_VECTOR (35 downto 0);
    signal max1_V_0_ce13 : STD_LOGIC;
    signal max1_V_0_q13 : STD_LOGIC_VECTOR (35 downto 0);
    signal max1_V_0_ce14 : STD_LOGIC;
    signal max1_V_0_q14 : STD_LOGIC_VECTOR (35 downto 0);
    signal max1_V_0_ce15 : STD_LOGIC;
    signal max1_V_0_q15 : STD_LOGIC_VECTOR (35 downto 0);
    signal conv2_0_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal conv2_0_ce0 : STD_LOGIC;
    signal conv2_0_we0 : STD_LOGIC;
    signal conv2_0_q0 : STD_LOGIC_VECTOR (34 downto 0);
    signal max2_V_0_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal max2_V_0_ce0 : STD_LOGIC;
    signal max2_V_0_we0 : STD_LOGIC;
    signal max2_V_0_d0 : STD_LOGIC_VECTOR (34 downto 0);
    signal den1_V_0_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal den1_V_0_ce0 : STD_LOGIC;
    signal den1_V_0_we0 : STD_LOGIC;
    signal den1_V_0_d0 : STD_LOGIC_VECTOR (34 downto 0);
    signal grp_convolution1_fix_fu_620_ap_start : STD_LOGIC;
    signal grp_convolution1_fix_fu_620_ap_done : STD_LOGIC;
    signal grp_convolution1_fix_fu_620_ap_idle : STD_LOGIC;
    signal grp_convolution1_fix_fu_620_ap_ready : STD_LOGIC;
    signal grp_convolution1_fix_fu_620_input_r_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_convolution1_fix_fu_620_input_r_ce0 : STD_LOGIC;
    signal grp_convolution1_fix_fu_620_out_r_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_convolution1_fix_fu_620_out_r_ce0 : STD_LOGIC;
    signal grp_convolution1_fix_fu_620_out_r_we0 : STD_LOGIC;
    signal grp_convolution1_fix_fu_620_out_r_d0 : STD_LOGIC_VECTOR (34 downto 0);
    signal grp_convolution2_fix_fu_654_ap_start : STD_LOGIC;
    signal grp_convolution2_fix_fu_654_ap_done : STD_LOGIC;
    signal grp_convolution2_fix_fu_654_ap_idle : STD_LOGIC;
    signal grp_convolution2_fix_fu_654_ap_ready : STD_LOGIC;
    signal grp_convolution2_fix_fu_654_m_0_0_0_0_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_convolution2_fix_fu_654_m_0_0_0_0_ce0 : STD_LOGIC;
    signal grp_convolution2_fix_fu_654_m_0_0_0_0_address1 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_convolution2_fix_fu_654_m_0_0_0_0_ce1 : STD_LOGIC;
    signal grp_convolution2_fix_fu_654_m_0_0_0_0_address2 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_convolution2_fix_fu_654_m_0_0_0_0_ce2 : STD_LOGIC;
    signal grp_convolution2_fix_fu_654_m_0_0_0_0_address3 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_convolution2_fix_fu_654_m_0_0_0_0_ce3 : STD_LOGIC;
    signal grp_convolution2_fix_fu_654_m_0_0_0_0_address4 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_convolution2_fix_fu_654_m_0_0_0_0_ce4 : STD_LOGIC;
    signal grp_convolution2_fix_fu_654_m_0_0_0_0_address5 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_convolution2_fix_fu_654_m_0_0_0_0_ce5 : STD_LOGIC;
    signal grp_convolution2_fix_fu_654_m_0_0_0_0_address6 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_convolution2_fix_fu_654_m_0_0_0_0_ce6 : STD_LOGIC;
    signal grp_convolution2_fix_fu_654_m_0_0_0_0_address7 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_convolution2_fix_fu_654_m_0_0_0_0_ce7 : STD_LOGIC;
    signal grp_convolution2_fix_fu_654_m_0_0_0_0_address8 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_convolution2_fix_fu_654_m_0_0_0_0_ce8 : STD_LOGIC;
    signal grp_convolution2_fix_fu_654_m_0_0_0_0_address9 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_convolution2_fix_fu_654_m_0_0_0_0_ce9 : STD_LOGIC;
    signal grp_convolution2_fix_fu_654_m_0_0_0_0_address10 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_convolution2_fix_fu_654_m_0_0_0_0_ce10 : STD_LOGIC;
    signal grp_convolution2_fix_fu_654_m_0_0_0_0_address11 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_convolution2_fix_fu_654_m_0_0_0_0_ce11 : STD_LOGIC;
    signal grp_convolution2_fix_fu_654_m_0_0_0_0_address12 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_convolution2_fix_fu_654_m_0_0_0_0_ce12 : STD_LOGIC;
    signal grp_convolution2_fix_fu_654_m_0_0_0_0_address13 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_convolution2_fix_fu_654_m_0_0_0_0_ce13 : STD_LOGIC;
    signal grp_convolution2_fix_fu_654_m_0_0_0_0_address14 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_convolution2_fix_fu_654_m_0_0_0_0_ce14 : STD_LOGIC;
    signal grp_convolution2_fix_fu_654_m_0_0_0_0_address15 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_convolution2_fix_fu_654_m_0_0_0_0_ce15 : STD_LOGIC;
    signal grp_convolution2_fix_fu_654_out_0_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_convolution2_fix_fu_654_out_0_ce0 : STD_LOGIC;
    signal grp_convolution2_fix_fu_654_out_0_we0 : STD_LOGIC;
    signal grp_convolution2_fix_fu_654_out_0_d0 : STD_LOGIC_VECTOR (34 downto 0);
    signal grp_master_fix_Pipeline_VITIS_LOOP_498_1_fu_726_ap_start : STD_LOGIC;
    signal grp_master_fix_Pipeline_VITIS_LOOP_498_1_fu_726_ap_done : STD_LOGIC;
    signal grp_master_fix_Pipeline_VITIS_LOOP_498_1_fu_726_ap_idle : STD_LOGIC;
    signal grp_master_fix_Pipeline_VITIS_LOOP_498_1_fu_726_ap_ready : STD_LOGIC;
    signal grp_master_fix_Pipeline_VITIS_LOOP_498_1_fu_726_m_3_04_out : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_master_fix_Pipeline_VITIS_LOOP_498_1_fu_726_m_3_04_out_ap_vld : STD_LOGIC;
    signal grp_master_fix_Pipeline_VITIS_LOOP_498_1_fu_726_m_2_03_out : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_master_fix_Pipeline_VITIS_LOOP_498_1_fu_726_m_2_03_out_ap_vld : STD_LOGIC;
    signal grp_master_fix_Pipeline_VITIS_LOOP_498_1_fu_726_m_3_7_out : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_master_fix_Pipeline_VITIS_LOOP_498_1_fu_726_m_3_7_out_ap_vld : STD_LOGIC;
    signal grp_master_fix_Pipeline_VITIS_LOOP_498_1_fu_726_m_3_10_out : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_master_fix_Pipeline_VITIS_LOOP_498_1_fu_726_m_3_10_out_ap_vld : STD_LOGIC;
    signal grp_master_fix_Pipeline_VITIS_LOOP_509_3_fu_738_ap_start : STD_LOGIC;
    signal grp_master_fix_Pipeline_VITIS_LOOP_509_3_fu_738_ap_done : STD_LOGIC;
    signal grp_master_fix_Pipeline_VITIS_LOOP_509_3_fu_738_ap_idle : STD_LOGIC;
    signal grp_master_fix_Pipeline_VITIS_LOOP_509_3_fu_738_ap_ready : STD_LOGIC;
    signal grp_master_fix_Pipeline_VITIS_LOOP_509_3_fu_738_out_r_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_master_fix_Pipeline_VITIS_LOOP_509_3_fu_738_out_r_ce0 : STD_LOGIC;
    signal grp_master_fix_Pipeline_VITIS_LOOP_509_3_fu_738_out_r_we0 : STD_LOGIC;
    signal grp_master_fix_Pipeline_VITIS_LOOP_509_3_fu_738_out_r_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_master_fix_Pipeline_VITIS_LOOP_509_3_fu_738_grp_fu_753_p_din0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_master_fix_Pipeline_VITIS_LOOP_509_3_fu_738_grp_fu_753_p_din1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_master_fix_Pipeline_VITIS_LOOP_509_3_fu_738_grp_fu_753_p_ce : STD_LOGIC;
    signal i_reg_489 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln430_fu_942_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln422_fu_785_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_42_reg_500 : STD_LOGIC_VECTOR (35 downto 0);
    signal j_reg_511 : STD_LOGIC_VECTOR (1 downto 0);
    signal i_1_reg_522 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal icmp_ln443_fu_991_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal phi_mul_reg_533 : STD_LOGIC_VECTOR (11 downto 0);
    signal phi_urem_reg_544 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_2_reg_555 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln471_fu_1270_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_i_i_i_lcssa_lcssa7_i_reg_566 : STD_LOGIC_VECTOR (35 downto 0);
    signal h_reg_576 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln467_fu_1205_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal lhs_2_reg_587 : STD_LOGIC_VECTOR (35 downto 0);
    signal i_4_reg_599 : STD_LOGIC_VECTOR (4 downto 0);
    signal den2_V_0_0_reg_610 : STD_LOGIC_VECTOR (35 downto 0);
    signal grp_convolution1_fix_fu_620_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal grp_convolution2_fix_fu_654_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal grp_master_fix_Pipeline_VITIS_LOOP_498_1_fu_726_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state39 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state39 : signal is "none";
    signal grp_master_fix_Pipeline_VITIS_LOOP_509_3_fu_738_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state68 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state68 : signal is "none";
    signal zext_ln428_fu_913_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln432_4_fu_937_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln453_fu_1021_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln449_fu_1077_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln464_fu_1123_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1171_6_fu_1255_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1169_fu_1265_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1171_3_fu_1445_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln736_fu_1431_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal d_fu_300 : STD_LOGIC_VECTOR (3 downto 0);
    signal d_1_fu_340 : STD_LOGIC_VECTOR (4 downto 0);
    signal d_2_fu_344 : STD_LOGIC_VECTOR (4 downto 0);
    signal d_3_fu_348 : STD_LOGIC_VECTOR (2 downto 0);
    signal den2_V_0_3_fu_352 : STD_LOGIC_VECTOR (35 downto 0);
    signal den2_V_0_3_1_fu_356 : STD_LOGIC_VECTOR (35 downto 0);
    signal den2_V_0_3_2_fu_360 : STD_LOGIC_VECTOR (35 downto 0);
    signal den2_V_0_3_3_fu_364 : STD_LOGIC_VECTOR (35 downto 0);
    signal sum_fu_368 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state67 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state67 : signal is "none";
    signal i_3_fu_372 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln504_fu_1592_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln427_fu_907_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal icmp_ln448_fu_1048_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal grp_fu_753_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state42 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state42 : signal is "none";
    signal tmp_1_fu_806_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln432_2_fu_814_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln432_1_fu_802_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln432_fu_818_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal mul_fu_852_p0 : STD_LOGIC_VECTOR (6 downto 0);
    signal mul_fu_852_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_cast_cast_fu_844_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln426_fu_858_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_870_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal mul_fu_852_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_4_fu_876_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_13_cast_fu_886_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_870_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln427_fu_903_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln432_3_fu_917_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln432_fu_921_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal shl_ln432_fu_926_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln432_1_fu_932_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln432_fu_954_p1 : STD_LOGIC_VECTOR (35 downto 0);
    signal icmp_ln1548_1_fu_958_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln430_fu_964_p1 : STD_LOGIC_VECTOR (34 downto 0);
    signal select_ln433_fu_968_p3 : STD_LOGIC_VECTOR (34 downto 0);
    signal tmp_3_fu_1008_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln453_fu_1016_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln448_fu_1044_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_6_fu_1054_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_15_cast_fu_1064_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln449_fu_1072_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln453_1_fu_1082_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln453_fu_1088_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1548_fu_1106_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln1171_fu_1129_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_s_fu_1141_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_4_cast_fu_1133_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln1171_fu_1149_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln1171_1_fu_1180_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln1171_fu_1184_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_9_fu_1221_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln467_fu_1217_p1 : STD_LOGIC_VECTOR (34 downto 0);
    signal zext_ln1171_5_fu_1246_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln1171_2_fu_1250_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln1171_4_fu_1242_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln1169_fu_1260_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1288_p1 : STD_LOGIC_VECTOR (34 downto 0);
    signal lhs_3_fu_1298_p3 : STD_LOGIC_VECTOR (54 downto 0);
    signal ret_V_fu_1306_p2 : STD_LOGIC_VECTOR (54 downto 0);
    signal p_Result_10_fu_1321_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_1_fu_1337_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln412_1_fu_1342_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_11_fu_1329_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln412_1_fu_1348_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_5_fu_1311_p4 : STD_LOGIC_VECTOR (35 downto 0);
    signal zext_ln415_1_fu_1354_p1 : STD_LOGIC_VECTOR (35 downto 0);
    signal zext_ln1171_2_fu_1436_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln1171_1_fu_1440_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_1492_p1 : STD_LOGIC_VECTOR (34 downto 0);
    signal lhs_1_fu_1502_p3 : STD_LOGIC_VECTOR (54 downto 0);
    signal sext_ln1245_fu_1510_p1 : STD_LOGIC_VECTOR (54 downto 0);
    signal ret_V_2_fu_1513_p2 : STD_LOGIC_VECTOR (54 downto 0);
    signal p_Result_s_fu_1529_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_fu_1544_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln412_fu_1549_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_12_fu_1537_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln412_fu_1555_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_3_fu_1519_p4 : STD_LOGIC_VECTOR (35 downto 0);
    signal zext_ln415_fu_1561_p1 : STD_LOGIC_VECTOR (35 downto 0);
    signal tmp_5_fu_1602_p5 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_753_ce : STD_LOGIC;
    signal grp_fu_870_ap_start : STD_LOGIC;
    signal grp_fu_870_ap_done : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (67 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal ap_ST_fsm_state14_blk : STD_LOGIC;
    signal ap_ST_fsm_state15_blk : STD_LOGIC;
    signal ap_ST_fsm_state16_blk : STD_LOGIC;
    signal ap_ST_fsm_state17_blk : STD_LOGIC;
    signal ap_ST_fsm_state18_blk : STD_LOGIC;
    signal ap_ST_fsm_state19_blk : STD_LOGIC;
    signal ap_ST_fsm_state20_blk : STD_LOGIC;
    signal ap_ST_fsm_state21_blk : STD_LOGIC;
    signal ap_ST_fsm_state22_blk : STD_LOGIC;
    signal ap_ST_fsm_state23_blk : STD_LOGIC;
    signal ap_ST_fsm_state24_blk : STD_LOGIC;
    signal ap_ST_fsm_state25_blk : STD_LOGIC;
    signal ap_ST_fsm_state26_blk : STD_LOGIC;
    signal ap_ST_fsm_state27_blk : STD_LOGIC;
    signal ap_ST_fsm_state28_blk : STD_LOGIC;
    signal ap_ST_fsm_state29_blk : STD_LOGIC;
    signal ap_ST_fsm_state30_blk : STD_LOGIC;
    signal ap_ST_fsm_state31_blk : STD_LOGIC;
    signal ap_ST_fsm_state32_blk : STD_LOGIC;
    signal ap_ST_fsm_state33_blk : STD_LOGIC;
    signal ap_ST_fsm_state34_blk : STD_LOGIC;
    signal ap_ST_fsm_state35_blk : STD_LOGIC;
    signal ap_ST_fsm_state36_blk : STD_LOGIC;
    signal ap_ST_fsm_state37_blk : STD_LOGIC;
    signal ap_ST_fsm_state38_blk : STD_LOGIC;
    signal ap_ST_fsm_state39_blk : STD_LOGIC;
    signal ap_ST_fsm_state40_blk : STD_LOGIC;
    signal ap_ST_fsm_state41_blk : STD_LOGIC;
    signal ap_ST_fsm_state42_blk : STD_LOGIC;
    signal ap_ST_fsm_state43_blk : STD_LOGIC;
    signal ap_ST_fsm_state44_blk : STD_LOGIC;
    signal ap_ST_fsm_state45_blk : STD_LOGIC;
    signal ap_ST_fsm_state46_blk : STD_LOGIC;
    signal ap_ST_fsm_state47_blk : STD_LOGIC;
    signal ap_ST_fsm_state48_blk : STD_LOGIC;
    signal ap_ST_fsm_state49_blk : STD_LOGIC;
    signal ap_ST_fsm_state50_blk : STD_LOGIC;
    signal ap_ST_fsm_state51_blk : STD_LOGIC;
    signal ap_ST_fsm_state52_blk : STD_LOGIC;
    signal ap_ST_fsm_state53_blk : STD_LOGIC;
    signal ap_ST_fsm_state54_blk : STD_LOGIC;
    signal ap_ST_fsm_state55_blk : STD_LOGIC;
    signal ap_ST_fsm_state56_blk : STD_LOGIC;
    signal ap_ST_fsm_state57_blk : STD_LOGIC;
    signal ap_ST_fsm_state58_blk : STD_LOGIC;
    signal ap_ST_fsm_state59_blk : STD_LOGIC;
    signal ap_ST_fsm_state60_blk : STD_LOGIC;
    signal ap_ST_fsm_state61_blk : STD_LOGIC;
    signal ap_ST_fsm_state62_blk : STD_LOGIC;
    signal ap_ST_fsm_state63_blk : STD_LOGIC;
    signal ap_ST_fsm_state64_blk : STD_LOGIC;
    signal ap_ST_fsm_state65_blk : STD_LOGIC;
    signal ap_ST_fsm_state66_blk : STD_LOGIC;
    signal ap_ST_fsm_state67_blk : STD_LOGIC;
    signal ap_ST_fsm_state68_blk : STD_LOGIC;
    signal grp_fu_1288_p10 : STD_LOGIC_VECTOR (54 downto 0);
    signal grp_fu_1492_p10 : STD_LOGIC_VECTOR (53 downto 0);
    signal mul_fu_852_p00 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component master_fix_convolution1_fix IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        input_r_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        input_r_ce0 : OUT STD_LOGIC;
        input_r_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        out_r_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        out_r_ce0 : OUT STD_LOGIC;
        out_r_we0 : OUT STD_LOGIC;
        out_r_d0 : OUT STD_LOGIC_VECTOR (34 downto 0) );
    end component;


    component master_fix_convolution2_fix IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_0_0_0_0_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        m_0_0_0_0_ce0 : OUT STD_LOGIC;
        m_0_0_0_0_q0 : IN STD_LOGIC_VECTOR (35 downto 0);
        m_0_0_0_0_address1 : OUT STD_LOGIC_VECTOR (8 downto 0);
        m_0_0_0_0_ce1 : OUT STD_LOGIC;
        m_0_0_0_0_q1 : IN STD_LOGIC_VECTOR (35 downto 0);
        m_0_0_0_0_address2 : OUT STD_LOGIC_VECTOR (8 downto 0);
        m_0_0_0_0_ce2 : OUT STD_LOGIC;
        m_0_0_0_0_q2 : IN STD_LOGIC_VECTOR (35 downto 0);
        m_0_0_0_0_address3 : OUT STD_LOGIC_VECTOR (8 downto 0);
        m_0_0_0_0_ce3 : OUT STD_LOGIC;
        m_0_0_0_0_q3 : IN STD_LOGIC_VECTOR (35 downto 0);
        m_0_0_0_0_address4 : OUT STD_LOGIC_VECTOR (8 downto 0);
        m_0_0_0_0_ce4 : OUT STD_LOGIC;
        m_0_0_0_0_q4 : IN STD_LOGIC_VECTOR (35 downto 0);
        m_0_0_0_0_address5 : OUT STD_LOGIC_VECTOR (8 downto 0);
        m_0_0_0_0_ce5 : OUT STD_LOGIC;
        m_0_0_0_0_q5 : IN STD_LOGIC_VECTOR (35 downto 0);
        m_0_0_0_0_address6 : OUT STD_LOGIC_VECTOR (8 downto 0);
        m_0_0_0_0_ce6 : OUT STD_LOGIC;
        m_0_0_0_0_q6 : IN STD_LOGIC_VECTOR (35 downto 0);
        m_0_0_0_0_address7 : OUT STD_LOGIC_VECTOR (8 downto 0);
        m_0_0_0_0_ce7 : OUT STD_LOGIC;
        m_0_0_0_0_q7 : IN STD_LOGIC_VECTOR (35 downto 0);
        m_0_0_0_0_address8 : OUT STD_LOGIC_VECTOR (8 downto 0);
        m_0_0_0_0_ce8 : OUT STD_LOGIC;
        m_0_0_0_0_q8 : IN STD_LOGIC_VECTOR (35 downto 0);
        m_0_0_0_0_address9 : OUT STD_LOGIC_VECTOR (8 downto 0);
        m_0_0_0_0_ce9 : OUT STD_LOGIC;
        m_0_0_0_0_q9 : IN STD_LOGIC_VECTOR (35 downto 0);
        m_0_0_0_0_address10 : OUT STD_LOGIC_VECTOR (8 downto 0);
        m_0_0_0_0_ce10 : OUT STD_LOGIC;
        m_0_0_0_0_q10 : IN STD_LOGIC_VECTOR (35 downto 0);
        m_0_0_0_0_address11 : OUT STD_LOGIC_VECTOR (8 downto 0);
        m_0_0_0_0_ce11 : OUT STD_LOGIC;
        m_0_0_0_0_q11 : IN STD_LOGIC_VECTOR (35 downto 0);
        m_0_0_0_0_address12 : OUT STD_LOGIC_VECTOR (8 downto 0);
        m_0_0_0_0_ce12 : OUT STD_LOGIC;
        m_0_0_0_0_q12 : IN STD_LOGIC_VECTOR (35 downto 0);
        m_0_0_0_0_address13 : OUT STD_LOGIC_VECTOR (8 downto 0);
        m_0_0_0_0_ce13 : OUT STD_LOGIC;
        m_0_0_0_0_q13 : IN STD_LOGIC_VECTOR (35 downto 0);
        m_0_0_0_0_address14 : OUT STD_LOGIC_VECTOR (8 downto 0);
        m_0_0_0_0_ce14 : OUT STD_LOGIC;
        m_0_0_0_0_q14 : IN STD_LOGIC_VECTOR (35 downto 0);
        m_0_0_0_0_address15 : OUT STD_LOGIC_VECTOR (8 downto 0);
        m_0_0_0_0_ce15 : OUT STD_LOGIC;
        m_0_0_0_0_q15 : IN STD_LOGIC_VECTOR (35 downto 0);
        out_0_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        out_0_ce0 : OUT STD_LOGIC;
        out_0_we0 : OUT STD_LOGIC;
        out_0_d0 : OUT STD_LOGIC_VECTOR (34 downto 0) );
    end component;


    component master_fix_master_fix_Pipeline_VITIS_LOOP_498_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        den2_V_0_0_05 : IN STD_LOGIC_VECTOR (35 downto 0);
        den2_V_0_1_06 : IN STD_LOGIC_VECTOR (35 downto 0);
        den2_V_0_2_07 : IN STD_LOGIC_VECTOR (35 downto 0);
        den2_V_0_3_08 : IN STD_LOGIC_VECTOR (35 downto 0);
        m_3_04_out : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_3_04_out_ap_vld : OUT STD_LOGIC;
        m_2_03_out : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_2_03_out_ap_vld : OUT STD_LOGIC;
        m_3_7_out : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_3_7_out_ap_vld : OUT STD_LOGIC;
        m_3_10_out : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_3_10_out_ap_vld : OUT STD_LOGIC );
    end component;


    component master_fix_master_fix_Pipeline_VITIS_LOOP_509_3 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_3_10_reload : IN STD_LOGIC_VECTOR (63 downto 0);
        m_3_7_reload : IN STD_LOGIC_VECTOR (63 downto 0);
        m_2_03_reload : IN STD_LOGIC_VECTOR (63 downto 0);
        m_3_04_reload : IN STD_LOGIC_VECTOR (63 downto 0);
        sum : IN STD_LOGIC_VECTOR (63 downto 0);
        out_r_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
        out_r_ce0 : OUT STD_LOGIC;
        out_r_we0 : OUT STD_LOGIC;
        out_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_753_p_din0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        grp_fu_753_p_din1 : OUT STD_LOGIC_VECTOR (63 downto 0);
        grp_fu_753_p_dout0 : IN STD_LOGIC_VECTOR (63 downto 0);
        grp_fu_753_p_ce : OUT STD_LOGIC );
    end component;


    component master_fix_dadd_64ns_64ns_64_7_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component master_fix_dexp_64ns_64ns_64_18_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component master_fix_mul_7ns_9ns_15_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (6 downto 0);
        din1 : IN STD_LOGIC_VECTOR (8 downto 0);
        dout : OUT STD_LOGIC_VECTOR (14 downto 0) );
    end component;


    component master_fix_urem_7ns_3ns_2_11_seq_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        start : IN STD_LOGIC;
        done : OUT STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (6 downto 0);
        din1 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (1 downto 0) );
    end component;


    component master_fix_mul_21s_35ns_55_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (20 downto 0);
        din1 : IN STD_LOGIC_VECTOR (34 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (54 downto 0) );
    end component;


    component master_fix_mux_42_36_1_1_x IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (35 downto 0);
        din1 : IN STD_LOGIC_VECTOR (35 downto 0);
        din2 : IN STD_LOGIC_VECTOR (35 downto 0);
        din3 : IN STD_LOGIC_VECTOR (35 downto 0);
        din4 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (35 downto 0) );
    end component;


    component master_fix_mul_19s_35ns_54_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (18 downto 0);
        din1 : IN STD_LOGIC_VECTOR (34 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (53 downto 0) );
    end component;


    component master_fix_mux_42_64_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        din2 : IN STD_LOGIC_VECTOR (63 downto 0);
        din3 : IN STD_LOGIC_VECTOR (63 downto 0);
        din4 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component master_fix_thirdBias_f_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (20 downto 0) );
    end component;


    component master_fix_firstDense_f_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (20 downto 0) );
    end component;


    component master_fix_secondDense_f_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (18 downto 0) );
    end component;


    component master_fix_conv1 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (34 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (34 downto 0) );
    end component;


    component master_fix_max1_V_0 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (35 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (35 downto 0);
        address1 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (35 downto 0);
        address2 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce2 : IN STD_LOGIC;
        q2 : OUT STD_LOGIC_VECTOR (35 downto 0);
        address3 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce3 : IN STD_LOGIC;
        q3 : OUT STD_LOGIC_VECTOR (35 downto 0);
        address4 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce4 : IN STD_LOGIC;
        q4 : OUT STD_LOGIC_VECTOR (35 downto 0);
        address5 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce5 : IN STD_LOGIC;
        q5 : OUT STD_LOGIC_VECTOR (35 downto 0);
        address6 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce6 : IN STD_LOGIC;
        q6 : OUT STD_LOGIC_VECTOR (35 downto 0);
        address7 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce7 : IN STD_LOGIC;
        q7 : OUT STD_LOGIC_VECTOR (35 downto 0);
        address8 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce8 : IN STD_LOGIC;
        q8 : OUT STD_LOGIC_VECTOR (35 downto 0);
        address9 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce9 : IN STD_LOGIC;
        q9 : OUT STD_LOGIC_VECTOR (35 downto 0);
        address10 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce10 : IN STD_LOGIC;
        q10 : OUT STD_LOGIC_VECTOR (35 downto 0);
        address11 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce11 : IN STD_LOGIC;
        q11 : OUT STD_LOGIC_VECTOR (35 downto 0);
        address12 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce12 : IN STD_LOGIC;
        q12 : OUT STD_LOGIC_VECTOR (35 downto 0);
        address13 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce13 : IN STD_LOGIC;
        q13 : OUT STD_LOGIC_VECTOR (35 downto 0);
        address14 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce14 : IN STD_LOGIC;
        q14 : OUT STD_LOGIC_VECTOR (35 downto 0);
        address15 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce15 : IN STD_LOGIC;
        q15 : OUT STD_LOGIC_VECTOR (35 downto 0) );
    end component;


    component master_fix_conv2_0 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (34 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (34 downto 0) );
    end component;


    component master_fix_max2_V_0 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (34 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (34 downto 0) );
    end component;


    component master_fix_den1_V_0 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (34 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (34 downto 0) );
    end component;



begin
    thirdBias_f_V_U : component master_fix_thirdBias_f_V
    generic map (
        DataWidth => 21,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => thirdBias_f_V_address0,
        ce0 => thirdBias_f_V_ce0,
        q0 => thirdBias_f_V_q0);

    firstDense_f_V_U : component master_fix_firstDense_f_V
    generic map (
        DataWidth => 21,
        AddressRange => 3584,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => firstDense_f_V_address0,
        ce0 => firstDense_f_V_ce0,
        q0 => firstDense_f_V_q0);

    secondDense_f_V_U : component master_fix_secondDense_f_V
    generic map (
        DataWidth => 19,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => secondDense_f_V_address0,
        ce0 => secondDense_f_V_ce0,
        q0 => secondDense_f_V_q0);

    conv1_U : component master_fix_conv1
    generic map (
        DataWidth => 35,
        AddressRange => 3072,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv1_address0,
        ce0 => conv1_ce0,
        we0 => conv1_we0,
        d0 => grp_convolution1_fix_fu_620_out_r_d0,
        q0 => conv1_q0);

    max1_V_0_U : component master_fix_max1_V_0
    generic map (
        DataWidth => 36,
        AddressRange => 336,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => max1_V_0_address0,
        ce0 => max1_V_0_ce0,
        we0 => max1_V_0_we0,
        d0 => max1_V_0_d0,
        q0 => max1_V_0_q0,
        address1 => grp_convolution2_fix_fu_654_m_0_0_0_0_address1,
        ce1 => max1_V_0_ce1,
        q1 => max1_V_0_q1,
        address2 => grp_convolution2_fix_fu_654_m_0_0_0_0_address2,
        ce2 => max1_V_0_ce2,
        q2 => max1_V_0_q2,
        address3 => grp_convolution2_fix_fu_654_m_0_0_0_0_address3,
        ce3 => max1_V_0_ce3,
        q3 => max1_V_0_q3,
        address4 => grp_convolution2_fix_fu_654_m_0_0_0_0_address4,
        ce4 => max1_V_0_ce4,
        q4 => max1_V_0_q4,
        address5 => grp_convolution2_fix_fu_654_m_0_0_0_0_address5,
        ce5 => max1_V_0_ce5,
        q5 => max1_V_0_q5,
        address6 => grp_convolution2_fix_fu_654_m_0_0_0_0_address6,
        ce6 => max1_V_0_ce6,
        q6 => max1_V_0_q6,
        address7 => grp_convolution2_fix_fu_654_m_0_0_0_0_address7,
        ce7 => max1_V_0_ce7,
        q7 => max1_V_0_q7,
        address8 => grp_convolution2_fix_fu_654_m_0_0_0_0_address8,
        ce8 => max1_V_0_ce8,
        q8 => max1_V_0_q8,
        address9 => grp_convolution2_fix_fu_654_m_0_0_0_0_address9,
        ce9 => max1_V_0_ce9,
        q9 => max1_V_0_q9,
        address10 => grp_convolution2_fix_fu_654_m_0_0_0_0_address10,
        ce10 => max1_V_0_ce10,
        q10 => max1_V_0_q10,
        address11 => grp_convolution2_fix_fu_654_m_0_0_0_0_address11,
        ce11 => max1_V_0_ce11,
        q11 => max1_V_0_q11,
        address12 => grp_convolution2_fix_fu_654_m_0_0_0_0_address12,
        ce12 => max1_V_0_ce12,
        q12 => max1_V_0_q12,
        address13 => grp_convolution2_fix_fu_654_m_0_0_0_0_address13,
        ce13 => max1_V_0_ce13,
        q13 => max1_V_0_q13,
        address14 => grp_convolution2_fix_fu_654_m_0_0_0_0_address14,
        ce14 => max1_V_0_ce14,
        q14 => max1_V_0_q14,
        address15 => grp_convolution2_fix_fu_654_m_0_0_0_0_address15,
        ce15 => max1_V_0_ce15,
        q15 => max1_V_0_q15);

    conv2_0_U : component master_fix_conv2_0
    generic map (
        DataWidth => 35,
        AddressRange => 672,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv2_0_address0,
        ce0 => conv2_0_ce0,
        we0 => conv2_0_we0,
        d0 => grp_convolution2_fix_fu_654_out_0_d0,
        q0 => conv2_0_q0);

    max2_V_0_U : component master_fix_max2_V_0
    generic map (
        DataWidth => 35,
        AddressRange => 224,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => max2_V_0_address0,
        ce0 => max2_V_0_ce0,
        we0 => max2_V_0_we0,
        d0 => max2_V_0_d0,
        q0 => max2_V_0_q0);

    den1_V_0_U : component master_fix_den1_V_0
    generic map (
        DataWidth => 35,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => den1_V_0_address0,
        ce0 => den1_V_0_ce0,
        we0 => den1_V_0_we0,
        d0 => den1_V_0_d0,
        q0 => den1_V_0_q0);

    grp_convolution1_fix_fu_620 : component master_fix_convolution1_fix
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_convolution1_fix_fu_620_ap_start,
        ap_done => grp_convolution1_fix_fu_620_ap_done,
        ap_idle => grp_convolution1_fix_fu_620_ap_idle,
        ap_ready => grp_convolution1_fix_fu_620_ap_ready,
        input_r_address0 => grp_convolution1_fix_fu_620_input_r_address0,
        input_r_ce0 => grp_convolution1_fix_fu_620_input_r_ce0,
        input_r_q0 => input_r_q0,
        out_r_address0 => grp_convolution1_fix_fu_620_out_r_address0,
        out_r_ce0 => grp_convolution1_fix_fu_620_out_r_ce0,
        out_r_we0 => grp_convolution1_fix_fu_620_out_r_we0,
        out_r_d0 => grp_convolution1_fix_fu_620_out_r_d0);

    grp_convolution2_fix_fu_654 : component master_fix_convolution2_fix
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_convolution2_fix_fu_654_ap_start,
        ap_done => grp_convolution2_fix_fu_654_ap_done,
        ap_idle => grp_convolution2_fix_fu_654_ap_idle,
        ap_ready => grp_convolution2_fix_fu_654_ap_ready,
        m_0_0_0_0_address0 => grp_convolution2_fix_fu_654_m_0_0_0_0_address0,
        m_0_0_0_0_ce0 => grp_convolution2_fix_fu_654_m_0_0_0_0_ce0,
        m_0_0_0_0_q0 => max1_V_0_q0,
        m_0_0_0_0_address1 => grp_convolution2_fix_fu_654_m_0_0_0_0_address1,
        m_0_0_0_0_ce1 => grp_convolution2_fix_fu_654_m_0_0_0_0_ce1,
        m_0_0_0_0_q1 => max1_V_0_q1,
        m_0_0_0_0_address2 => grp_convolution2_fix_fu_654_m_0_0_0_0_address2,
        m_0_0_0_0_ce2 => grp_convolution2_fix_fu_654_m_0_0_0_0_ce2,
        m_0_0_0_0_q2 => max1_V_0_q2,
        m_0_0_0_0_address3 => grp_convolution2_fix_fu_654_m_0_0_0_0_address3,
        m_0_0_0_0_ce3 => grp_convolution2_fix_fu_654_m_0_0_0_0_ce3,
        m_0_0_0_0_q3 => max1_V_0_q3,
        m_0_0_0_0_address4 => grp_convolution2_fix_fu_654_m_0_0_0_0_address4,
        m_0_0_0_0_ce4 => grp_convolution2_fix_fu_654_m_0_0_0_0_ce4,
        m_0_0_0_0_q4 => max1_V_0_q4,
        m_0_0_0_0_address5 => grp_convolution2_fix_fu_654_m_0_0_0_0_address5,
        m_0_0_0_0_ce5 => grp_convolution2_fix_fu_654_m_0_0_0_0_ce5,
        m_0_0_0_0_q5 => max1_V_0_q5,
        m_0_0_0_0_address6 => grp_convolution2_fix_fu_654_m_0_0_0_0_address6,
        m_0_0_0_0_ce6 => grp_convolution2_fix_fu_654_m_0_0_0_0_ce6,
        m_0_0_0_0_q6 => max1_V_0_q6,
        m_0_0_0_0_address7 => grp_convolution2_fix_fu_654_m_0_0_0_0_address7,
        m_0_0_0_0_ce7 => grp_convolution2_fix_fu_654_m_0_0_0_0_ce7,
        m_0_0_0_0_q7 => max1_V_0_q7,
        m_0_0_0_0_address8 => grp_convolution2_fix_fu_654_m_0_0_0_0_address8,
        m_0_0_0_0_ce8 => grp_convolution2_fix_fu_654_m_0_0_0_0_ce8,
        m_0_0_0_0_q8 => max1_V_0_q8,
        m_0_0_0_0_address9 => grp_convolution2_fix_fu_654_m_0_0_0_0_address9,
        m_0_0_0_0_ce9 => grp_convolution2_fix_fu_654_m_0_0_0_0_ce9,
        m_0_0_0_0_q9 => max1_V_0_q9,
        m_0_0_0_0_address10 => grp_convolution2_fix_fu_654_m_0_0_0_0_address10,
        m_0_0_0_0_ce10 => grp_convolution2_fix_fu_654_m_0_0_0_0_ce10,
        m_0_0_0_0_q10 => max1_V_0_q10,
        m_0_0_0_0_address11 => grp_convolution2_fix_fu_654_m_0_0_0_0_address11,
        m_0_0_0_0_ce11 => grp_convolution2_fix_fu_654_m_0_0_0_0_ce11,
        m_0_0_0_0_q11 => max1_V_0_q11,
        m_0_0_0_0_address12 => grp_convolution2_fix_fu_654_m_0_0_0_0_address12,
        m_0_0_0_0_ce12 => grp_convolution2_fix_fu_654_m_0_0_0_0_ce12,
        m_0_0_0_0_q12 => max1_V_0_q12,
        m_0_0_0_0_address13 => grp_convolution2_fix_fu_654_m_0_0_0_0_address13,
        m_0_0_0_0_ce13 => grp_convolution2_fix_fu_654_m_0_0_0_0_ce13,
        m_0_0_0_0_q13 => max1_V_0_q13,
        m_0_0_0_0_address14 => grp_convolution2_fix_fu_654_m_0_0_0_0_address14,
        m_0_0_0_0_ce14 => grp_convolution2_fix_fu_654_m_0_0_0_0_ce14,
        m_0_0_0_0_q14 => max1_V_0_q14,
        m_0_0_0_0_address15 => grp_convolution2_fix_fu_654_m_0_0_0_0_address15,
        m_0_0_0_0_ce15 => grp_convolution2_fix_fu_654_m_0_0_0_0_ce15,
        m_0_0_0_0_q15 => max1_V_0_q15,
        out_0_address0 => grp_convolution2_fix_fu_654_out_0_address0,
        out_0_ce0 => grp_convolution2_fix_fu_654_out_0_ce0,
        out_0_we0 => grp_convolution2_fix_fu_654_out_0_we0,
        out_0_d0 => grp_convolution2_fix_fu_654_out_0_d0);

    grp_master_fix_Pipeline_VITIS_LOOP_498_1_fu_726 : component master_fix_master_fix_Pipeline_VITIS_LOOP_498_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_master_fix_Pipeline_VITIS_LOOP_498_1_fu_726_ap_start,
        ap_done => grp_master_fix_Pipeline_VITIS_LOOP_498_1_fu_726_ap_done,
        ap_idle => grp_master_fix_Pipeline_VITIS_LOOP_498_1_fu_726_ap_idle,
        ap_ready => grp_master_fix_Pipeline_VITIS_LOOP_498_1_fu_726_ap_ready,
        den2_V_0_0_05 => den2_V_0_3_fu_352,
        den2_V_0_1_06 => den2_V_0_3_1_fu_356,
        den2_V_0_2_07 => den2_V_0_3_2_fu_360,
        den2_V_0_3_08 => den2_V_0_3_3_fu_364,
        m_3_04_out => grp_master_fix_Pipeline_VITIS_LOOP_498_1_fu_726_m_3_04_out,
        m_3_04_out_ap_vld => grp_master_fix_Pipeline_VITIS_LOOP_498_1_fu_726_m_3_04_out_ap_vld,
        m_2_03_out => grp_master_fix_Pipeline_VITIS_LOOP_498_1_fu_726_m_2_03_out,
        m_2_03_out_ap_vld => grp_master_fix_Pipeline_VITIS_LOOP_498_1_fu_726_m_2_03_out_ap_vld,
        m_3_7_out => grp_master_fix_Pipeline_VITIS_LOOP_498_1_fu_726_m_3_7_out,
        m_3_7_out_ap_vld => grp_master_fix_Pipeline_VITIS_LOOP_498_1_fu_726_m_3_7_out_ap_vld,
        m_3_10_out => grp_master_fix_Pipeline_VITIS_LOOP_498_1_fu_726_m_3_10_out,
        m_3_10_out_ap_vld => grp_master_fix_Pipeline_VITIS_LOOP_498_1_fu_726_m_3_10_out_ap_vld);

    grp_master_fix_Pipeline_VITIS_LOOP_509_3_fu_738 : component master_fix_master_fix_Pipeline_VITIS_LOOP_509_3
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_master_fix_Pipeline_VITIS_LOOP_509_3_fu_738_ap_start,
        ap_done => grp_master_fix_Pipeline_VITIS_LOOP_509_3_fu_738_ap_done,
        ap_idle => grp_master_fix_Pipeline_VITIS_LOOP_509_3_fu_738_ap_idle,
        ap_ready => grp_master_fix_Pipeline_VITIS_LOOP_509_3_fu_738_ap_ready,
        m_3_10_reload => grp_master_fix_Pipeline_VITIS_LOOP_498_1_fu_726_m_3_10_out,
        m_3_7_reload => grp_master_fix_Pipeline_VITIS_LOOP_498_1_fu_726_m_3_7_out,
        m_2_03_reload => grp_master_fix_Pipeline_VITIS_LOOP_498_1_fu_726_m_2_03_out,
        m_3_04_reload => grp_master_fix_Pipeline_VITIS_LOOP_498_1_fu_726_m_3_04_out,
        sum => reg_763,
        out_r_address0 => grp_master_fix_Pipeline_VITIS_LOOP_509_3_fu_738_out_r_address0,
        out_r_ce0 => grp_master_fix_Pipeline_VITIS_LOOP_509_3_fu_738_out_r_ce0,
        out_r_we0 => grp_master_fix_Pipeline_VITIS_LOOP_509_3_fu_738_out_r_we0,
        out_r_d0 => grp_master_fix_Pipeline_VITIS_LOOP_509_3_fu_738_out_r_d0,
        grp_fu_753_p_din0 => grp_master_fix_Pipeline_VITIS_LOOP_509_3_fu_738_grp_fu_753_p_din0,
        grp_fu_753_p_din1 => grp_master_fix_Pipeline_VITIS_LOOP_509_3_fu_738_grp_fu_753_p_din1,
        grp_fu_753_p_dout0 => grp_fu_753_p2,
        grp_fu_753_p_ce => grp_master_fix_Pipeline_VITIS_LOOP_509_3_fu_738_grp_fu_753_p_ce);

    dadd_64ns_64ns_64_7_full_dsp_1_U323 : component master_fix_dadd_64ns_64ns_64_7_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 7,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => sum_fu_368,
        din1 => tmp_7_reg_2055,
        ce => ap_const_logic_1,
        dout => grp_fu_749_p2);

    dexp_64ns_64ns_64_18_full_dsp_1_U324 : component master_fix_dexp_64ns_64ns_64_18_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 18,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_master_fix_Pipeline_VITIS_LOOP_509_3_fu_738_grp_fu_753_p_din0,
        din1 => grp_fu_753_p1,
        ce => grp_fu_753_ce,
        dout => grp_fu_753_p2);

    mul_7ns_9ns_15_1_1_U325 : component master_fix_mul_7ns_9ns_15_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 7,
        din1_WIDTH => 9,
        dout_WIDTH => 15)
    port map (
        din0 => mul_fu_852_p0,
        din1 => mul_fu_852_p1,
        dout => mul_fu_852_p2);

    urem_7ns_3ns_2_11_seq_1_U326 : component master_fix_urem_7ns_3ns_2_11_seq_1
    generic map (
        ID => 1,
        NUM_STAGE => 11,
        din0_WIDTH => 7,
        din1_WIDTH => 3,
        dout_WIDTH => 2)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        start => grp_fu_870_ap_start,
        done => grp_fu_870_ap_done,
        din0 => empty_41_fu_840_p1,
        din1 => grp_fu_870_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_870_p2);

    mul_21s_35ns_55_2_1_U327 : component master_fix_mul_21s_35ns_55_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 21,
        din1_WIDTH => 35,
        dout_WIDTH => 55)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => firstDense_f_V_load_reg_1895,
        din1 => grp_fu_1288_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_1288_p2);

    mux_42_36_1_1_x_U328 : component master_fix_mux_42_36_1_1_x
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 36,
        din1_WIDTH => 36,
        din2_WIDTH => 36,
        din3_WIDTH => 36,
        din4_WIDTH => 2,
        dout_WIDTH => 36)
    port map (
        din0 => ap_const_lv36_FFFF49664,
        din1 => ap_const_lv36_8B87F,
        din2 => ap_const_lv36_FFFF657C5,
        din3 => ap_const_lv36_FFFFE856D,
        din4 => trunc_ln1171_1_fu_1367_p1,
        dout => tmp_2_fu_1391_p6);

    mul_19s_35ns_54_2_1_U329 : component master_fix_mul_19s_35ns_54_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 19,
        din1_WIDTH => 35,
        dout_WIDTH => 54)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => secondDense_f_V_load_reg_2004,
        din1 => grp_fu_1492_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_1492_p2);

    mux_42_64_1_1_U330 : component master_fix_mux_42_64_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        din2_WIDTH => 64,
        din3_WIDTH => 64,
        din4_WIDTH => 2,
        dout_WIDTH => 64)
    port map (
        din0 => grp_master_fix_Pipeline_VITIS_LOOP_498_1_fu_726_m_3_10_out,
        din1 => grp_master_fix_Pipeline_VITIS_LOOP_498_1_fu_726_m_3_7_out,
        din2 => grp_master_fix_Pipeline_VITIS_LOOP_498_1_fu_726_m_2_03_out,
        din3 => grp_master_fix_Pipeline_VITIS_LOOP_498_1_fu_726_m_3_04_out,
        din4 => tmp_5_fu_1602_p5,
        dout => tmp_5_fu_1602_p6);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_convolution1_fix_fu_620_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_convolution1_fix_fu_620_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    grp_convolution1_fix_fu_620_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_convolution1_fix_fu_620_ap_ready = ap_const_logic_1)) then 
                    grp_convolution1_fix_fu_620_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_convolution2_fix_fu_654_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_convolution2_fix_fu_654_ap_start_reg <= ap_const_logic_0;
            else
                if (((icmp_ln422_fu_785_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                    grp_convolution2_fix_fu_654_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_convolution2_fix_fu_654_ap_ready = ap_const_logic_1)) then 
                    grp_convolution2_fix_fu_654_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_master_fix_Pipeline_VITIS_LOOP_498_1_fu_726_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_master_fix_Pipeline_VITIS_LOOP_498_1_fu_726_ap_start_reg <= ap_const_logic_0;
            else
                if (((icmp_ln485_fu_1379_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state33))) then 
                    grp_master_fix_Pipeline_VITIS_LOOP_498_1_fu_726_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_master_fix_Pipeline_VITIS_LOOP_498_1_fu_726_ap_ready = ap_const_logic_1)) then 
                    grp_master_fix_Pipeline_VITIS_LOOP_498_1_fu_726_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_master_fix_Pipeline_VITIS_LOOP_509_3_fu_738_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_master_fix_Pipeline_VITIS_LOOP_509_3_fu_738_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state41) and (icmp_ln504_fu_1586_p2 = ap_const_lv1_1))) then 
                    grp_master_fix_Pipeline_VITIS_LOOP_509_3_fu_738_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_master_fix_Pipeline_VITIS_LOOP_509_3_fu_738_ap_ready = ap_const_logic_1)) then 
                    grp_master_fix_Pipeline_VITIS_LOOP_509_3_fu_738_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    add_i_i_i_lcssa_lcssa7_i_reg_566_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
                add_i_i_i_lcssa_lcssa7_i_reg_566 <= sext_ln467_fu_1176_p1;
            elsif (((icmp_ln471_fu_1270_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state28))) then 
                add_i_i_i_lcssa_lcssa7_i_reg_566 <= lhs_2_reg_587;
            end if; 
        end if;
    end process;

    d_1_fu_340_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln422_fu_785_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                d_1_fu_340 <= ap_const_lv5_0;
            elsif (((icmp_ln445_fu_1026_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state21))) then 
                d_1_fu_340 <= add_ln443_reg_1747;
            end if; 
        end if;
    end process;

    d_2_fu_344_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln443_fu_991_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state20))) then 
                d_2_fu_344 <= ap_const_lv5_0;
            elsif (((icmp_ln467_fu_1205_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state27))) then 
                d_2_fu_344 <= add_ln464_reg_1803;
            end if; 
        end if;
    end process;

    d_3_fu_348_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln464_fu_1159_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state25))) then 
                d_3_fu_348 <= ap_const_lv3_0;
            elsif (((icmp_ln488_fu_1450_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state34))) then 
                d_3_fu_348 <= add_ln485_reg_1937;
            end if; 
        end if;
    end process;

    d_fu_300_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                d_fu_300 <= ap_const_lv4_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and ((icmp_ln426_fu_864_p2 = ap_const_lv1_1) or (icmp_ln424_fu_828_p2 = ap_const_lv1_1)))) then 
                d_fu_300 <= add_ln422_reg_1665;
            end if; 
        end if;
    end process;

    den2_V_0_0_reg_610_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln485_fu_1379_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state33))) then 
                den2_V_0_0_reg_610 <= tmp_2_fu_1391_p6;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
                den2_V_0_0_reg_610 <= add_ln415_fu_1565_p2;
            end if; 
        end if;
    end process;

    empty_42_reg_500_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
                empty_42_reg_500 <= max1_V_0_q0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
                empty_42_reg_500 <= zext_ln430_fu_976_p1;
            end if; 
        end if;
    end process;

    h_reg_576_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln467_fu_1205_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state27))) then 
                h_reg_576 <= ap_const_lv5_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
                h_reg_576 <= add_ln471_reg_1885;
            end if; 
        end if;
    end process;

    i_1_reg_522_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln443_fu_991_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state20))) then 
                i_1_reg_522 <= ap_const_lv6_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
                i_1_reg_522 <= add_ln445_reg_1767;
            end if; 
        end if;
    end process;

    i_2_reg_555_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
                i_2_reg_555 <= ap_const_lv4_0;
            elsif (((icmp_ln471_fu_1270_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state28))) then 
                i_2_reg_555 <= add_ln467_reg_1867;
            end if; 
        end if;
    end process;

    i_3_fu_372_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln485_fu_1379_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state33))) then 
                i_3_fu_372 <= ap_const_lv3_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state41) and (icmp_ln504_fu_1586_p2 = ap_const_lv1_0))) then 
                i_3_fu_372 <= add_ln504_fu_1592_p2;
            end if; 
        end if;
    end process;

    i_4_reg_599_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln485_fu_1379_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state33))) then 
                i_4_reg_599 <= ap_const_lv5_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
                i_4_reg_599 <= add_ln488_reg_1989;
            end if; 
        end if;
    end process;

    i_reg_489_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln422_fu_785_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                i_reg_489 <= ap_const_lv8_0;
            elsif (((icmp_ln430_fu_942_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state17))) then 
                i_reg_489 <= add_ln424_reg_1685;
            end if; 
        end if;
    end process;

    j_reg_511_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
                j_reg_511 <= ap_const_lv2_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
                j_reg_511 <= add_ln430_reg_1724;
            end if; 
        end if;
    end process;

    lhs_2_reg_587_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln467_fu_1205_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state27))) then 
                lhs_2_reg_587 <= add_i_i_i_lcssa_lcssa7_i_reg_566;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
                lhs_2_reg_587 <= add_ln415_1_fu_1358_p2;
            end if; 
        end if;
    end process;

    phi_mul_reg_533_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln443_fu_991_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state20))) then 
                phi_mul_reg_533 <= ap_const_lv12_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
                phi_mul_reg_533 <= next_mul_reg_1772;
            end if; 
        end if;
    end process;

    phi_urem_reg_544_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln443_fu_991_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state20))) then 
                phi_urem_reg_544 <= ap_const_lv6_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
                phi_urem_reg_544 <= select_ln453_reg_1785;
            end if; 
        end if;
    end process;

    sum_fu_368_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln485_fu_1379_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state33))) then 
                sum_fu_368 <= ap_const_lv64_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state67)) then 
                sum_fu_368 <= sum_1_reg_2060;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                add_ln422_reg_1665 <= add_ln422_fu_791_p2;
                    zext_ln422_1_reg_1657(3 downto 0) <= zext_ln422_1_fu_781_p1(3 downto 0);
                    zext_ln422_reg_1652(3 downto 0) <= zext_ln422_fu_777_p1(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                add_ln424_reg_1685 <= add_ln424_fu_834_p2;
                    zext_ln424_reg_1677(10 downto 0) <= zext_ln424_fu_824_p1(10 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln426_fu_864_p2 = ap_const_lv1_0) and (icmp_ln424_fu_828_p2 = ap_const_lv1_0))) then
                add_ln428_reg_1698 <= add_ln428_fu_894_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then
                add_ln430_reg_1724 <= add_ln430_fu_948_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then
                add_ln443_reg_1747 <= add_ln443_fu_997_p2;
                    zext_ln443_1_reg_1739(4 downto 0) <= zext_ln443_1_fu_987_p1(4 downto 0);
                    zext_ln443_reg_1734(4 downto 0) <= zext_ln443_fu_983_p1(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state21)) then
                add_ln445_reg_1767 <= add_ln445_fu_1032_p2;
                conv2_0_addr_reg_1759 <= zext_ln453_fu_1021_p1(10 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state25)) then
                add_ln464_reg_1803 <= add_ln464_fu_1165_p2;
                    sub_ln1171_reg_1795(7 downto 1) <= sub_ln1171_fu_1153_p2(7 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state27)) then
                add_ln467_reg_1867 <= add_ln467_fu_1211_p2;
                    tmp_18_cast_reg_1854(11 downto 4) <= tmp_18_cast_fu_1189_p3(11 downto 4);
                    tmp_8_reg_1859(7 downto 4) <= tmp_8_fu_1197_p3(7 downto 4);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state28)) then
                add_ln471_reg_1885 <= add_ln471_fu_1276_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state33)) then
                add_ln485_reg_1937 <= add_ln485_fu_1385_p2;
                    tmp_16_cast_reg_1929(5 downto 4) <= tmp_16_cast_fu_1371_p3(5 downto 4);
                trunc_ln1171_1_reg_1925 <= trunc_ln1171_1_fu_1367_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state34)) then
                add_ln488_reg_1989 <= add_ln488_fu_1456_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln464_fu_1159_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state25))) then
                den1_V_0_addr_reg_1813 <= zext_ln464_fu_1123_p1(4 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln488_fu_1450_p2 = ap_const_lv1_1) and (trunc_ln1171_1_reg_1925 = ap_const_lv2_1) and (ap_const_logic_1 = ap_CS_fsm_state34))) then
                den2_V_0_3_1_fu_356 <= den2_V_0_0_reg_610;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln488_fu_1450_p2 = ap_const_lv1_1) and (trunc_ln1171_1_reg_1925 = ap_const_lv2_2) and (ap_const_logic_1 = ap_CS_fsm_state34))) then
                den2_V_0_3_2_fu_360 <= den2_V_0_0_reg_610;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln488_fu_1450_p2 = ap_const_lv1_1) and (trunc_ln1171_1_reg_1925 = ap_const_lv2_3) and (ap_const_logic_1 = ap_CS_fsm_state34))) then
                den2_V_0_3_3_fu_364 <= den2_V_0_0_reg_610;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln488_fu_1450_p2 = ap_const_lv1_1) and (trunc_ln1171_1_reg_1925 = ap_const_lv2_0) and (ap_const_logic_1 = ap_CS_fsm_state34))) then
                den2_V_0_3_fu_352 <= den2_V_0_0_reg_610;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state29)) then
                firstDense_f_V_load_reg_1895 <= firstDense_f_V_q0;
                r_V_2_reg_1890 <= max2_V_0_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                max1_V_0_addr_reg_1706 <= zext_ln428_fu_913_p1(9 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln445_fu_1026_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state21))) then
                max2_V_0_addr_reg_1780 <= zext_ln449_fu_1077_p1(8 - 1 downto 0);
                next_mul_reg_1772 <= next_mul_fu_1038_p2;
                select_ln453_reg_1785 <= select_ln453_fu_1094_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state31)) then
                r_V_4_reg_1910 <= grp_fu_1288_p2;
                trunc_ln727_1_reg_1915 <= trunc_ln727_1_fu_1294_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state37)) then
                r_V_5_reg_2019 <= grp_fu_1492_p2;
                trunc_ln727_reg_2025 <= trunc_ln727_fu_1498_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state35)) then
                r_V_reg_1999 <= den1_V_0_q0;
                secondDense_f_V_load_reg_2004 <= secondDense_f_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state60) or ((ap_const_logic_1 = ap_CS_fsm_state41) and (icmp_ln504_fu_1586_p2 = ap_const_lv1_1)))) then
                reg_763 <= sum_fu_368;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state23)) then
                select_ln454_reg_1790 <= select_ln454_fu_1112_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state66)) then
                sum_1_reg_2060 <= grp_fu_749_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state41) and (icmp_ln504_fu_1586_p2 = ap_const_lv1_0))) then
                tmp_5_reg_2050 <= tmp_5_fu_1602_p6;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state59)) then
                tmp_7_reg_2055 <= grp_fu_753_p2;
            end if;
        end if;
    end process;
    zext_ln422_reg_1652(11 downto 4) <= "00000000";
    zext_ln422_1_reg_1657(8 downto 4) <= "00000";
    zext_ln424_reg_1677(11) <= '0';
    zext_ln443_reg_1734(7 downto 5) <= "000";
    zext_ln443_1_reg_1739(9 downto 5) <= "00000";
    sub_ln1171_reg_1795(0) <= '0';
    tmp_18_cast_reg_1854(3 downto 0) <= "0000";
    tmp_8_reg_1859(3 downto 0) <= "0000";
    tmp_16_cast_reg_1929(3 downto 0) <= "0000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state41, icmp_ln504_fu_1586_p2, ap_CS_fsm_state3, ap_CS_fsm_state4, icmp_ln424_fu_828_p2, icmp_ln426_fu_864_p2, ap_CS_fsm_state17, ap_CS_fsm_state20, ap_CS_fsm_state21, icmp_ln445_fu_1026_p2, ap_CS_fsm_state25, icmp_ln464_fu_1159_p2, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state33, icmp_ln485_fu_1379_p2, ap_CS_fsm_state34, icmp_ln488_fu_1450_p2, grp_convolution1_fix_fu_620_ap_done, grp_convolution2_fix_fu_654_ap_done, grp_master_fix_Pipeline_VITIS_LOOP_498_1_fu_726_ap_done, grp_master_fix_Pipeline_VITIS_LOOP_509_3_fu_738_ap_done, icmp_ln430_fu_942_p2, icmp_ln422_fu_785_p2, icmp_ln443_fu_991_p2, icmp_ln471_fu_1270_p2, icmp_ln467_fu_1205_p2, ap_CS_fsm_state2, ap_CS_fsm_state19, ap_CS_fsm_state39, ap_CS_fsm_state68)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((grp_convolution1_fix_fu_620_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln422_fu_785_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state19;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and ((icmp_ln426_fu_864_p2 = ap_const_lv1_1) or (icmp_ln424_fu_828_p2 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                if (((icmp_ln430_fu_942_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state17))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state18;
                end if;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state19 => 
                if (((grp_convolution2_fix_fu_654_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state19))) then
                    ap_NS_fsm <= ap_ST_fsm_state20;
                else
                    ap_NS_fsm <= ap_ST_fsm_state19;
                end if;
            when ap_ST_fsm_state20 => 
                if (((icmp_ln443_fu_991_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state20))) then
                    ap_NS_fsm <= ap_ST_fsm_state25;
                else
                    ap_NS_fsm <= ap_ST_fsm_state21;
                end if;
            when ap_ST_fsm_state21 => 
                if (((icmp_ln445_fu_1026_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state21))) then
                    ap_NS_fsm <= ap_ST_fsm_state20;
                else
                    ap_NS_fsm <= ap_ST_fsm_state22;
                end if;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state25 => 
                if (((icmp_ln464_fu_1159_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state25))) then
                    ap_NS_fsm <= ap_ST_fsm_state33;
                else
                    ap_NS_fsm <= ap_ST_fsm_state26;
                end if;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                if (((icmp_ln467_fu_1205_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state27))) then
                    ap_NS_fsm <= ap_ST_fsm_state25;
                else
                    ap_NS_fsm <= ap_ST_fsm_state28;
                end if;
            when ap_ST_fsm_state28 => 
                if (((icmp_ln471_fu_1270_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state28))) then
                    ap_NS_fsm <= ap_ST_fsm_state27;
                else
                    ap_NS_fsm <= ap_ST_fsm_state29;
                end if;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state33 => 
                if (((icmp_ln485_fu_1379_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state33))) then
                    ap_NS_fsm <= ap_ST_fsm_state34;
                else
                    ap_NS_fsm <= ap_ST_fsm_state39;
                end if;
            when ap_ST_fsm_state34 => 
                if (((icmp_ln488_fu_1450_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state34))) then
                    ap_NS_fsm <= ap_ST_fsm_state33;
                else
                    ap_NS_fsm <= ap_ST_fsm_state35;
                end if;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state39 => 
                if (((grp_master_fix_Pipeline_VITIS_LOOP_498_1_fu_726_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state39))) then
                    ap_NS_fsm <= ap_ST_fsm_state40;
                else
                    ap_NS_fsm <= ap_ST_fsm_state39;
                end if;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state41) and (icmp_ln504_fu_1586_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state68;
                else
                    ap_NS_fsm <= ap_ST_fsm_state42;
                end if;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state54;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state55;
            when ap_ST_fsm_state55 => 
                ap_NS_fsm <= ap_ST_fsm_state56;
            when ap_ST_fsm_state56 => 
                ap_NS_fsm <= ap_ST_fsm_state57;
            when ap_ST_fsm_state57 => 
                ap_NS_fsm <= ap_ST_fsm_state58;
            when ap_ST_fsm_state58 => 
                ap_NS_fsm <= ap_ST_fsm_state59;
            when ap_ST_fsm_state59 => 
                ap_NS_fsm <= ap_ST_fsm_state60;
            when ap_ST_fsm_state60 => 
                ap_NS_fsm <= ap_ST_fsm_state61;
            when ap_ST_fsm_state61 => 
                ap_NS_fsm <= ap_ST_fsm_state62;
            when ap_ST_fsm_state62 => 
                ap_NS_fsm <= ap_ST_fsm_state63;
            when ap_ST_fsm_state63 => 
                ap_NS_fsm <= ap_ST_fsm_state64;
            when ap_ST_fsm_state64 => 
                ap_NS_fsm <= ap_ST_fsm_state65;
            when ap_ST_fsm_state65 => 
                ap_NS_fsm <= ap_ST_fsm_state66;
            when ap_ST_fsm_state66 => 
                ap_NS_fsm <= ap_ST_fsm_state67;
            when ap_ST_fsm_state67 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state68 => 
                if (((grp_master_fix_Pipeline_VITIS_LOOP_509_3_fu_738_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state68))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state68;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln1169_fu_1260_p2 <= std_logic_vector(unsigned(tmp_8_reg_1859) + unsigned(zext_ln1171_4_fu_1242_p1));
    add_ln1171_1_fu_1440_p2 <= std_logic_vector(unsigned(tmp_16_cast_reg_1929) + unsigned(zext_ln1171_2_fu_1436_p1));
    add_ln1171_2_fu_1250_p2 <= std_logic_vector(unsigned(tmp_18_cast_reg_1854) + unsigned(zext_ln1171_5_fu_1246_p1));
    add_ln1171_fu_1184_p2 <= std_logic_vector(unsigned(sub_ln1171_reg_1795) + unsigned(zext_ln1171_1_fu_1180_p1));
    add_ln415_1_fu_1358_p2 <= std_logic_vector(unsigned(p_Val2_5_fu_1311_p4) + unsigned(zext_ln415_1_fu_1354_p1));
    add_ln415_fu_1565_p2 <= std_logic_vector(unsigned(p_Val2_3_fu_1519_p4) + unsigned(zext_ln415_fu_1561_p1));
    add_ln422_fu_791_p2 <= std_logic_vector(unsigned(d_fu_300) + unsigned(ap_const_lv4_1));
    add_ln424_fu_834_p2 <= std_logic_vector(unsigned(i_reg_489) + unsigned(ap_const_lv8_1));
    add_ln426_fu_858_p2 <= std_logic_vector(unsigned(i_cast_cast_fu_844_p1) + unsigned(ap_const_lv8_82));
    add_ln428_fu_894_p2 <= std_logic_vector(unsigned(tmp_13_cast_fu_886_p3) + unsigned(zext_ln422_1_reg_1657));
    add_ln430_fu_948_p2 <= std_logic_vector(unsigned(j_reg_511) + unsigned(ap_const_lv2_1));
    add_ln432_1_fu_932_p2 <= std_logic_vector(unsigned(shl_ln432_fu_926_p2) + unsigned(zext_ln422_reg_1652));
    add_ln432_fu_921_p2 <= std_logic_vector(unsigned(zext_ln424_reg_1677) + unsigned(zext_ln432_3_fu_917_p1));
    add_ln443_fu_997_p2 <= std_logic_vector(unsigned(d_1_fu_340) + unsigned(ap_const_lv5_1));
    add_ln445_fu_1032_p2 <= std_logic_vector(unsigned(i_1_reg_522) + unsigned(ap_const_lv6_1));
    add_ln449_fu_1072_p2 <= std_logic_vector(unsigned(tmp_15_cast_fu_1064_p3) + unsigned(zext_ln443_reg_1734));
    add_ln453_1_fu_1082_p2 <= std_logic_vector(unsigned(phi_urem_reg_544) + unsigned(ap_const_lv6_1));
    add_ln453_fu_1016_p2 <= std_logic_vector(unsigned(tmp_3_fu_1008_p3) + unsigned(zext_ln443_1_reg_1739));
    add_ln464_fu_1165_p2 <= std_logic_vector(unsigned(d_2_fu_344) + unsigned(ap_const_lv5_1));
    add_ln467_fu_1211_p2 <= std_logic_vector(unsigned(i_2_reg_555) + unsigned(ap_const_lv4_1));
    add_ln471_fu_1276_p2 <= std_logic_vector(unsigned(h_reg_576) + unsigned(ap_const_lv5_1));
    add_ln485_fu_1385_p2 <= std_logic_vector(unsigned(d_3_fu_348) + unsigned(ap_const_lv3_1));
    add_ln488_fu_1456_p2 <= std_logic_vector(unsigned(i_4_reg_599) + unsigned(ap_const_lv5_1));
    add_ln504_fu_1592_p2 <= std_logic_vector(unsigned(i_3_fu_372) + unsigned(ap_const_lv3_1));
    and_ln412_1_fu_1348_p2 <= (p_Result_11_fu_1329_p3 and or_ln412_1_fu_1342_p2);
    and_ln412_fu_1555_p2 <= (p_Result_12_fu_1537_p3 and or_ln412_fu_1549_p2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_CS_fsm_state31 <= ap_CS_fsm(30);
    ap_CS_fsm_state32 <= ap_CS_fsm(31);
    ap_CS_fsm_state33 <= ap_CS_fsm(32);
    ap_CS_fsm_state34 <= ap_CS_fsm(33);
    ap_CS_fsm_state35 <= ap_CS_fsm(34);
    ap_CS_fsm_state36 <= ap_CS_fsm(35);
    ap_CS_fsm_state37 <= ap_CS_fsm(36);
    ap_CS_fsm_state38 <= ap_CS_fsm(37);
    ap_CS_fsm_state39 <= ap_CS_fsm(38);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state41 <= ap_CS_fsm(40);
    ap_CS_fsm_state42 <= ap_CS_fsm(41);
    ap_CS_fsm_state59 <= ap_CS_fsm(58);
    ap_CS_fsm_state60 <= ap_CS_fsm(59);
    ap_CS_fsm_state66 <= ap_CS_fsm(65);
    ap_CS_fsm_state67 <= ap_CS_fsm(66);
    ap_CS_fsm_state68 <= ap_CS_fsm(67);
    ap_ST_fsm_state10_blk <= ap_const_logic_0;
    ap_ST_fsm_state11_blk <= ap_const_logic_0;
    ap_ST_fsm_state12_blk <= ap_const_logic_0;
    ap_ST_fsm_state13_blk <= ap_const_logic_0;
    ap_ST_fsm_state14_blk <= ap_const_logic_0;
    ap_ST_fsm_state15_blk <= ap_const_logic_0;
    ap_ST_fsm_state16_blk <= ap_const_logic_0;
    ap_ST_fsm_state17_blk <= ap_const_logic_0;
    ap_ST_fsm_state18_blk <= ap_const_logic_0;

    ap_ST_fsm_state19_blk_assign_proc : process(grp_convolution2_fix_fu_654_ap_done)
    begin
        if ((grp_convolution2_fix_fu_654_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state19_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state19_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state20_blk <= ap_const_logic_0;
    ap_ST_fsm_state21_blk <= ap_const_logic_0;
    ap_ST_fsm_state22_blk <= ap_const_logic_0;
    ap_ST_fsm_state23_blk <= ap_const_logic_0;
    ap_ST_fsm_state24_blk <= ap_const_logic_0;
    ap_ST_fsm_state25_blk <= ap_const_logic_0;
    ap_ST_fsm_state26_blk <= ap_const_logic_0;
    ap_ST_fsm_state27_blk <= ap_const_logic_0;
    ap_ST_fsm_state28_blk <= ap_const_logic_0;
    ap_ST_fsm_state29_blk <= ap_const_logic_0;

    ap_ST_fsm_state2_blk_assign_proc : process(grp_convolution1_fix_fu_620_ap_done)
    begin
        if ((grp_convolution1_fix_fu_620_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state2_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state2_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state30_blk <= ap_const_logic_0;
    ap_ST_fsm_state31_blk <= ap_const_logic_0;
    ap_ST_fsm_state32_blk <= ap_const_logic_0;
    ap_ST_fsm_state33_blk <= ap_const_logic_0;
    ap_ST_fsm_state34_blk <= ap_const_logic_0;
    ap_ST_fsm_state35_blk <= ap_const_logic_0;
    ap_ST_fsm_state36_blk <= ap_const_logic_0;
    ap_ST_fsm_state37_blk <= ap_const_logic_0;
    ap_ST_fsm_state38_blk <= ap_const_logic_0;

    ap_ST_fsm_state39_blk_assign_proc : process(grp_master_fix_Pipeline_VITIS_LOOP_498_1_fu_726_ap_done)
    begin
        if ((grp_master_fix_Pipeline_VITIS_LOOP_498_1_fu_726_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state39_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state39_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state40_blk <= ap_const_logic_0;
    ap_ST_fsm_state41_blk <= ap_const_logic_0;
    ap_ST_fsm_state42_blk <= ap_const_logic_0;
    ap_ST_fsm_state43_blk <= ap_const_logic_0;
    ap_ST_fsm_state44_blk <= ap_const_logic_0;
    ap_ST_fsm_state45_blk <= ap_const_logic_0;
    ap_ST_fsm_state46_blk <= ap_const_logic_0;
    ap_ST_fsm_state47_blk <= ap_const_logic_0;
    ap_ST_fsm_state48_blk <= ap_const_logic_0;
    ap_ST_fsm_state49_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state50_blk <= ap_const_logic_0;
    ap_ST_fsm_state51_blk <= ap_const_logic_0;
    ap_ST_fsm_state52_blk <= ap_const_logic_0;
    ap_ST_fsm_state53_blk <= ap_const_logic_0;
    ap_ST_fsm_state54_blk <= ap_const_logic_0;
    ap_ST_fsm_state55_blk <= ap_const_logic_0;
    ap_ST_fsm_state56_blk <= ap_const_logic_0;
    ap_ST_fsm_state57_blk <= ap_const_logic_0;
    ap_ST_fsm_state58_blk <= ap_const_logic_0;
    ap_ST_fsm_state59_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state60_blk <= ap_const_logic_0;
    ap_ST_fsm_state61_blk <= ap_const_logic_0;
    ap_ST_fsm_state62_blk <= ap_const_logic_0;
    ap_ST_fsm_state63_blk <= ap_const_logic_0;
    ap_ST_fsm_state64_blk <= ap_const_logic_0;
    ap_ST_fsm_state65_blk <= ap_const_logic_0;
    ap_ST_fsm_state66_blk <= ap_const_logic_0;
    ap_ST_fsm_state67_blk <= ap_const_logic_0;

    ap_ST_fsm_state68_blk_assign_proc : process(grp_master_fix_Pipeline_VITIS_LOOP_509_3_fu_738_ap_done)
    begin
        if ((grp_master_fix_Pipeline_VITIS_LOOP_509_3_fu_738_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state68_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state68_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;
    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_done_assign_proc : process(grp_master_fix_Pipeline_VITIS_LOOP_509_3_fu_738_ap_done, ap_CS_fsm_state68)
    begin
        if (((grp_master_fix_Pipeline_VITIS_LOOP_509_3_fu_738_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state68))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(grp_master_fix_Pipeline_VITIS_LOOP_509_3_fu_738_ap_done, ap_CS_fsm_state68)
    begin
        if (((grp_master_fix_Pipeline_VITIS_LOOP_509_3_fu_738_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state68))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    conv1_address0_assign_proc : process(ap_CS_fsm_state17, grp_convolution1_fix_fu_620_out_r_address0, ap_CS_fsm_state2, zext_ln432_4_fu_937_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            conv1_address0 <= zext_ln432_4_fu_937_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            conv1_address0 <= grp_convolution1_fix_fu_620_out_r_address0;
        else 
            conv1_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    conv1_ce0_assign_proc : process(ap_CS_fsm_state17, grp_convolution1_fix_fu_620_out_r_ce0, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            conv1_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            conv1_ce0 <= grp_convolution1_fix_fu_620_out_r_ce0;
        else 
            conv1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    conv1_we0_assign_proc : process(grp_convolution1_fix_fu_620_out_r_we0, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            conv1_we0 <= grp_convolution1_fix_fu_620_out_r_we0;
        else 
            conv1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    conv2_0_address0_assign_proc : process(conv2_0_addr_reg_1759, grp_convolution2_fix_fu_654_out_0_address0, ap_CS_fsm_state19, ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            conv2_0_address0 <= conv2_0_addr_reg_1759;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            conv2_0_address0 <= grp_convolution2_fix_fu_654_out_0_address0;
        else 
            conv2_0_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    conv2_0_ce0_assign_proc : process(grp_convolution2_fix_fu_654_out_0_ce0, ap_CS_fsm_state19, ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            conv2_0_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            conv2_0_ce0 <= grp_convolution2_fix_fu_654_out_0_ce0;
        else 
            conv2_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    conv2_0_we0_assign_proc : process(grp_convolution2_fix_fu_654_out_0_we0, ap_CS_fsm_state19)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            conv2_0_we0 <= grp_convolution2_fix_fu_654_out_0_we0;
        else 
            conv2_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    den1_V_0_address0_assign_proc : process(den1_V_0_addr_reg_1813, ap_CS_fsm_state27, ap_CS_fsm_state34, zext_ln736_fu_1431_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            den1_V_0_address0 <= zext_ln736_fu_1431_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            den1_V_0_address0 <= den1_V_0_addr_reg_1813;
        else 
            den1_V_0_address0 <= "XXXX";
        end if; 
    end process;


    den1_V_0_ce0_assign_proc : process(ap_CS_fsm_state27, ap_CS_fsm_state34)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            den1_V_0_ce0 <= ap_const_logic_1;
        else 
            den1_V_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    den1_V_0_d0 <= 
        ap_const_lv35_0 when (tmp_9_fu_1221_p3(0) = '1') else 
        trunc_ln467_fu_1217_p1;

    den1_V_0_we0_assign_proc : process(ap_CS_fsm_state27, icmp_ln467_fu_1205_p2)
    begin
        if (((icmp_ln467_fu_1205_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            den1_V_0_we0 <= ap_const_logic_1;
        else 
            den1_V_0_we0 <= ap_const_logic_0;
        end if; 
    end process;

    empty_41_fu_840_p1 <= i_reg_489(7 - 1 downto 0);
    firstDense_f_V_address0 <= zext_ln1171_6_fu_1255_p1(12 - 1 downto 0);

    firstDense_f_V_ce0_assign_proc : process(ap_CS_fsm_state28)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            firstDense_f_V_ce0 <= ap_const_logic_1;
        else 
            firstDense_f_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_convolution1_fix_fu_620_ap_start <= grp_convolution1_fix_fu_620_ap_start_reg;
    grp_convolution2_fix_fu_654_ap_start <= grp_convolution2_fix_fu_654_ap_start_reg;
    grp_fu_1288_p1 <= grp_fu_1288_p10(35 - 1 downto 0);
    grp_fu_1288_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_V_2_reg_1890),55));
    grp_fu_1492_p1 <= grp_fu_1492_p10(35 - 1 downto 0);
    grp_fu_1492_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_V_reg_1999),54));

    grp_fu_753_ce_assign_proc : process(ap_CS_fsm_state41, grp_master_fix_Pipeline_VITIS_LOOP_509_3_fu_738_grp_fu_753_p_ce, ap_CS_fsm_state68)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state68))) then 
            grp_fu_753_ce <= grp_master_fix_Pipeline_VITIS_LOOP_509_3_fu_738_grp_fu_753_p_ce;
        else 
            grp_fu_753_ce <= ap_const_logic_1;
        end if; 
    end process;


    grp_fu_753_p1_assign_proc : process(ap_CS_fsm_state41, tmp_5_reg_2050, grp_master_fix_Pipeline_VITIS_LOOP_509_3_fu_738_grp_fu_753_p_din1, ap_CS_fsm_state68, ap_CS_fsm_state42)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state68))) then 
            grp_fu_753_p1 <= grp_master_fix_Pipeline_VITIS_LOOP_509_3_fu_738_grp_fu_753_p_din1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            grp_fu_753_p1 <= tmp_5_reg_2050;
        else 
            grp_fu_753_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_870_ap_start_assign_proc : process(ap_CS_fsm_state4, icmp_ln424_fu_828_p2, icmp_ln426_fu_864_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln426_fu_864_p2 = ap_const_lv1_0) and (icmp_ln424_fu_828_p2 = ap_const_lv1_0))) then 
            grp_fu_870_ap_start <= ap_const_logic_1;
        else 
            grp_fu_870_ap_start <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_870_p1 <= ap_const_lv7_3(3 - 1 downto 0);
    grp_master_fix_Pipeline_VITIS_LOOP_498_1_fu_726_ap_start <= grp_master_fix_Pipeline_VITIS_LOOP_498_1_fu_726_ap_start_reg;
    grp_master_fix_Pipeline_VITIS_LOOP_509_3_fu_738_ap_start <= grp_master_fix_Pipeline_VITIS_LOOP_509_3_fu_738_ap_start_reg;
    i_cast_cast_fu_844_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_41_fu_840_p1),8));
    icmp_ln1548_1_fu_958_p2 <= "1" when (signed(empty_42_reg_500) < signed(zext_ln432_fu_954_p1)) else "0";
    icmp_ln1548_fu_1106_p2 <= "1" when (unsigned(max2_V_0_q0) < unsigned(conv2_0_q0)) else "0";
    icmp_ln422_fu_785_p2 <= "1" when (d_fu_300 = ap_const_lv4_8) else "0";
    icmp_ln424_fu_828_p2 <= "1" when (i_reg_489 = ap_const_lv8_80) else "0";
    icmp_ln426_fu_864_p2 <= "1" when (unsigned(add_ln426_fu_858_p2) < unsigned(ap_const_lv8_3)) else "0";
    icmp_ln427_fu_907_p2 <= "1" when (trunc_ln427_fu_903_p1 = ap_const_lv2_0) else "0";
    icmp_ln430_fu_942_p2 <= "1" when (j_reg_511 = ap_const_lv2_3) else "0";
    icmp_ln443_fu_991_p2 <= "1" when (d_1_fu_340 = ap_const_lv5_10) else "0";
    icmp_ln445_fu_1026_p2 <= "1" when (i_1_reg_522 = ap_const_lv6_2A) else "0";
    icmp_ln448_fu_1048_p2 <= "1" when (trunc_ln448_fu_1044_p1 = ap_const_lv2_0) else "0";
    icmp_ln453_fu_1088_p2 <= "1" when (unsigned(add_ln453_1_fu_1082_p2) < unsigned(ap_const_lv6_3)) else "0";
    icmp_ln464_fu_1159_p2 <= "1" when (d_2_fu_344 = ap_const_lv5_10) else "0";
    icmp_ln467_fu_1205_p2 <= "1" when (i_2_reg_555 = ap_const_lv4_E) else "0";
    icmp_ln471_fu_1270_p2 <= "1" when (h_reg_576 = ap_const_lv5_10) else "0";
    icmp_ln485_fu_1379_p2 <= "1" when (d_3_fu_348 = ap_const_lv3_4) else "0";
    icmp_ln488_fu_1450_p2 <= "1" when (i_4_reg_599 = ap_const_lv5_10) else "0";
    icmp_ln504_fu_1586_p2 <= "1" when (i_3_fu_372 = ap_const_lv3_4) else "0";
    input_r_address0 <= grp_convolution1_fix_fu_620_input_r_address0;
    input_r_ce0 <= grp_convolution1_fix_fu_620_input_r_ce0;
    lhs_1_fu_1502_p3 <= (den2_V_0_0_reg_610 & ap_const_lv19_0);
    lhs_3_fu_1298_p3 <= (lhs_2_reg_587 & ap_const_lv19_0);

    max1_V_0_address0_assign_proc : process(max1_V_0_addr_reg_1706, ap_CS_fsm_state14, ap_CS_fsm_state17, grp_convolution2_fix_fu_654_m_0_0_0_0_address0, ap_CS_fsm_state19, zext_ln428_fu_913_p1, ap_CS_fsm_state15)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state15))) then 
            max1_V_0_address0 <= max1_V_0_addr_reg_1706;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            max1_V_0_address0 <= zext_ln428_fu_913_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            max1_V_0_address0 <= grp_convolution2_fix_fu_654_m_0_0_0_0_address0;
        else 
            max1_V_0_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    max1_V_0_ce0_assign_proc : process(ap_CS_fsm_state14, ap_CS_fsm_state17, grp_convolution2_fix_fu_654_m_0_0_0_0_ce0, ap_CS_fsm_state19, ap_CS_fsm_state15)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state15))) then 
            max1_V_0_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            max1_V_0_ce0 <= grp_convolution2_fix_fu_654_m_0_0_0_0_ce0;
        else 
            max1_V_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    max1_V_0_ce1_assign_proc : process(grp_convolution2_fix_fu_654_m_0_0_0_0_ce1, ap_CS_fsm_state19)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            max1_V_0_ce1 <= grp_convolution2_fix_fu_654_m_0_0_0_0_ce1;
        else 
            max1_V_0_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    max1_V_0_ce10_assign_proc : process(grp_convolution2_fix_fu_654_m_0_0_0_0_ce10, ap_CS_fsm_state19)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            max1_V_0_ce10 <= grp_convolution2_fix_fu_654_m_0_0_0_0_ce10;
        else 
            max1_V_0_ce10 <= ap_const_logic_0;
        end if; 
    end process;


    max1_V_0_ce11_assign_proc : process(grp_convolution2_fix_fu_654_m_0_0_0_0_ce11, ap_CS_fsm_state19)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            max1_V_0_ce11 <= grp_convolution2_fix_fu_654_m_0_0_0_0_ce11;
        else 
            max1_V_0_ce11 <= ap_const_logic_0;
        end if; 
    end process;


    max1_V_0_ce12_assign_proc : process(grp_convolution2_fix_fu_654_m_0_0_0_0_ce12, ap_CS_fsm_state19)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            max1_V_0_ce12 <= grp_convolution2_fix_fu_654_m_0_0_0_0_ce12;
        else 
            max1_V_0_ce12 <= ap_const_logic_0;
        end if; 
    end process;


    max1_V_0_ce13_assign_proc : process(grp_convolution2_fix_fu_654_m_0_0_0_0_ce13, ap_CS_fsm_state19)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            max1_V_0_ce13 <= grp_convolution2_fix_fu_654_m_0_0_0_0_ce13;
        else 
            max1_V_0_ce13 <= ap_const_logic_0;
        end if; 
    end process;


    max1_V_0_ce14_assign_proc : process(grp_convolution2_fix_fu_654_m_0_0_0_0_ce14, ap_CS_fsm_state19)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            max1_V_0_ce14 <= grp_convolution2_fix_fu_654_m_0_0_0_0_ce14;
        else 
            max1_V_0_ce14 <= ap_const_logic_0;
        end if; 
    end process;


    max1_V_0_ce15_assign_proc : process(grp_convolution2_fix_fu_654_m_0_0_0_0_ce15, ap_CS_fsm_state19)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            max1_V_0_ce15 <= grp_convolution2_fix_fu_654_m_0_0_0_0_ce15;
        else 
            max1_V_0_ce15 <= ap_const_logic_0;
        end if; 
    end process;


    max1_V_0_ce2_assign_proc : process(grp_convolution2_fix_fu_654_m_0_0_0_0_ce2, ap_CS_fsm_state19)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            max1_V_0_ce2 <= grp_convolution2_fix_fu_654_m_0_0_0_0_ce2;
        else 
            max1_V_0_ce2 <= ap_const_logic_0;
        end if; 
    end process;


    max1_V_0_ce3_assign_proc : process(grp_convolution2_fix_fu_654_m_0_0_0_0_ce3, ap_CS_fsm_state19)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            max1_V_0_ce3 <= grp_convolution2_fix_fu_654_m_0_0_0_0_ce3;
        else 
            max1_V_0_ce3 <= ap_const_logic_0;
        end if; 
    end process;


    max1_V_0_ce4_assign_proc : process(grp_convolution2_fix_fu_654_m_0_0_0_0_ce4, ap_CS_fsm_state19)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            max1_V_0_ce4 <= grp_convolution2_fix_fu_654_m_0_0_0_0_ce4;
        else 
            max1_V_0_ce4 <= ap_const_logic_0;
        end if; 
    end process;


    max1_V_0_ce5_assign_proc : process(grp_convolution2_fix_fu_654_m_0_0_0_0_ce5, ap_CS_fsm_state19)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            max1_V_0_ce5 <= grp_convolution2_fix_fu_654_m_0_0_0_0_ce5;
        else 
            max1_V_0_ce5 <= ap_const_logic_0;
        end if; 
    end process;


    max1_V_0_ce6_assign_proc : process(grp_convolution2_fix_fu_654_m_0_0_0_0_ce6, ap_CS_fsm_state19)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            max1_V_0_ce6 <= grp_convolution2_fix_fu_654_m_0_0_0_0_ce6;
        else 
            max1_V_0_ce6 <= ap_const_logic_0;
        end if; 
    end process;


    max1_V_0_ce7_assign_proc : process(grp_convolution2_fix_fu_654_m_0_0_0_0_ce7, ap_CS_fsm_state19)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            max1_V_0_ce7 <= grp_convolution2_fix_fu_654_m_0_0_0_0_ce7;
        else 
            max1_V_0_ce7 <= ap_const_logic_0;
        end if; 
    end process;


    max1_V_0_ce8_assign_proc : process(grp_convolution2_fix_fu_654_m_0_0_0_0_ce8, ap_CS_fsm_state19)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            max1_V_0_ce8 <= grp_convolution2_fix_fu_654_m_0_0_0_0_ce8;
        else 
            max1_V_0_ce8 <= ap_const_logic_0;
        end if; 
    end process;


    max1_V_0_ce9_assign_proc : process(grp_convolution2_fix_fu_654_m_0_0_0_0_ce9, ap_CS_fsm_state19)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            max1_V_0_ce9 <= grp_convolution2_fix_fu_654_m_0_0_0_0_ce9;
        else 
            max1_V_0_ce9 <= ap_const_logic_0;
        end if; 
    end process;


    max1_V_0_d0_assign_proc : process(ap_CS_fsm_state14, ap_CS_fsm_state17, empty_42_reg_500)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            max1_V_0_d0 <= empty_42_reg_500;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            max1_V_0_d0 <= ap_const_lv36_0;
        else 
            max1_V_0_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    max1_V_0_we0_assign_proc : process(ap_CS_fsm_state14, ap_CS_fsm_state17, icmp_ln430_fu_942_p2, icmp_ln427_fu_907_p2)
    begin
        if ((((icmp_ln430_fu_942_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state17)) or ((ap_const_logic_1 = ap_CS_fsm_state14) and (icmp_ln427_fu_907_p2 = ap_const_lv1_1)))) then 
            max1_V_0_we0 <= ap_const_logic_1;
        else 
            max1_V_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    max2_V_0_address0_assign_proc : process(ap_CS_fsm_state21, max2_V_0_addr_reg_1780, ap_CS_fsm_state28, ap_CS_fsm_state24, zext_ln449_fu_1077_p1, zext_ln1169_fu_1265_p1, ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            max2_V_0_address0 <= zext_ln1169_fu_1265_p1(8 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            max2_V_0_address0 <= max2_V_0_addr_reg_1780;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            max2_V_0_address0 <= zext_ln449_fu_1077_p1(8 - 1 downto 0);
        else 
            max2_V_0_address0 <= "XXXXXXXX";
        end if; 
    end process;


    max2_V_0_ce0_assign_proc : process(ap_CS_fsm_state21, ap_CS_fsm_state28, ap_CS_fsm_state24, ap_CS_fsm_state22)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            max2_V_0_ce0 <= ap_const_logic_1;
        else 
            max2_V_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    max2_V_0_d0_assign_proc : process(ap_CS_fsm_state21, select_ln454_reg_1790, ap_CS_fsm_state24)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            max2_V_0_d0 <= select_ln454_reg_1790;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            max2_V_0_d0 <= ap_const_lv35_0;
        else 
            max2_V_0_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    max2_V_0_we0_assign_proc : process(ap_CS_fsm_state21, icmp_ln445_fu_1026_p2, ap_CS_fsm_state24, icmp_ln448_fu_1048_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state24) or ((icmp_ln445_fu_1026_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state21) and (icmp_ln448_fu_1048_p2 = ap_const_lv1_1)))) then 
            max2_V_0_we0 <= ap_const_logic_1;
        else 
            max2_V_0_we0 <= ap_const_logic_0;
        end if; 
    end process;

    mul_fu_852_p0 <= mul_fu_852_p00(7 - 1 downto 0);
    mul_fu_852_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_41_fu_840_p1),15));
    mul_fu_852_p1 <= ap_const_lv15_AB(9 - 1 downto 0);
    next_mul_fu_1038_p2 <= std_logic_vector(unsigned(phi_mul_reg_533) + unsigned(ap_const_lv12_56));
    or_ln412_1_fu_1342_p2 <= (r_1_fu_1337_p2 or p_Result_10_fu_1321_p3);
    or_ln412_fu_1549_p2 <= (r_fu_1544_p2 or p_Result_s_fu_1529_p3);
    out_r_address0 <= grp_master_fix_Pipeline_VITIS_LOOP_509_3_fu_738_out_r_address0;
    out_r_ce0 <= grp_master_fix_Pipeline_VITIS_LOOP_509_3_fu_738_out_r_ce0;
    out_r_d0 <= grp_master_fix_Pipeline_VITIS_LOOP_509_3_fu_738_out_r_d0;
    out_r_we0 <= grp_master_fix_Pipeline_VITIS_LOOP_509_3_fu_738_out_r_we0;
    p_Result_10_fu_1321_p3 <= ret_V_fu_1306_p2(19 downto 19);
    p_Result_11_fu_1329_p3 <= ret_V_fu_1306_p2(18 downto 18);
    p_Result_12_fu_1537_p3 <= r_V_5_reg_2019(18 downto 18);
    p_Result_s_fu_1529_p3 <= ret_V_2_fu_1513_p2(19 downto 19);
    p_Val2_3_fu_1519_p4 <= ret_V_2_fu_1513_p2(54 downto 19);
    p_Val2_5_fu_1311_p4 <= ret_V_fu_1306_p2(54 downto 19);
    r_1_fu_1337_p2 <= "0" when (trunc_ln727_1_reg_1915 = ap_const_lv18_0) else "1";
    r_fu_1544_p2 <= "0" when (trunc_ln727_reg_2025 = ap_const_lv18_0) else "1";
    ret_V_2_fu_1513_p2 <= std_logic_vector(unsigned(lhs_1_fu_1502_p3) + unsigned(sext_ln1245_fu_1510_p1));
    ret_V_fu_1306_p2 <= std_logic_vector(unsigned(lhs_3_fu_1298_p3) + unsigned(r_V_4_reg_1910));
    secondDense_f_V_address0 <= zext_ln1171_3_fu_1445_p1(6 - 1 downto 0);

    secondDense_f_V_ce0_assign_proc : process(ap_CS_fsm_state34)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            secondDense_f_V_ce0 <= ap_const_logic_1;
        else 
            secondDense_f_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln433_fu_968_p3 <= 
        conv1_q0 when (icmp_ln1548_1_fu_958_p2(0) = '1') else 
        trunc_ln430_fu_964_p1;
    select_ln453_fu_1094_p3 <= 
        add_ln453_1_fu_1082_p2 when (icmp_ln453_fu_1088_p2(0) = '1') else 
        ap_const_lv6_0;
    select_ln454_fu_1112_p3 <= 
        conv2_0_q0 when (icmp_ln1548_fu_1106_p2(0) = '1') else 
        max2_V_0_q0;
        sext_ln1245_fu_1510_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_5_reg_2019),55));

        sext_ln467_fu_1176_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(thirdBias_f_V_q0),36));

    shl_ln432_fu_926_p2 <= std_logic_vector(shift_left(unsigned(add_ln432_fu_921_p2),to_integer(unsigned('0' & ap_const_lv12_3(12-1 downto 0)))));
    sub_ln1171_fu_1153_p2 <= std_logic_vector(unsigned(tmp_4_cast_fu_1133_p3) - unsigned(zext_ln1171_fu_1149_p1));
    sub_ln432_fu_818_p2 <= std_logic_vector(unsigned(zext_ln432_2_fu_814_p1) - unsigned(zext_ln432_1_fu_802_p1));
    thirdBias_f_V_address0 <= zext_ln464_fu_1123_p1(4 - 1 downto 0);

    thirdBias_f_V_ce0_assign_proc : process(ap_CS_fsm_state25)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            thirdBias_f_V_ce0 <= ap_const_logic_1;
        else 
            thirdBias_f_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_13_cast_fu_886_p3 <= (tmp_4_fu_876_p4 & ap_const_lv3_0);
    tmp_15_cast_fu_1064_p3 <= (tmp_6_fu_1054_p4 & ap_const_lv4_0);
    tmp_16_cast_fu_1371_p3 <= (trunc_ln1171_1_fu_1367_p1 & ap_const_lv4_0);
    tmp_18_cast_fu_1189_p3 <= (add_ln1171_fu_1184_p2 & ap_const_lv4_0);
    tmp_1_fu_806_p3 <= (i_reg_489 & ap_const_lv2_0);
    tmp_3_fu_1008_p3 <= (i_1_reg_522 & ap_const_lv4_0);
    tmp_4_cast_fu_1133_p3 <= (trunc_ln1171_fu_1129_p1 & ap_const_lv4_0);
    tmp_4_fu_876_p4 <= mul_fu_852_p2(14 downto 9);
    tmp_5_fu_1602_p5 <= i_3_fu_372(2 - 1 downto 0);
    tmp_6_fu_1054_p4 <= phi_mul_reg_533(11 downto 8);
    tmp_8_fu_1197_p3 <= (i_2_reg_555 & ap_const_lv4_0);
    tmp_9_fu_1221_p3 <= add_i_i_i_lcssa_lcssa7_i_reg_566(35 downto 35);
    tmp_s_fu_1141_p3 <= (d_2_fu_344 & ap_const_lv1_0);
    trunc_ln1171_1_fu_1367_p1 <= d_3_fu_348(2 - 1 downto 0);
    trunc_ln1171_fu_1129_p1 <= d_2_fu_344(4 - 1 downto 0);
    trunc_ln427_fu_903_p1 <= grp_fu_870_p2(2 - 1 downto 0);
    trunc_ln430_fu_964_p1 <= empty_42_reg_500(35 - 1 downto 0);
    trunc_ln448_fu_1044_p1 <= phi_urem_reg_544(2 - 1 downto 0);
    trunc_ln467_fu_1217_p1 <= add_i_i_i_lcssa_lcssa7_i_reg_566(35 - 1 downto 0);
    trunc_ln727_1_fu_1294_p1 <= grp_fu_1288_p2(18 - 1 downto 0);
    trunc_ln727_fu_1498_p1 <= grp_fu_1492_p2(18 - 1 downto 0);
    zext_ln1169_fu_1265_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1169_fu_1260_p2),64));
    zext_ln1171_1_fu_1180_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_2_reg_555),8));
    zext_ln1171_2_fu_1436_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_4_reg_599),6));
    zext_ln1171_3_fu_1445_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1171_1_fu_1440_p2),64));
    zext_ln1171_4_fu_1242_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(h_reg_576),8));
    zext_ln1171_5_fu_1246_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(h_reg_576),12));
    zext_ln1171_6_fu_1255_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1171_2_fu_1250_p2),64));
    zext_ln1171_fu_1149_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_1141_p3),8));
    zext_ln415_1_fu_1354_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln412_1_fu_1348_p2),36));
    zext_ln415_fu_1561_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln412_fu_1555_p2),36));
    zext_ln422_1_fu_781_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(d_fu_300),9));
    zext_ln422_fu_777_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(d_fu_300),12));
    zext_ln424_fu_824_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln432_fu_818_p2),12));
    zext_ln428_fu_913_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln428_reg_1698),64));
    zext_ln430_fu_976_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln433_fu_968_p3),36));
    zext_ln432_1_fu_802_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_489),11));
    zext_ln432_2_fu_814_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_fu_806_p3),11));
    zext_ln432_3_fu_917_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_511),12));
    zext_ln432_4_fu_937_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln432_1_fu_932_p2),64));
    zext_ln432_fu_954_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(conv1_q0),36));
    zext_ln443_1_fu_987_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(d_1_fu_340),10));
    zext_ln443_fu_983_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(d_1_fu_340),8));
    zext_ln449_fu_1077_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln449_fu_1072_p2),64));
    zext_ln453_fu_1021_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln453_fu_1016_p2),64));
    zext_ln464_fu_1123_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(d_2_fu_344),64));
    zext_ln736_fu_1431_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_4_reg_599),64));
end behav;
