-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
-- Version: 2021.1
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity master_fix_master_fix_Pipeline_VITIS_LOOP_376_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    den2_V_0_0_05 : IN STD_LOGIC_VECTOR (35 downto 0);
    den2_V_0_1_06 : IN STD_LOGIC_VECTOR (35 downto 0);
    den2_V_0_2_07 : IN STD_LOGIC_VECTOR (35 downto 0);
    den2_V_0_3_08 : IN STD_LOGIC_VECTOR (35 downto 0);
    m_3_04_out : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_3_04_out_ap_vld : OUT STD_LOGIC;
    m_2_03_out : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_2_03_out_ap_vld : OUT STD_LOGIC;
    m_3_7_out : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_3_7_out_ap_vld : OUT STD_LOGIC;
    m_3_10_out : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_3_10_out_ap_vld : OUT STD_LOGIC );
end;


architecture behav of master_fix_master_fix_Pipeline_VITIS_LOOP_376_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv36_0 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000000000000000";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv28_FFFFFFF : STD_LOGIC_VECTOR (27 downto 0) := "1111111111111111111111111111";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_FFFFFFCB : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111001011";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv6_1A : STD_LOGIC_VECTOR (5 downto 0) := "011010";
    constant ap_const_lv36_FFFFFFFFF : STD_LOGIC_VECTOR (35 downto 0) := "111111111111111111111111111111111111";
    constant ap_const_lv32_FFFFFFCA : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111001010";
    constant ap_const_lv32_36 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110110";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv11_3FF : STD_LOGIC_VECTOR (10 downto 0) := "01111111111";
    constant ap_const_lv11_3FE : STD_LOGIC_VECTOR (10 downto 0) := "01111111110";
    constant ap_const_lv11_11 : STD_LOGIC_VECTOR (10 downto 0) := "00000010001";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln376_fu_188_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln376_reg_669 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln376_reg_669_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln376_reg_669_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln938_fu_200_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln938_reg_673 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln938_reg_673_pp0_iter1_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln938_reg_673_pp0_iter2_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln938_reg_673_pp0_iter3_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln938_fu_218_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln938_reg_680 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln938_reg_680_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln938_reg_680_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_6_fu_224_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_6_reg_685 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_6_reg_685_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_6_reg_685_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_V_2_fu_238_p3 : STD_LOGIC_VECTOR (35 downto 0);
    signal tmp_V_2_reg_690 : STD_LOGIC_VECTOR (35 downto 0);
    signal tmp_V_2_reg_690_pp0_iter1_reg : STD_LOGIC_VECTOR (35 downto 0);
    signal p_Result_s_fu_246_p4 : STD_LOGIC_VECTOR (35 downto 0);
    signal p_Result_s_reg_697 : STD_LOGIC_VECTOR (35 downto 0);
    signal sub_ln947_fu_280_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln947_reg_702 : STD_LOGIC_VECTOR (31 downto 0);
    signal lsb_index_fu_286_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal lsb_index_reg_708 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln949_fu_302_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln949_reg_715 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln950_fu_333_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln950_reg_720 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln946_fu_339_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln946_reg_725 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln946_reg_725_pp0_iter2_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal m_reg_730 : STD_LOGIC_VECTOR (62 downto 0);
    signal p_Result_4_reg_735 : STD_LOGIC_VECTOR (0 downto 0);
    signal m_3_21_fu_496_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal m_3_21_reg_740 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_fu_108 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_i_2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal add_ln376_fu_194_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal m_3_1_fu_112 : STD_LOGIC_VECTOR (63 downto 0);
    signal m_3_20_fu_591_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal m_3_7_fu_116 : STD_LOGIC_VECTOR (63 downto 0);
    signal m_3_19_fu_583_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal m_3_10_fu_120 : STD_LOGIC_VECTOR (63 downto 0);
    signal m_3_17_fu_568_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal m_3_04_fu_124 : STD_LOGIC_VECTOR (63 downto 0);
    signal m_3_14_fu_545_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal p_Val2_s_fu_204_p5 : STD_LOGIC_VECTOR (1 downto 0);
    signal p_Val2_s_fu_204_p6 : STD_LOGIC_VECTOR (35 downto 0);
    signal tmp_V_fu_232_p2 : STD_LOGIC_VECTOR (35 downto 0);
    signal p_Result_7_fu_261_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_5_fu_268_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal l_fu_276_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_292_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln950_fu_308_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal sub_ln950_fu_312_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln950_fu_318_p1 : STD_LOGIC_VECTOR (35 downto 0);
    signal lshr_ln950_fu_322_p2 : STD_LOGIC_VECTOR (35 downto 0);
    signal p_Result_2_fu_328_p2 : STD_LOGIC_VECTOR (35 downto 0);
    signal tmp_1_fu_343_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_3_fu_360_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln949_fu_356_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln961_fu_380_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln960_fu_372_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln961_fu_385_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sub_ln962_fu_395_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln962_fu_400_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal a_fu_366_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln952_fu_350_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln961_fu_375_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal lshr_ln961_fu_389_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln962_fu_404_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tobool31_i_i_i11_fu_410_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal m_1_fu_416_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln964_fu_424_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal m_3_fu_428_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal sub_ln968_fu_462_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln946_fu_455_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln968_fu_467_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln965_fu_452_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_7_fu_473_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_Result_8_fu_480_p5 : STD_LOGIC_VECTOR (63 downto 0);
    signal bitcast_ln741_fu_492_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln377_fu_515_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln377_1_fu_527_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal m_3_37_fu_520_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln377_2_fu_540_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal m_3_13_fu_532_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal m_3_15_fu_553_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal m_3_16_fu_560_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal m_3_18_fu_576_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component master_fix_mux_42_36_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (35 downto 0);
        din1 : IN STD_LOGIC_VECTOR (35 downto 0);
        din2 : IN STD_LOGIC_VECTOR (35 downto 0);
        din3 : IN STD_LOGIC_VECTOR (35 downto 0);
        din4 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (35 downto 0) );
    end component;


    component master_fix_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mux_42_36_1_1_U305 : component master_fix_mux_42_36_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 36,
        din1_WIDTH => 36,
        din2_WIDTH => 36,
        din3_WIDTH => 36,
        din4_WIDTH => 2,
        dout_WIDTH => 36)
    port map (
        din0 => den2_V_0_0_05,
        din1 => den2_V_0_1_06,
        din2 => den2_V_0_2_07,
        din3 => den2_V_0_3_08,
        din4 => p_Val2_s_fu_204_p5,
        dout => p_Val2_s_fu_204_p6);

    flow_control_loop_pipe_sequential_init_U : component master_fix_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready_pp0_iter3_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    i_fu_108_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln376_fu_188_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    i_fu_108 <= add_ln376_fu_194_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_108 <= ap_const_lv3_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                icmp_ln376_reg_669 <= icmp_ln376_fu_188_p2;
                icmp_ln376_reg_669_pp0_iter1_reg <= icmp_ln376_reg_669;
                icmp_ln938_reg_680_pp0_iter1_reg <= icmp_ln938_reg_680;
                p_Result_6_reg_685_pp0_iter1_reg <= p_Result_6_reg_685;
                tmp_V_2_reg_690_pp0_iter1_reg <= tmp_V_2_reg_690;
                trunc_ln938_reg_673_pp0_iter1_reg <= trunc_ln938_reg_673;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                icmp_ln376_reg_669_pp0_iter2_reg <= icmp_ln376_reg_669_pp0_iter1_reg;
                icmp_ln938_reg_680_pp0_iter2_reg <= icmp_ln938_reg_680_pp0_iter1_reg;
                m_3_21_reg_740 <= m_3_21_fu_496_p3;
                p_Result_6_reg_685_pp0_iter2_reg <= p_Result_6_reg_685_pp0_iter1_reg;
                trunc_ln938_reg_673_pp0_iter2_reg <= trunc_ln938_reg_673_pp0_iter1_reg;
                trunc_ln938_reg_673_pp0_iter3_reg <= trunc_ln938_reg_673_pp0_iter2_reg;
                trunc_ln946_reg_725_pp0_iter2_reg <= trunc_ln946_reg_725;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln376_fu_188_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln938_reg_680 <= icmp_ln938_fu_218_p2;
                p_Result_6_reg_685 <= p_Val2_s_fu_204_p6(35 downto 35);
                p_Result_s_reg_697 <= p_Result_s_fu_246_p4;
                tmp_V_2_reg_690 <= tmp_V_2_fu_238_p3;
                trunc_ln938_reg_673 <= trunc_ln938_fu_200_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln938_reg_680 = ap_const_lv1_0))) then
                icmp_ln949_reg_715 <= icmp_ln949_fu_302_p2;
                icmp_ln950_reg_720 <= icmp_ln950_fu_333_p2;
                lsb_index_reg_708 <= lsb_index_fu_286_p2;
                sub_ln947_reg_702 <= sub_ln947_fu_280_p2;
                trunc_ln946_reg_725 <= trunc_ln946_fu_339_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then
                m_3_04_fu_124 <= m_3_14_fu_545_p3;
                m_3_10_fu_120 <= m_3_17_fu_568_p3;
                m_3_1_fu_112 <= m_3_20_fu_591_p3;
                m_3_7_fu_116 <= m_3_19_fu_583_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln938_reg_680_pp0_iter1_reg = ap_const_lv1_0))) then
                m_reg_730 <= m_3_fu_428_p2(63 downto 1);
                p_Result_4_reg_735 <= m_3_fu_428_p2(54 downto 54);
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    a_fu_366_p2 <= (p_Result_3_fu_360_p3 or and_ln949_fu_356_p2);
    add_ln376_fu_194_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_2) + unsigned(ap_const_lv3_1));
    add_ln961_fu_380_p2 <= std_logic_vector(unsigned(sub_ln947_reg_702) + unsigned(ap_const_lv32_FFFFFFCA));
    add_ln968_fu_467_p2 <= std_logic_vector(unsigned(sub_ln968_fu_462_p2) + unsigned(select_ln946_fu_455_p3));
    and_ln949_fu_356_p2 <= (icmp_ln950_reg_720 and icmp_ln949_reg_715);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln376_fu_188_p2)
    begin
        if (((icmp_ln376_fu_188_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter3_reg)
    begin
        if (((ap_loop_exit_ready_pp0_iter3_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_2_assign_proc : process(ap_CS_fsm_pp0_stage0, i_fu_108, ap_loop_init, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_i_2 <= ap_const_lv3_0;
        else 
            ap_sig_allocacmp_i_2 <= i_fu_108;
        end if; 
    end process;

    bitcast_ln741_fu_492_p1 <= p_Result_8_fu_480_p5;
    icmp_ln376_fu_188_p2 <= "1" when (ap_sig_allocacmp_i_2 = ap_const_lv3_4) else "0";
    icmp_ln377_1_fu_527_p2 <= "1" when (trunc_ln938_reg_673_pp0_iter3_reg = ap_const_lv2_1) else "0";
    icmp_ln377_2_fu_540_p2 <= "1" when (trunc_ln938_reg_673_pp0_iter3_reg = ap_const_lv2_0) else "0";
    icmp_ln377_fu_515_p2 <= "1" when (trunc_ln938_reg_673_pp0_iter3_reg = ap_const_lv2_2) else "0";
    icmp_ln938_fu_218_p2 <= "1" when (p_Val2_s_fu_204_p6 = ap_const_lv36_0) else "0";
    icmp_ln949_fu_302_p2 <= "1" when (signed(tmp_fu_292_p4) > signed(ap_const_lv31_0)) else "0";
    icmp_ln950_fu_333_p2 <= "0" when (p_Result_2_fu_328_p2 = ap_const_lv36_0) else "1";
    icmp_ln961_fu_375_p2 <= "1" when (signed(lsb_index_reg_708) > signed(ap_const_lv32_0)) else "0";
    l_fu_276_p1 <= tmp_5_fu_268_p3(32 - 1 downto 0);
    lsb_index_fu_286_p2 <= std_logic_vector(unsigned(sub_ln947_fu_280_p2) + unsigned(ap_const_lv32_FFFFFFCB));
    lshr_ln950_fu_322_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv36_FFFFFFFFF),to_integer(unsigned('0' & zext_ln950_fu_318_p1(31-1 downto 0)))));
    lshr_ln961_fu_389_p2 <= std_logic_vector(shift_right(unsigned(zext_ln960_fu_372_p1),to_integer(unsigned('0' & zext_ln961_fu_385_p1(31-1 downto 0)))));
    m_1_fu_416_p3 <= 
        lshr_ln961_fu_389_p2 when (icmp_ln961_fu_375_p2(0) = '1') else 
        shl_ln962_fu_404_p2;
    m_2_03_out <= m_3_10_fu_120;

    m_2_03_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln376_reg_669_pp0_iter2_reg)
    begin
        if (((icmp_ln376_reg_669_pp0_iter2_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            m_2_03_out_ap_vld <= ap_const_logic_1;
        else 
            m_2_03_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    m_3_04_out <= m_3_04_fu_124;

    m_3_04_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln376_reg_669_pp0_iter2_reg)
    begin
        if (((icmp_ln376_reg_669_pp0_iter2_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            m_3_04_out_ap_vld <= ap_const_logic_1;
        else 
            m_3_04_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    m_3_10_out <= m_3_1_fu_112;

    m_3_10_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln376_reg_669_pp0_iter2_reg)
    begin
        if (((icmp_ln376_reg_669_pp0_iter2_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            m_3_10_out_ap_vld <= ap_const_logic_1;
        else 
            m_3_10_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    m_3_13_fu_532_p3 <= 
        m_3_04_fu_124 when (icmp_ln377_1_fu_527_p2(0) = '1') else 
        m_3_37_fu_520_p3;
    m_3_14_fu_545_p3 <= 
        m_3_04_fu_124 when (icmp_ln377_2_fu_540_p2(0) = '1') else 
        m_3_13_fu_532_p3;
    m_3_15_fu_553_p3 <= 
        m_3_21_reg_740 when (icmp_ln377_fu_515_p2(0) = '1') else 
        m_3_10_fu_120;
    m_3_16_fu_560_p3 <= 
        m_3_10_fu_120 when (icmp_ln377_1_fu_527_p2(0) = '1') else 
        m_3_15_fu_553_p3;
    m_3_17_fu_568_p3 <= 
        m_3_10_fu_120 when (icmp_ln377_2_fu_540_p2(0) = '1') else 
        m_3_16_fu_560_p3;
    m_3_18_fu_576_p3 <= 
        m_3_21_reg_740 when (icmp_ln377_1_fu_527_p2(0) = '1') else 
        m_3_7_fu_116;
    m_3_19_fu_583_p3 <= 
        m_3_7_fu_116 when (icmp_ln377_2_fu_540_p2(0) = '1') else 
        m_3_18_fu_576_p3;
    m_3_20_fu_591_p3 <= 
        m_3_21_reg_740 when (icmp_ln377_2_fu_540_p2(0) = '1') else 
        m_3_1_fu_112;
    m_3_21_fu_496_p3 <= 
        ap_const_lv64_0 when (icmp_ln938_reg_680_pp0_iter2_reg(0) = '1') else 
        bitcast_ln741_fu_492_p1;
    m_3_37_fu_520_p3 <= 
        m_3_04_fu_124 when (icmp_ln377_fu_515_p2(0) = '1') else 
        m_3_21_reg_740;
    m_3_7_out <= m_3_7_fu_116;

    m_3_7_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln376_reg_669_pp0_iter2_reg)
    begin
        if (((icmp_ln376_reg_669_pp0_iter2_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            m_3_7_out_ap_vld <= ap_const_logic_1;
        else 
            m_3_7_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    m_3_fu_428_p2 <= std_logic_vector(unsigned(m_1_fu_416_p3) + unsigned(zext_ln964_fu_424_p1));
    p_Result_2_fu_328_p2 <= (tmp_V_2_reg_690 and lshr_ln950_fu_322_p2);
    p_Result_3_fu_360_p3 <= tmp_V_2_reg_690_pp0_iter1_reg(to_integer(unsigned(lsb_index_reg_708)) downto to_integer(unsigned(lsb_index_reg_708))) when (to_integer(unsigned(lsb_index_reg_708))>= 0 and to_integer(unsigned(lsb_index_reg_708))<=35) else "-";
    p_Result_6_fu_224_p3 <= p_Val2_s_fu_204_p6(35 downto 35);
    p_Result_7_fu_261_p3 <= (ap_const_lv28_FFFFFFF & p_Result_s_reg_697);
    p_Result_8_fu_480_p5 <= (tmp_7_fu_473_p3 & zext_ln965_fu_452_p1(51 downto 0));
    
    p_Result_s_fu_246_p4_proc : process(tmp_V_2_fu_238_p3)
    variable vlo_cpy : STD_LOGIC_VECTOR(36+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(36+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(36 - 1 downto 0);
    variable p_Result_s_fu_246_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(36 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(36 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(36 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(6 - 1 downto 0) := ap_const_lv32_23(6 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(6 - 1 downto 0) := ap_const_lv32_0(6 - 1 downto 0);
        v0_cpy := tmp_V_2_fu_238_p3;
        if (vlo_cpy(6 - 1 downto 0) > vhi_cpy(6 - 1 downto 0)) then
            vhi_cpy(6-1 downto 0) := std_logic_vector(36-1-unsigned(ap_const_lv32_0(6-1 downto 0)));
            vlo_cpy(6-1 downto 0) := std_logic_vector(36-1-unsigned(ap_const_lv32_23(6-1 downto 0)));
            for p_Result_s_fu_246_p4_i in 0 to 36-1 loop
                v0_cpy(p_Result_s_fu_246_p4_i) := tmp_V_2_fu_238_p3(36-1-p_Result_s_fu_246_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(6-1 downto 0)))));

        section := (others=>'0');
        section(6-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(6-1 downto 0)) - unsigned(vlo_cpy(6-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(36-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        p_Result_s_fu_246_p4 <= resvalue(36-1 downto 0);
    end process;

    p_Val2_s_fu_204_p5 <= ap_sig_allocacmp_i_2(2 - 1 downto 0);
    select_ln946_fu_455_p3 <= 
        ap_const_lv11_3FF when (p_Result_4_reg_735(0) = '1') else 
        ap_const_lv11_3FE;
    shl_ln962_fu_404_p2 <= std_logic_vector(shift_left(unsigned(zext_ln960_fu_372_p1),to_integer(unsigned('0' & zext_ln962_fu_400_p1(31-1 downto 0)))));
    sub_ln947_fu_280_p2 <= std_logic_vector(unsigned(ap_const_lv32_24) - unsigned(l_fu_276_p1));
    sub_ln950_fu_312_p2 <= std_logic_vector(unsigned(ap_const_lv6_1A) - unsigned(trunc_ln950_fu_308_p1));
    sub_ln962_fu_395_p2 <= std_logic_vector(unsigned(ap_const_lv32_36) - unsigned(sub_ln947_reg_702));
    sub_ln968_fu_462_p2 <= std_logic_vector(unsigned(ap_const_lv11_11) - unsigned(trunc_ln946_reg_725_pp0_iter2_reg));
    tmp_1_fu_343_p3 <= lsb_index_reg_708(31 downto 31);
    
    tmp_5_fu_268_p3_proc : process(p_Result_7_fu_261_p3)
    begin
        tmp_5_fu_268_p3 <= std_logic_vector(to_unsigned(64, 64));
        for i in 0 to 64 - 1 loop
            if p_Result_7_fu_261_p3(i) = '1' then
                tmp_5_fu_268_p3 <= std_logic_vector(to_unsigned(i,64));
                exit;
            end if;
        end loop;
    end process;

    tmp_7_fu_473_p3 <= (p_Result_6_reg_685_pp0_iter2_reg & add_ln968_fu_467_p2);
    tmp_V_2_fu_238_p3 <= 
        tmp_V_fu_232_p2 when (p_Result_6_fu_224_p3(0) = '1') else 
        p_Val2_s_fu_204_p6;
    tmp_V_fu_232_p2 <= std_logic_vector(unsigned(ap_const_lv36_0) - unsigned(p_Val2_s_fu_204_p6));
    tmp_fu_292_p4 <= lsb_index_fu_286_p2(31 downto 1);
    tobool31_i_i_i11_fu_410_p2 <= (xor_ln952_fu_350_p2 and a_fu_366_p2);
    trunc_ln938_fu_200_p1 <= ap_sig_allocacmp_i_2(2 - 1 downto 0);
    trunc_ln946_fu_339_p1 <= tmp_5_fu_268_p3(11 - 1 downto 0);
    trunc_ln950_fu_308_p1 <= sub_ln947_fu_280_p2(6 - 1 downto 0);
    xor_ln952_fu_350_p2 <= (tmp_1_fu_343_p3 xor ap_const_lv1_1);
    zext_ln950_fu_318_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln950_fu_312_p2),36));
    zext_ln960_fu_372_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_V_2_reg_690_pp0_iter1_reg),64));
    zext_ln961_fu_385_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln961_fu_380_p2),64));
    zext_ln962_fu_400_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln962_fu_395_p2),64));
    zext_ln964_fu_424_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tobool31_i_i_i11_fu_410_p2),64));
    zext_ln965_fu_452_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(m_reg_730),64));
end behav;
