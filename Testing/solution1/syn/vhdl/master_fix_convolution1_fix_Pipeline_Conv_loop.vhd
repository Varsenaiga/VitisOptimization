-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
-- Version: 2021.1
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity master_fix_convolution1_fix_Pipeline_Conv_loop is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    tmp1_V_11_0_reload : IN STD_LOGIC_VECTOR (11 downto 0);
    tmp1_V_10_0_reload : IN STD_LOGIC_VECTOR (11 downto 0);
    tmp1_V_11_4_reload : IN STD_LOGIC_VECTOR (11 downto 0);
    tmp1_V_11_6_reload : IN STD_LOGIC_VECTOR (11 downto 0);
    tmp1_V_11_8_reload : IN STD_LOGIC_VECTOR (11 downto 0);
    tmp1_V_6 : IN STD_LOGIC_VECTOR (11 downto 0);
    tmp1_V_5_0_reload : IN STD_LOGIC_VECTOR (11 downto 0);
    tmp1_V_4_0_reload : IN STD_LOGIC_VECTOR (11 downto 0);
    tmp1_V_3_0_reload : IN STD_LOGIC_VECTOR (11 downto 0);
    tmp1_V_2_0_reload : IN STD_LOGIC_VECTOR (11 downto 0);
    tmp1_V_1_0_reload : IN STD_LOGIC_VECTOR (11 downto 0);
    tmp1_V_0_0_reload : IN STD_LOGIC_VECTOR (11 downto 0);
    tmp2_V_11_0_reload : IN STD_LOGIC_VECTOR (11 downto 0);
    tmp2_V_10_0_reload : IN STD_LOGIC_VECTOR (11 downto 0);
    tmp2_V_9_0_reload : IN STD_LOGIC_VECTOR (11 downto 0);
    tmp2_V_8_0_reload : IN STD_LOGIC_VECTOR (11 downto 0);
    tmp2_V_7_0_reload : IN STD_LOGIC_VECTOR (11 downto 0);
    tmp2_V_6_0_reload : IN STD_LOGIC_VECTOR (11 downto 0);
    tmp2_V_5_0_reload : IN STD_LOGIC_VECTOR (11 downto 0);
    tmp2_V_3_0_reload : IN STD_LOGIC_VECTOR (11 downto 0);
    tmp2_V_2_0_reload : IN STD_LOGIC_VECTOR (11 downto 0);
    tmp2_V_1_0_reload : IN STD_LOGIC_VECTOR (11 downto 0);
    tmp2_V_0_0_reload : IN STD_LOGIC_VECTOR (11 downto 0);
    input_r_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    input_r_ce0 : OUT STD_LOGIC;
    input_r_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    out_r_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    out_r_ce0 : OUT STD_LOGIC;
    out_r_we0 : OUT STD_LOGIC;
    out_r_d0 : OUT STD_LOGIC_VECTOR (34 downto 0) );
end;


architecture behav of master_fix_convolution1_fix_Pipeline_Conv_loop is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv16_FFFF : STD_LOGIC_VECTOR (15 downto 0) := "1111111111111111";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv12_C00 : STD_LOGIC_VECTOR (11 downto 0) := "110000000000";
    constant ap_const_lv12_1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv17_1 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv7_7F : STD_LOGIC_VECTOR (6 downto 0) := "1111111";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv12_3 : STD_LOGIC_VECTOR (11 downto 0) := "000000000011";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv17_2 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000010";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv17_3 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000011";
    constant ap_const_lv7_2 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv35_0 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000000000000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln235_fu_837_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter1_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal firstKernel_f_V_0_0_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal firstKernel_f_V_0_0_ce0 : STD_LOGIC;
    signal firstKernel_f_V_0_0_q0 : STD_LOGIC_VECTOR (18 downto 0);
    signal firstKernel_f_V_0_1_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal firstKernel_f_V_0_1_ce0 : STD_LOGIC;
    signal firstKernel_f_V_0_1_q0 : STD_LOGIC_VECTOR (18 downto 0);
    signal firstKernel_f_V_0_2_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal firstKernel_f_V_0_2_ce0 : STD_LOGIC;
    signal firstKernel_f_V_0_2_q0 : STD_LOGIC_VECTOR (19 downto 0);
    signal firstKernel_f_V_1_0_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal firstKernel_f_V_1_0_ce0 : STD_LOGIC;
    signal firstKernel_f_V_1_0_q0 : STD_LOGIC_VECTOR (17 downto 0);
    signal firstKernel_f_V_1_1_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal firstKernel_f_V_1_1_ce0 : STD_LOGIC;
    signal firstKernel_f_V_1_1_q0 : STD_LOGIC_VECTOR (17 downto 0);
    signal firstKernel_f_V_1_2_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal firstKernel_f_V_1_2_ce0 : STD_LOGIC;
    signal firstKernel_f_V_1_2_q0 : STD_LOGIC_VECTOR (17 downto 0);
    signal firstKernel_f_V_2_0_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal firstKernel_f_V_2_0_ce0 : STD_LOGIC;
    signal firstKernel_f_V_2_0_q0 : STD_LOGIC_VECTOR (17 downto 0);
    signal firstKernel_f_V_2_1_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal firstKernel_f_V_2_1_ce0 : STD_LOGIC;
    signal firstKernel_f_V_2_1_q0 : STD_LOGIC_VECTOR (17 downto 0);
    signal firstKernel_f_V_2_2_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal firstKernel_f_V_2_2_ce0 : STD_LOGIC;
    signal firstKernel_f_V_2_2_q0 : STD_LOGIC_VECTOR (17 downto 0);
    signal firstKernel_f_V_3_0_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal firstKernel_f_V_3_0_ce0 : STD_LOGIC;
    signal firstKernel_f_V_3_0_q0 : STD_LOGIC_VECTOR (17 downto 0);
    signal firstKernel_f_V_3_1_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal firstKernel_f_V_3_1_ce0 : STD_LOGIC;
    signal firstKernel_f_V_3_1_q0 : STD_LOGIC_VECTOR (18 downto 0);
    signal firstKernel_f_V_3_2_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal firstKernel_f_V_3_2_ce0 : STD_LOGIC;
    signal firstKernel_f_V_3_2_q0 : STD_LOGIC_VECTOR (18 downto 0);
    signal firstBias_f_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal firstBias_f_V_ce0 : STD_LOGIC;
    signal firstBias_f_V_q0 : STD_LOGIC_VECTOR (21 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal trunc_ln213_fu_852_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln213_reg_3190 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln213_reg_3190_pp0_iter2_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln213_reg_3190_pp0_iter3_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln213_reg_3190_pp0_iter4_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln238_fu_856_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln238_reg_3201 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln238_reg_3201_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln238_reg_3201_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln238_reg_3201_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln238_reg_3201_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln238_reg_3201_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln246_fu_931_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln246_reg_3213 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln246_reg_3213_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln246_reg_3213_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln246_reg_3213_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln246_reg_3213_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln246_reg_3213_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln323_2_fu_970_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln323_2_reg_3217 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln267_fu_992_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln267_reg_3222 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln267_reg_3222_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln267_reg_3222_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal t_fu_1003_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal t_reg_3232 : STD_LOGIC_VECTOR (1 downto 0);
    signal t_reg_3232_pp0_iter3_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln267_4_fu_1035_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln267_4_reg_3239 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln267_4_reg_3239_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln267_4_reg_3239_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln267_1_fu_1041_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln267_1_reg_3248 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln267_1_reg_3248_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal newSecond75_fu_1073_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal newSecond75_reg_3254 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln268_fu_1095_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln268_reg_3259 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln268_reg_3259_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal newSecond77_fu_1123_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal newSecond77_reg_3265 : STD_LOGIC_VECTOR (8 downto 0);
    signal newSecond_fu_1153_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal newSecond_reg_3270 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln273_fu_1159_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln273_reg_3275 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln273_reg_3275_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln273_reg_3275_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln298_fu_1181_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln298_reg_3283 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln298_reg_3283_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln298_reg_3283_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln323_fu_1209_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln323_reg_3289 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln323_reg_3289_pp0_iter3_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln323_reg_3289_pp0_iter4_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal idxprom82_fu_1347_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal idxprom82_reg_3314 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp1_V_11_32_fu_1433_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp1_V_11_32_reg_3339 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln267_3_fu_1454_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln267_3_reg_3344 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp1_V_11_22_fu_1459_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp1_V_11_22_reg_3349 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp1_V_11_26_fu_1475_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp1_V_11_26_reg_3356 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln272_1_fu_1624_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln272_1_reg_3418 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln272_1_reg_3418_pp0_iter6_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln275_fu_1645_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln275_reg_3423 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln275_reg_3423_pp0_iter6_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln285_3_fu_1880_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln285_3_reg_3428 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln285_3_reg_3428_pp0_iter6_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln285_7_fu_1944_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln285_7_reg_3433 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln285_7_reg_3433_pp0_iter6_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln285_11_fu_2016_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln285_11_reg_3438 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln285_15_fu_2088_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln285_15_reg_3443 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln298_fu_2288_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln298_reg_3448 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln298_reg_3448_pp0_iter6_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln298_1_fu_2336_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln298_1_reg_3453 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln298_1_reg_3453_pp0_iter6_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln298_2_fu_2384_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln298_2_reg_3458 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln298_2_reg_3458_pp0_iter6_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln298_3_fu_2432_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln298_3_reg_3463 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln298_3_reg_3463_pp0_iter6_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp2_V_7_1_fu_2440_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp2_V_7_1_reg_3468 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp2_V_7_1_reg_3468_pp0_iter6_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln298_5_fu_2448_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln298_5_reg_3473 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln298_5_reg_3473_pp0_iter6_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln323_1_fu_2467_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln323_1_reg_3478 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln323_1_reg_3478_pp0_iter6_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln323_1_reg_3478_pp0_iter7_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln323_1_reg_3478_pp0_iter8_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln323_1_reg_3478_pp0_iter9_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln323_1_reg_3478_pp0_iter10_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal firstBias_f_V_load_reg_3483 : STD_LOGIC_VECTOR (21 downto 0);
    signal grp_fu_2647_p2 : STD_LOGIC_VECTOR (35 downto 0);
    signal mul_ln712_reg_3558 : STD_LOGIC_VECTOR (35 downto 0);
    signal grp_fu_2656_p2 : STD_LOGIC_VECTOR (35 downto 0);
    signal mul_ln712_1_reg_3563 : STD_LOGIC_VECTOR (35 downto 0);
    signal grp_fu_2703_p2 : STD_LOGIC_VECTOR (35 downto 0);
    signal mul_ln712_2_reg_3618 : STD_LOGIC_VECTOR (35 downto 0);
    signal grp_fu_2712_p2 : STD_LOGIC_VECTOR (35 downto 0);
    signal mul_ln712_3_reg_3623 : STD_LOGIC_VECTOR (35 downto 0);
    signal grp_fu_2721_p2 : STD_LOGIC_VECTOR (35 downto 0);
    signal mul_ln712_4_reg_3628 : STD_LOGIC_VECTOR (35 downto 0);
    signal grp_fu_2730_p2 : STD_LOGIC_VECTOR (35 downto 0);
    signal mul_ln712_5_reg_3633 : STD_LOGIC_VECTOR (35 downto 0);
    signal grp_fu_2739_p2 : STD_LOGIC_VECTOR (35 downto 0);
    signal mul_ln712_6_reg_3638 : STD_LOGIC_VECTOR (35 downto 0);
    signal grp_fu_2748_p2 : STD_LOGIC_VECTOR (35 downto 0);
    signal mul_ln712_7_reg_3643 : STD_LOGIC_VECTOR (35 downto 0);
    signal grp_fu_2757_p2 : STD_LOGIC_VECTOR (35 downto 0);
    signal mul_ln712_8_reg_3648 : STD_LOGIC_VECTOR (35 downto 0);
    signal grp_fu_2766_p2 : STD_LOGIC_VECTOR (35 downto 0);
    signal mul_ln712_9_reg_3653 : STD_LOGIC_VECTOR (35 downto 0);
    signal grp_fu_2775_p2 : STD_LOGIC_VECTOR (35 downto 0);
    signal mul_ln712_10_reg_3658 : STD_LOGIC_VECTOR (35 downto 0);
    signal grp_fu_2784_p2 : STD_LOGIC_VECTOR (35 downto 0);
    signal mul_ln712_11_reg_3663 : STD_LOGIC_VECTOR (35 downto 0);
    signal add_ln712_6_fu_2798_p2 : STD_LOGIC_VECTOR (35 downto 0);
    signal add_ln712_6_reg_3668 : STD_LOGIC_VECTOR (35 downto 0);
    signal trunc_ln712_4_fu_2803_p1 : STD_LOGIC_VECTOR (34 downto 0);
    signal trunc_ln712_4_reg_3673 : STD_LOGIC_VECTOR (34 downto 0);
    signal add_ln712_1_fu_2811_p2 : STD_LOGIC_VECTOR (35 downto 0);
    signal add_ln712_1_reg_3678 : STD_LOGIC_VECTOR (35 downto 0);
    signal add_ln712_3_fu_2820_p2 : STD_LOGIC_VECTOR (35 downto 0);
    signal add_ln712_3_reg_3683 : STD_LOGIC_VECTOR (35 downto 0);
    signal trunc_ln712_fu_2825_p1 : STD_LOGIC_VECTOR (34 downto 0);
    signal trunc_ln712_reg_3688 : STD_LOGIC_VECTOR (34 downto 0);
    signal trunc_ln712_1_fu_2829_p1 : STD_LOGIC_VECTOR (34 downto 0);
    signal trunc_ln712_1_reg_3693 : STD_LOGIC_VECTOR (34 downto 0);
    signal add_ln712_12_fu_2861_p2 : STD_LOGIC_VECTOR (35 downto 0);
    signal add_ln712_12_reg_3698 : STD_LOGIC_VECTOR (35 downto 0);
    signal add_ln712_14_fu_2866_p2 : STD_LOGIC_VECTOR (34 downto 0);
    signal add_ln712_14_reg_3703 : STD_LOGIC_VECTOR (34 downto 0);
    signal num_V_1_fu_2897_p3 : STD_LOGIC_VECTOR (34 downto 0);
    signal num_V_1_reg_3708 : STD_LOGIC_VECTOR (34 downto 0);
    signal zext_ln267_fu_1214_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln267_1_fu_1218_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln268_fu_1222_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln269_1_fu_1226_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln323_fu_2905_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_fu_182 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln260_fu_962_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal id_fu_186 : STD_LOGIC_VECTOR (11 downto 0);
    signal id_2_fu_843_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp2_V_0_2_fu_190 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp2_V_1_2_fu_194 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp2_V_2_2_fu_198 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp2_V_3_2_fu_202 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp2_V_5_2_fu_206 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp2_V_6_2_fu_210 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp2_V_7_2_fu_214 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp2_V_8_2_fu_218 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp2_V_9_2_fu_222 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp2_V_10_2_fu_226 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp2_V_11_2_fu_230 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp1_V_0_2_fu_234 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp1_V_0_3_fu_1598_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp1_V_0_fu_238 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp1_V_3_1_fu_1590_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp1_V_3_fu_242 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp1_V_6_1_fu_1582_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp1_V_11_fu_246 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp1_V_11_27_fu_1606_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp1_V_7_fu_250 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp1_V_8_fu_254 : STD_LOGIC_VECTOR (11 downto 0);
    signal b_fu_258 : STD_LOGIC_VECTOR (35 downto 0);
    signal sext_ln260_fu_2662_p1 : STD_LOGIC_VECTOR (35 downto 0);
    signal d_fu_262 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln247_1_fu_1343_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal kr_V_0_01134_fu_266 : STD_LOGIC_VECTOR (35 downto 0);
    signal sext_ln254_fu_1493_p1 : STD_LOGIC_VECTOR (35 downto 0);
    signal kr_V_1_01135_fu_270 : STD_LOGIC_VECTOR (35 downto 0);
    signal sext_ln254_1_fu_1497_p1 : STD_LOGIC_VECTOR (35 downto 0);
    signal kr_V_2_01136_fu_274 : STD_LOGIC_VECTOR (35 downto 0);
    signal sext_ln254_2_fu_2548_p1 : STD_LOGIC_VECTOR (35 downto 0);
    signal kr_V_3_01137_fu_278 : STD_LOGIC_VECTOR (35 downto 0);
    signal sext_ln254_3_fu_2552_p1 : STD_LOGIC_VECTOR (35 downto 0);
    signal kr_V_4_01138_fu_282 : STD_LOGIC_VECTOR (35 downto 0);
    signal sext_ln254_4_fu_2556_p1 : STD_LOGIC_VECTOR (35 downto 0);
    signal kr_V_5_01139_fu_286 : STD_LOGIC_VECTOR (35 downto 0);
    signal sext_ln254_5_fu_2560_p1 : STD_LOGIC_VECTOR (35 downto 0);
    signal kr_V_6_01140_fu_290 : STD_LOGIC_VECTOR (35 downto 0);
    signal sext_ln254_6_fu_2564_p1 : STD_LOGIC_VECTOR (35 downto 0);
    signal kr_V_7_01141_fu_294 : STD_LOGIC_VECTOR (35 downto 0);
    signal sext_ln254_7_fu_2568_p1 : STD_LOGIC_VECTOR (35 downto 0);
    signal kr_V_8_01142_fu_298 : STD_LOGIC_VECTOR (35 downto 0);
    signal sext_ln254_8_fu_2572_p1 : STD_LOGIC_VECTOR (35 downto 0);
    signal kr_V_9_01143_fu_302 : STD_LOGIC_VECTOR (35 downto 0);
    signal sext_ln254_9_fu_2576_p1 : STD_LOGIC_VECTOR (35 downto 0);
    signal kr_V_10_01144_fu_306 : STD_LOGIC_VECTOR (35 downto 0);
    signal sext_ln254_10_fu_2580_p1 : STD_LOGIC_VECTOR (35 downto 0);
    signal kr_V_11_01145_fu_310 : STD_LOGIC_VECTOR (35 downto 0);
    signal sext_ln254_11_fu_2584_p1 : STD_LOGIC_VECTOR (35 downto 0);
    signal i_fu_314 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln239_1_fu_927_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp1_V_4_fu_318 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp1_V_1_fu_322 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp1_V_1_1_fu_326 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp1_V_5_fu_330 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp1_V_2_fu_334 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp1_V_2_1_fu_338 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln239_fu_865_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln239_fu_869_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln239_fu_865_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln239_fu_873_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal trunc_ln239_fu_869_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal xor_ln239_fu_891_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_and_t3_cast_fu_897_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln239_1_fu_887_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_fu_879_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln239_fu_905_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_s_fu_911_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_7_fu_919_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln260_fu_950_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln260_1_fu_956_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln266_fu_987_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal xor_ln267_2_fu_998_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln267_fu_1011_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln267_fu_1015_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln267_fu_1015_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln267_fu_1019_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_20_fu_1025_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln267_2_fu_1055_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln270_fu_1047_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln267_1_fu_1051_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_42_cast_fu_1059_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal newFirst74_fu_1067_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln268_fu_1079_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_21_fu_1085_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln268_1_fu_1105_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln268_fu_1101_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_43_cast_fu_1109_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal newFirst76_fu_1117_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln267_fu_1011_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln269_fu_1129_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_14_fu_1139_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal newFirst_fu_1147_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln269_fu_1135_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln273_fu_1159_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln298_fu_1165_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_22_fu_1171_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln323_fu_1187_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln323_1_fu_1191_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln323_1_fu_1191_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_49_cast_fu_1195_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln323_fu_1187_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln323_fu_1203_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln247_fu_1281_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln247_fu_1285_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln247_fu_1281_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln247_fu_1289_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal trunc_ln247_fu_1285_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal xor_ln247_fu_1307_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_and_t7_cast_fu_1313_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln247_1_fu_1303_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_19_fu_1295_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln247_fu_1321_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_13_fu_1327_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal d_9_fu_1335_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal and_ln267_fu_1364_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln267_fu_1368_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln268_fu_1379_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln268_fu_1384_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln267_1_fu_1390_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln268_fu_1374_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln267_3_fu_1401_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln267_4_fu_1405_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln267_5_fu_1417_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln267_6_fu_1421_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal or_ln267_fu_1395_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln267_fu_1409_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln267_1_fu_1425_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln267_2_fu_1441_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp1_V_11_21_fu_1446_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp1_V_11_23_fu_1467_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln260_fu_1577_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln272_fu_1619_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln272_fu_1612_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln275_fu_1632_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp2_V_3_fu_1637_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln274_fu_1653_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp2_V_0_fu_1675_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal xor_ln279_fu_1698_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln279_fu_1703_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln_fu_1668_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal and_ln279_1_fu_1722_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln281_fu_1716_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln281_fu_1726_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln279_fu_1708_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln281_1_fu_1740_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln281_1_fu_1746_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln281_fu_1732_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln281_2_fu_1760_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln281_2_fu_1766_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln281_1_fu_1752_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln281_3_fu_1780_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln281_4_fu_1786_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln281_5_fu_1792_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln281_4_fu_1804_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln281_3_fu_1798_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln281_5_fu_1810_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln281_2_fu_1772_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal or_ln285_fu_1824_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln281_3_fu_1816_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal xor_ln273_fu_1836_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln285_fu_1841_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln285_1_fu_1846_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln285_fu_1828_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal and_ln285_2_fu_1860_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln285_1_fu_1852_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal and_ln285_3_fu_1874_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln285_2_fu_1866_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp2_V_2_fu_1691_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln281_4_fu_1888_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln281_5_fu_1896_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln281_6_fu_1904_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln281_7_fu_1912_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln285_4_fu_1920_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln285_5_fu_1928_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln285_6_fu_1936_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp2_V_1_fu_1660_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln279_1_fu_1952_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln281_8_fu_1960_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln281_9_fu_1968_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln281_10_fu_1976_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln281_11_fu_1984_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln285_8_fu_1992_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln285_9_fu_2000_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln285_10_fu_2008_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln275_1_fu_1683_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln279_2_fu_2024_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln281_12_fu_2032_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln281_13_fu_2040_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln281_14_fu_2048_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln281_15_fu_2056_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln285_12_fu_2064_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln285_13_fu_2072_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln285_14_fu_2080_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln288_fu_2096_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp1_V_11_28_fu_2111_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp2_V_6_fu_2124_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp2_V_9_fu_2147_p13 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp2_V_9_fu_2147_p14 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp1_V_11_30_fu_2183_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal and_ln294_fu_2203_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp2_V_11_fu_2198_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal and_ln294_1_fu_2215_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln294_fu_2207_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal xor_ln267_1_fu_2228_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln298_fu_2233_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln301_fu_2238_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln294_1_fu_2220_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal and_ln301_1_fu_2252_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln301_2_fu_2257_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln301_fu_2244_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal and_ln301_3_fu_2271_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln301_1_fu_2263_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal or_ln298_fu_2284_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln301_2_fu_2276_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp1_V_11_33_fu_2117_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln294_2_fu_2296_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln294_3_fu_2304_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln301_3_fu_2312_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln301_4_fu_2320_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln301_5_fu_2328_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln275_3_fu_2175_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln294_4_fu_2344_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln294_5_fu_2352_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln301_6_fu_2360_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln301_7_fu_2368_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln301_8_fu_2376_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp1_V_11_34_fu_2190_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln294_6_fu_2392_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln294_7_fu_2400_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln301_9_fu_2408_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln301_10_fu_2416_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln301_11_fu_2424_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp2_V_7_fu_2103_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln275_2_fu_2132_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_51_cast_fu_2456_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln323_3_fu_2463_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln712_5_fu_2793_p2 : STD_LOGIC_VECTOR (35 downto 0);
    signal add_ln712_fu_2807_p2 : STD_LOGIC_VECTOR (35 downto 0);
    signal add_ln712_2_fu_2816_p2 : STD_LOGIC_VECTOR (35 downto 0);
    signal add_ln712_7_fu_2833_p2 : STD_LOGIC_VECTOR (35 downto 0);
    signal add_ln712_8_fu_2837_p2 : STD_LOGIC_VECTOR (35 downto 0);
    signal trunc_ln712_3_fu_2845_p1 : STD_LOGIC_VECTOR (34 downto 0);
    signal trunc_ln712_2_fu_2841_p1 : STD_LOGIC_VECTOR (34 downto 0);
    signal add_ln712_9_fu_2849_p2 : STD_LOGIC_VECTOR (35 downto 0);
    signal add_ln712_10_fu_2855_p2 : STD_LOGIC_VECTOR (34 downto 0);
    signal add_ln712_4_fu_2871_p2 : STD_LOGIC_VECTOR (35 downto 0);
    signal add_ln712_13_fu_2875_p2 : STD_LOGIC_VECTOR (34 downto 0);
    signal add_ln712_11_fu_2879_p2 : STD_LOGIC_VECTOR (35 downto 0);
    signal tmp_23_fu_2889_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln1548_fu_2884_p2 : STD_LOGIC_VECTOR (34 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter7_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter8_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter9_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter10_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_condition_2218 : BOOLEAN;
    signal ap_condition_2222 : BOOLEAN;
    signal ap_condition_2226 : BOOLEAN;
    signal ap_condition_991 : BOOLEAN;
    signal ap_condition_997 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component master_fix_mux_124_12_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        din9_WIDTH : INTEGER;
        din10_WIDTH : INTEGER;
        din11_WIDTH : INTEGER;
        din12_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (11 downto 0);
        din1 : IN STD_LOGIC_VECTOR (11 downto 0);
        din2 : IN STD_LOGIC_VECTOR (11 downto 0);
        din3 : IN STD_LOGIC_VECTOR (11 downto 0);
        din4 : IN STD_LOGIC_VECTOR (11 downto 0);
        din5 : IN STD_LOGIC_VECTOR (11 downto 0);
        din6 : IN STD_LOGIC_VECTOR (11 downto 0);
        din7 : IN STD_LOGIC_VECTOR (11 downto 0);
        din8 : IN STD_LOGIC_VECTOR (11 downto 0);
        din9 : IN STD_LOGIC_VECTOR (11 downto 0);
        din10 : IN STD_LOGIC_VECTOR (11 downto 0);
        din11 : IN STD_LOGIC_VECTOR (11 downto 0);
        din12 : IN STD_LOGIC_VECTOR (3 downto 0);
        dout : OUT STD_LOGIC_VECTOR (11 downto 0) );
    end component;


    component master_fix_mul_36s_12s_36_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (35 downto 0);
        din1 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (35 downto 0) );
    end component;


    component master_fix_convolution1_fix_Pipeline_Conv_loop_firstKernel_f_V_0_0 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (18 downto 0) );
    end component;


    component master_fix_convolution1_fix_Pipeline_Conv_loop_firstKernel_f_V_0_1 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (18 downto 0) );
    end component;


    component master_fix_convolution1_fix_Pipeline_Conv_loop_firstKernel_f_V_0_2 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (19 downto 0) );
    end component;


    component master_fix_convolution1_fix_Pipeline_Conv_loop_firstKernel_f_V_1_0 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (17 downto 0) );
    end component;


    component master_fix_convolution1_fix_Pipeline_Conv_loop_firstKernel_f_V_1_1 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (17 downto 0) );
    end component;


    component master_fix_convolution1_fix_Pipeline_Conv_loop_firstKernel_f_V_1_2 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (17 downto 0) );
    end component;


    component master_fix_convolution1_fix_Pipeline_Conv_loop_firstKernel_f_V_2_0 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (17 downto 0) );
    end component;


    component master_fix_convolution1_fix_Pipeline_Conv_loop_firstKernel_f_V_2_1 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (17 downto 0) );
    end component;


    component master_fix_convolution1_fix_Pipeline_Conv_loop_firstKernel_f_V_2_2 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (17 downto 0) );
    end component;


    component master_fix_convolution1_fix_Pipeline_Conv_loop_firstKernel_f_V_3_0 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (17 downto 0) );
    end component;


    component master_fix_convolution1_fix_Pipeline_Conv_loop_firstKernel_f_V_3_1 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (18 downto 0) );
    end component;


    component master_fix_convolution1_fix_Pipeline_Conv_loop_firstKernel_f_V_3_2 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (18 downto 0) );
    end component;


    component master_fix_convolution1_fix_Pipeline_Conv_loop_firstBias_f_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (21 downto 0) );
    end component;


    component master_fix_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    firstKernel_f_V_0_0_U : component master_fix_convolution1_fix_Pipeline_Conv_loop_firstKernel_f_V_0_0
    generic map (
        DataWidth => 19,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => firstKernel_f_V_0_0_address0,
        ce0 => firstKernel_f_V_0_0_ce0,
        q0 => firstKernel_f_V_0_0_q0);

    firstKernel_f_V_0_1_U : component master_fix_convolution1_fix_Pipeline_Conv_loop_firstKernel_f_V_0_1
    generic map (
        DataWidth => 19,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => firstKernel_f_V_0_1_address0,
        ce0 => firstKernel_f_V_0_1_ce0,
        q0 => firstKernel_f_V_0_1_q0);

    firstKernel_f_V_0_2_U : component master_fix_convolution1_fix_Pipeline_Conv_loop_firstKernel_f_V_0_2
    generic map (
        DataWidth => 20,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => firstKernel_f_V_0_2_address0,
        ce0 => firstKernel_f_V_0_2_ce0,
        q0 => firstKernel_f_V_0_2_q0);

    firstKernel_f_V_1_0_U : component master_fix_convolution1_fix_Pipeline_Conv_loop_firstKernel_f_V_1_0
    generic map (
        DataWidth => 18,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => firstKernel_f_V_1_0_address0,
        ce0 => firstKernel_f_V_1_0_ce0,
        q0 => firstKernel_f_V_1_0_q0);

    firstKernel_f_V_1_1_U : component master_fix_convolution1_fix_Pipeline_Conv_loop_firstKernel_f_V_1_1
    generic map (
        DataWidth => 18,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => firstKernel_f_V_1_1_address0,
        ce0 => firstKernel_f_V_1_1_ce0,
        q0 => firstKernel_f_V_1_1_q0);

    firstKernel_f_V_1_2_U : component master_fix_convolution1_fix_Pipeline_Conv_loop_firstKernel_f_V_1_2
    generic map (
        DataWidth => 18,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => firstKernel_f_V_1_2_address0,
        ce0 => firstKernel_f_V_1_2_ce0,
        q0 => firstKernel_f_V_1_2_q0);

    firstKernel_f_V_2_0_U : component master_fix_convolution1_fix_Pipeline_Conv_loop_firstKernel_f_V_2_0
    generic map (
        DataWidth => 18,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => firstKernel_f_V_2_0_address0,
        ce0 => firstKernel_f_V_2_0_ce0,
        q0 => firstKernel_f_V_2_0_q0);

    firstKernel_f_V_2_1_U : component master_fix_convolution1_fix_Pipeline_Conv_loop_firstKernel_f_V_2_1
    generic map (
        DataWidth => 18,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => firstKernel_f_V_2_1_address0,
        ce0 => firstKernel_f_V_2_1_ce0,
        q0 => firstKernel_f_V_2_1_q0);

    firstKernel_f_V_2_2_U : component master_fix_convolution1_fix_Pipeline_Conv_loop_firstKernel_f_V_2_2
    generic map (
        DataWidth => 18,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => firstKernel_f_V_2_2_address0,
        ce0 => firstKernel_f_V_2_2_ce0,
        q0 => firstKernel_f_V_2_2_q0);

    firstKernel_f_V_3_0_U : component master_fix_convolution1_fix_Pipeline_Conv_loop_firstKernel_f_V_3_0
    generic map (
        DataWidth => 18,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => firstKernel_f_V_3_0_address0,
        ce0 => firstKernel_f_V_3_0_ce0,
        q0 => firstKernel_f_V_3_0_q0);

    firstKernel_f_V_3_1_U : component master_fix_convolution1_fix_Pipeline_Conv_loop_firstKernel_f_V_3_1
    generic map (
        DataWidth => 19,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => firstKernel_f_V_3_1_address0,
        ce0 => firstKernel_f_V_3_1_ce0,
        q0 => firstKernel_f_V_3_1_q0);

    firstKernel_f_V_3_2_U : component master_fix_convolution1_fix_Pipeline_Conv_loop_firstKernel_f_V_3_2
    generic map (
        DataWidth => 19,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => firstKernel_f_V_3_2_address0,
        ce0 => firstKernel_f_V_3_2_ce0,
        q0 => firstKernel_f_V_3_2_q0);

    firstBias_f_V_U : component master_fix_convolution1_fix_Pipeline_Conv_loop_firstBias_f_V
    generic map (
        DataWidth => 22,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => firstBias_f_V_address0,
        ce0 => firstBias_f_V_ce0,
        q0 => firstBias_f_V_q0);

    mux_124_12_1_1_U36 : component master_fix_mux_124_12_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 12,
        din1_WIDTH => 12,
        din2_WIDTH => 12,
        din3_WIDTH => 12,
        din4_WIDTH => 12,
        din5_WIDTH => 12,
        din6_WIDTH => 12,
        din7_WIDTH => 12,
        din8_WIDTH => 12,
        din9_WIDTH => 12,
        din10_WIDTH => 12,
        din11_WIDTH => 12,
        din12_WIDTH => 4,
        dout_WIDTH => 12)
    port map (
        din0 => tmp1_V_0_3_fu_1598_p3,
        din1 => tmp1_V_1_1_fu_326,
        din2 => tmp1_V_2_1_fu_338,
        din3 => tmp1_V_3_1_fu_1590_p3,
        din4 => tmp1_V_1_fu_322,
        din5 => tmp1_V_2_fu_334,
        din6 => tmp1_V_6_1_fu_1582_p3,
        din7 => tmp1_V_4_fu_318,
        din8 => tmp1_V_5_fu_330,
        din9 => tmp1_V_11_27_fu_1606_p3,
        din10 => tmp1_V_11_26_reg_3356,
        din11 => tmp1_V_11_22_reg_3349,
        din12 => tmp2_V_9_fu_2147_p13,
        dout => tmp2_V_9_fu_2147_p14);

    mul_36s_12s_36_2_1_U37 : component master_fix_mul_36s_12s_36_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 36,
        din1_WIDTH => 12,
        dout_WIDTH => 36)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => kr_V_0_01134_fu_266,
        din1 => select_ln285_15_reg_3443,
        ce => ap_const_logic_1,
        dout => grp_fu_2647_p2);

    mul_36s_12s_36_2_1_U38 : component master_fix_mul_36s_12s_36_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 36,
        din1_WIDTH => 12,
        dout_WIDTH => 36)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => kr_V_1_01135_fu_270,
        din1 => select_ln285_11_reg_3438,
        ce => ap_const_logic_1,
        dout => grp_fu_2656_p2);

    mul_36s_12s_36_2_1_U39 : component master_fix_mul_36s_12s_36_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 36,
        din1_WIDTH => 12,
        dout_WIDTH => 36)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => kr_V_2_01136_fu_274,
        din1 => select_ln285_7_reg_3433_pp0_iter6_reg,
        ce => ap_const_logic_1,
        dout => grp_fu_2703_p2);

    mul_36s_12s_36_2_1_U40 : component master_fix_mul_36s_12s_36_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 36,
        din1_WIDTH => 12,
        dout_WIDTH => 36)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => kr_V_3_01137_fu_278,
        din1 => select_ln275_reg_3423_pp0_iter6_reg,
        ce => ap_const_logic_1,
        dout => grp_fu_2712_p2);

    mul_36s_12s_36_2_1_U41 : component master_fix_mul_36s_12s_36_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 36,
        din1_WIDTH => 12,
        dout_WIDTH => 36)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => kr_V_4_01138_fu_282,
        din1 => select_ln272_1_reg_3418_pp0_iter6_reg,
        ce => ap_const_logic_1,
        dout => grp_fu_2721_p2);

    mul_36s_12s_36_2_1_U42 : component master_fix_mul_36s_12s_36_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 36,
        din1_WIDTH => 12,
        dout_WIDTH => 36)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => kr_V_5_01139_fu_286,
        din1 => select_ln285_3_reg_3428_pp0_iter6_reg,
        ce => ap_const_logic_1,
        dout => grp_fu_2730_p2);

    mul_36s_12s_36_2_1_U43 : component master_fix_mul_36s_12s_36_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 36,
        din1_WIDTH => 12,
        dout_WIDTH => 36)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => kr_V_6_01140_fu_290,
        din1 => select_ln298_5_reg_3473_pp0_iter6_reg,
        ce => ap_const_logic_1,
        dout => grp_fu_2739_p2);

    mul_36s_12s_36_2_1_U44 : component master_fix_mul_36s_12s_36_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 36,
        din1_WIDTH => 12,
        dout_WIDTH => 36)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => kr_V_7_01141_fu_294,
        din1 => tmp2_V_7_1_reg_3468_pp0_iter6_reg,
        ce => ap_const_logic_1,
        dout => grp_fu_2748_p2);

    mul_36s_12s_36_2_1_U45 : component master_fix_mul_36s_12s_36_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 36,
        din1_WIDTH => 12,
        dout_WIDTH => 36)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => kr_V_8_01142_fu_298,
        din1 => select_ln298_3_reg_3463_pp0_iter6_reg,
        ce => ap_const_logic_1,
        dout => grp_fu_2757_p2);

    mul_36s_12s_36_2_1_U46 : component master_fix_mul_36s_12s_36_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 36,
        din1_WIDTH => 12,
        dout_WIDTH => 36)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => kr_V_9_01143_fu_302,
        din1 => select_ln298_2_reg_3458_pp0_iter6_reg,
        ce => ap_const_logic_1,
        dout => grp_fu_2766_p2);

    mul_36s_12s_36_2_1_U47 : component master_fix_mul_36s_12s_36_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 36,
        din1_WIDTH => 12,
        dout_WIDTH => 36)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => kr_V_10_01144_fu_306,
        din1 => select_ln298_1_reg_3453_pp0_iter6_reg,
        ce => ap_const_logic_1,
        dout => grp_fu_2775_p2);

    mul_36s_12s_36_2_1_U48 : component master_fix_mul_36s_12s_36_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 36,
        din1_WIDTH => 12,
        dout_WIDTH => 36)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => kr_V_11_01145_fu_310,
        din1 => select_ln298_reg_3448_pp0_iter6_reg,
        ce => ap_const_logic_1,
        dout => grp_fu_2784_p2);

    flow_control_loop_pipe_sequential_init_U : component master_fix_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter1_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter10_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    d_fu_262_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    d_fu_262 <= ap_const_lv16_FFFF;
                elsif ((ap_const_boolean_1 = ap_condition_2218)) then 
                    d_fu_262 <= sext_ln247_1_fu_1343_p1;
                end if;
            end if; 
        end if;
    end process;

    i_fu_314_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_314 <= ap_const_lv16_FFFF;
                elsif ((ap_const_boolean_1 = ap_condition_2226)) then 
                    i_fu_314 <= ap_const_lv16_0;
                elsif ((ap_const_boolean_1 = ap_condition_2222)) then 
                    i_fu_314 <= sext_ln239_1_fu_927_p1;
                end if;
            end if; 
        end if;
    end process;

    id_fu_186_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    id_fu_186 <= ap_const_lv12_0;
                elsif (((icmp_ln235_fu_837_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    id_fu_186 <= id_2_fu_843_p2;
                end if;
            end if; 
        end if;
    end process;

    j_fu_182_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    j_fu_182 <= ap_const_lv12_0;
                elsif (((icmp_ln235_fu_837_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    j_fu_182 <= select_ln260_fu_962_p3;
                end if;
            end if; 
        end if;
    end process;

    tmp1_V_0_2_fu_234_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    tmp1_V_0_2_fu_234 <= tmp1_V_0_0_reload;
                elsif ((ap_enable_reg_pp0_iter5 = ap_const_logic_1)) then 
                    tmp1_V_0_2_fu_234 <= tmp1_V_0_3_fu_1598_p3;
                end if;
            end if; 
        end if;
    end process;

    tmp1_V_0_fu_238_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    tmp1_V_0_fu_238 <= tmp1_V_3_0_reload;
                elsif ((ap_enable_reg_pp0_iter5 = ap_const_logic_1)) then 
                    tmp1_V_0_fu_238 <= tmp1_V_3_1_fu_1590_p3;
                end if;
            end if; 
        end if;
    end process;

    tmp1_V_11_fu_246_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    tmp1_V_11_fu_246 <= tmp1_V_11_4_reload;
                elsif ((ap_enable_reg_pp0_iter5 = ap_const_logic_1)) then 
                    tmp1_V_11_fu_246 <= tmp1_V_11_27_fu_1606_p3;
                end if;
            end if; 
        end if;
    end process;

    tmp1_V_1_1_fu_326_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    tmp1_V_1_1_fu_326 <= tmp1_V_1_0_reload;
                elsif (((icmp_ln238_reg_3201_pp0_iter3_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
                    tmp1_V_1_1_fu_326 <= tmp1_V_1_fu_322;
                end if;
            end if; 
        end if;
    end process;

    tmp1_V_1_fu_322_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    tmp1_V_1_fu_322 <= tmp1_V_4_0_reload;
                elsif (((icmp_ln238_reg_3201_pp0_iter3_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
                    tmp1_V_1_fu_322 <= tmp1_V_4_fu_318;
                end if;
            end if; 
        end if;
    end process;

    tmp1_V_2_1_fu_338_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    tmp1_V_2_1_fu_338 <= tmp1_V_2_0_reload;
                elsif (((icmp_ln238_reg_3201_pp0_iter3_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
                    tmp1_V_2_1_fu_338 <= tmp1_V_2_fu_334;
                end if;
            end if; 
        end if;
    end process;

    tmp1_V_2_fu_334_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    tmp1_V_2_fu_334 <= tmp1_V_5_0_reload;
                elsif (((icmp_ln238_reg_3201_pp0_iter3_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
                    tmp1_V_2_fu_334 <= tmp1_V_5_fu_330;
                end if;
            end if; 
        end if;
    end process;

    tmp1_V_3_fu_242_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    tmp1_V_3_fu_242 <= tmp1_V_6;
                elsif ((ap_enable_reg_pp0_iter5 = ap_const_logic_1)) then 
                    tmp1_V_3_fu_242 <= tmp1_V_6_1_fu_1582_p3;
                end if;
            end if; 
        end if;
    end process;

    tmp1_V_4_fu_318_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    tmp1_V_4_fu_318 <= tmp1_V_11_8_reload;
                elsif (((icmp_ln238_reg_3201_pp0_iter3_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
                    tmp1_V_4_fu_318 <= tmp1_V_7_fu_250;
                end if;
            end if; 
        end if;
    end process;

    tmp1_V_5_fu_330_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    tmp1_V_5_fu_330 <= tmp1_V_11_6_reload;
                elsif (((icmp_ln238_reg_3201_pp0_iter3_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
                    tmp1_V_5_fu_330 <= tmp1_V_8_fu_254;
                end if;
            end if; 
        end if;
    end process;

    tmp1_V_7_fu_250_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    tmp1_V_7_fu_250 <= tmp1_V_10_0_reload;
                elsif ((ap_enable_reg_pp0_iter4 = ap_const_logic_1)) then 
                    tmp1_V_7_fu_250 <= tmp1_V_11_26_fu_1475_p3;
                end if;
            end if; 
        end if;
    end process;

    tmp1_V_8_fu_254_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    tmp1_V_8_fu_254 <= tmp1_V_11_0_reload;
                elsif ((ap_enable_reg_pp0_iter4 = ap_const_logic_1)) then 
                    tmp1_V_8_fu_254 <= tmp1_V_11_22_fu_1459_p3;
                end if;
            end if; 
        end if;
    end process;

    tmp2_V_0_2_fu_190_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    tmp2_V_0_2_fu_190 <= tmp2_V_0_0_reload;
                elsif ((ap_enable_reg_pp0_iter5 = ap_const_logic_1)) then 
                    tmp2_V_0_2_fu_190 <= ap_const_lv12_0;
                end if;
            end if; 
        end if;
    end process;

    tmp2_V_10_2_fu_226_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    tmp2_V_10_2_fu_226 <= tmp2_V_10_0_reload;
                elsif ((ap_enable_reg_pp0_iter5 = ap_const_logic_1)) then 
                    tmp2_V_10_2_fu_226 <= ap_const_lv12_0;
                end if;
            end if; 
        end if;
    end process;

    tmp2_V_11_2_fu_230_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    tmp2_V_11_2_fu_230 <= tmp2_V_11_0_reload;
                elsif ((ap_enable_reg_pp0_iter5 = ap_const_logic_1)) then 
                    tmp2_V_11_2_fu_230 <= ap_const_lv12_0;
                end if;
            end if; 
        end if;
    end process;

    tmp2_V_1_2_fu_194_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    tmp2_V_1_2_fu_194 <= tmp2_V_1_0_reload;
                elsif ((ap_enable_reg_pp0_iter5 = ap_const_logic_1)) then 
                    tmp2_V_1_2_fu_194 <= ap_const_lv12_0;
                end if;
            end if; 
        end if;
    end process;

    tmp2_V_2_2_fu_198_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    tmp2_V_2_2_fu_198 <= tmp2_V_2_0_reload;
                elsif ((ap_enable_reg_pp0_iter5 = ap_const_logic_1)) then 
                    tmp2_V_2_2_fu_198 <= ap_const_lv12_0;
                end if;
            end if; 
        end if;
    end process;

    tmp2_V_3_2_fu_202_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    tmp2_V_3_2_fu_202 <= tmp2_V_3_0_reload;
                elsif ((ap_enable_reg_pp0_iter5 = ap_const_logic_1)) then 
                    tmp2_V_3_2_fu_202 <= ap_const_lv12_0;
                end if;
            end if; 
        end if;
    end process;

    tmp2_V_5_2_fu_206_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    tmp2_V_5_2_fu_206 <= tmp2_V_5_0_reload;
                elsif ((ap_enable_reg_pp0_iter5 = ap_const_logic_1)) then 
                    tmp2_V_5_2_fu_206 <= ap_const_lv12_0;
                end if;
            end if; 
        end if;
    end process;

    tmp2_V_6_2_fu_210_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    tmp2_V_6_2_fu_210 <= tmp2_V_6_0_reload;
                elsif ((ap_enable_reg_pp0_iter5 = ap_const_logic_1)) then 
                    tmp2_V_6_2_fu_210 <= ap_const_lv12_0;
                end if;
            end if; 
        end if;
    end process;

    tmp2_V_7_2_fu_214_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    tmp2_V_7_2_fu_214 <= tmp2_V_7_0_reload;
                elsif ((ap_enable_reg_pp0_iter5 = ap_const_logic_1)) then 
                    tmp2_V_7_2_fu_214 <= ap_const_lv12_0;
                end if;
            end if; 
        end if;
    end process;

    tmp2_V_8_2_fu_218_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    tmp2_V_8_2_fu_218 <= tmp2_V_8_0_reload;
                elsif ((ap_enable_reg_pp0_iter5 = ap_const_logic_1)) then 
                    tmp2_V_8_2_fu_218 <= ap_const_lv12_0;
                end if;
            end if; 
        end if;
    end process;

    tmp2_V_9_2_fu_222_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    tmp2_V_9_2_fu_222 <= tmp2_V_9_0_reload;
                elsif ((ap_enable_reg_pp0_iter5 = ap_const_logic_1)) then 
                    tmp2_V_9_2_fu_222 <= ap_const_lv12_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                add_ln323_1_reg_3478 <= add_ln323_1_fu_2467_p2;
                add_ln323_1_reg_3478_pp0_iter10_reg <= add_ln323_1_reg_3478_pp0_iter9_reg;
                add_ln323_1_reg_3478_pp0_iter6_reg <= add_ln323_1_reg_3478;
                add_ln323_1_reg_3478_pp0_iter7_reg <= add_ln323_1_reg_3478_pp0_iter6_reg;
                add_ln323_1_reg_3478_pp0_iter8_reg <= add_ln323_1_reg_3478_pp0_iter7_reg;
                add_ln323_1_reg_3478_pp0_iter9_reg <= add_ln323_1_reg_3478_pp0_iter8_reg;
                add_ln323_reg_3289 <= add_ln323_fu_1209_p2;
                add_ln323_reg_3289_pp0_iter3_reg <= add_ln323_reg_3289;
                add_ln323_reg_3289_pp0_iter4_reg <= add_ln323_reg_3289_pp0_iter3_reg;
                add_ln712_12_reg_3698 <= add_ln712_12_fu_2861_p2;
                add_ln712_14_reg_3703 <= add_ln712_14_fu_2866_p2;
                add_ln712_1_reg_3678 <= add_ln712_1_fu_2811_p2;
                add_ln712_3_reg_3683 <= add_ln712_3_fu_2820_p2;
                add_ln712_6_reg_3668 <= add_ln712_6_fu_2798_p2;
                ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
                ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
                ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
                ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
                icmp_ln238_reg_3201_pp0_iter2_reg <= icmp_ln238_reg_3201;
                icmp_ln238_reg_3201_pp0_iter3_reg <= icmp_ln238_reg_3201_pp0_iter2_reg;
                icmp_ln238_reg_3201_pp0_iter4_reg <= icmp_ln238_reg_3201_pp0_iter3_reg;
                icmp_ln238_reg_3201_pp0_iter5_reg <= icmp_ln238_reg_3201_pp0_iter4_reg;
                icmp_ln238_reg_3201_pp0_iter6_reg <= icmp_ln238_reg_3201_pp0_iter5_reg;
                icmp_ln246_reg_3213_pp0_iter2_reg <= icmp_ln246_reg_3213;
                icmp_ln246_reg_3213_pp0_iter3_reg <= icmp_ln246_reg_3213_pp0_iter2_reg;
                icmp_ln246_reg_3213_pp0_iter4_reg <= icmp_ln246_reg_3213_pp0_iter3_reg;
                icmp_ln246_reg_3213_pp0_iter5_reg <= icmp_ln246_reg_3213_pp0_iter4_reg;
                icmp_ln246_reg_3213_pp0_iter6_reg <= icmp_ln246_reg_3213_pp0_iter5_reg;
                icmp_ln267_1_reg_3248 <= icmp_ln267_1_fu_1041_p2;
                icmp_ln267_1_reg_3248_pp0_iter3_reg <= icmp_ln267_1_reg_3248;
                icmp_ln267_3_reg_3344 <= icmp_ln267_3_fu_1454_p2;
                icmp_ln267_4_reg_3239 <= icmp_ln267_4_fu_1035_p2;
                icmp_ln267_4_reg_3239_pp0_iter3_reg <= icmp_ln267_4_reg_3239;
                icmp_ln267_4_reg_3239_pp0_iter4_reg <= icmp_ln267_4_reg_3239_pp0_iter3_reg;
                icmp_ln267_reg_3222 <= icmp_ln267_fu_992_p2;
                icmp_ln267_reg_3222_pp0_iter3_reg <= icmp_ln267_reg_3222;
                icmp_ln267_reg_3222_pp0_iter4_reg <= icmp_ln267_reg_3222_pp0_iter3_reg;
                icmp_ln268_reg_3259 <= icmp_ln268_fu_1095_p2;
                icmp_ln268_reg_3259_pp0_iter3_reg <= icmp_ln268_reg_3259;
                icmp_ln273_reg_3275 <= icmp_ln273_fu_1159_p2;
                icmp_ln273_reg_3275_pp0_iter3_reg <= icmp_ln273_reg_3275;
                icmp_ln273_reg_3275_pp0_iter4_reg <= icmp_ln273_reg_3275_pp0_iter3_reg;
                icmp_ln298_reg_3283 <= icmp_ln298_fu_1181_p2;
                icmp_ln298_reg_3283_pp0_iter3_reg <= icmp_ln298_reg_3283;
                icmp_ln298_reg_3283_pp0_iter4_reg <= icmp_ln298_reg_3283_pp0_iter3_reg;
                mul_ln712_10_reg_3658 <= grp_fu_2775_p2;
                mul_ln712_11_reg_3663 <= grp_fu_2784_p2;
                mul_ln712_1_reg_3563 <= grp_fu_2656_p2;
                mul_ln712_2_reg_3618 <= grp_fu_2703_p2;
                mul_ln712_3_reg_3623 <= grp_fu_2712_p2;
                mul_ln712_4_reg_3628 <= grp_fu_2721_p2;
                mul_ln712_5_reg_3633 <= grp_fu_2730_p2;
                mul_ln712_6_reg_3638 <= grp_fu_2739_p2;
                mul_ln712_7_reg_3643 <= grp_fu_2748_p2;
                mul_ln712_8_reg_3648 <= grp_fu_2757_p2;
                mul_ln712_9_reg_3653 <= grp_fu_2766_p2;
                mul_ln712_reg_3558 <= grp_fu_2647_p2;
                newSecond75_reg_3254 <= newSecond75_fu_1073_p2;
                newSecond77_reg_3265 <= newSecond77_fu_1123_p2;
                newSecond_reg_3270 <= newSecond_fu_1153_p2;
                num_V_1_reg_3708 <= num_V_1_fu_2897_p3;
                select_ln272_1_reg_3418 <= select_ln272_1_fu_1624_p3;
                select_ln272_1_reg_3418_pp0_iter6_reg <= select_ln272_1_reg_3418;
                select_ln275_reg_3423 <= select_ln275_fu_1645_p3;
                select_ln275_reg_3423_pp0_iter6_reg <= select_ln275_reg_3423;
                select_ln285_11_reg_3438 <= select_ln285_11_fu_2016_p3;
                select_ln285_15_reg_3443 <= select_ln285_15_fu_2088_p3;
                select_ln285_3_reg_3428 <= select_ln285_3_fu_1880_p3;
                select_ln285_3_reg_3428_pp0_iter6_reg <= select_ln285_3_reg_3428;
                select_ln285_7_reg_3433 <= select_ln285_7_fu_1944_p3;
                select_ln285_7_reg_3433_pp0_iter6_reg <= select_ln285_7_reg_3433;
                select_ln298_1_reg_3453 <= select_ln298_1_fu_2336_p3;
                select_ln298_1_reg_3453_pp0_iter6_reg <= select_ln298_1_reg_3453;
                select_ln298_2_reg_3458 <= select_ln298_2_fu_2384_p3;
                select_ln298_2_reg_3458_pp0_iter6_reg <= select_ln298_2_reg_3458;
                select_ln298_3_reg_3463 <= select_ln298_3_fu_2432_p3;
                select_ln298_3_reg_3463_pp0_iter6_reg <= select_ln298_3_reg_3463;
                select_ln298_5_reg_3473 <= select_ln298_5_fu_2448_p3;
                select_ln298_5_reg_3473_pp0_iter6_reg <= select_ln298_5_reg_3473;
                select_ln298_reg_3448 <= select_ln298_fu_2288_p3;
                select_ln298_reg_3448_pp0_iter6_reg <= select_ln298_reg_3448;
                t_reg_3232 <= t_fu_1003_p3;
                t_reg_3232_pp0_iter3_reg <= t_reg_3232;
                tmp1_V_11_22_reg_3349 <= tmp1_V_11_22_fu_1459_p3;
                tmp1_V_11_26_reg_3356 <= tmp1_V_11_26_fu_1475_p3;
                tmp1_V_11_32_reg_3339 <= tmp1_V_11_32_fu_1433_p3;
                tmp2_V_7_1_reg_3468 <= tmp2_V_7_1_fu_2440_p3;
                tmp2_V_7_1_reg_3468_pp0_iter6_reg <= tmp2_V_7_1_reg_3468;
                trunc_ln213_reg_3190_pp0_iter2_reg <= trunc_ln213_reg_3190;
                trunc_ln213_reg_3190_pp0_iter3_reg <= trunc_ln213_reg_3190_pp0_iter2_reg;
                trunc_ln213_reg_3190_pp0_iter4_reg <= trunc_ln213_reg_3190_pp0_iter3_reg;
                trunc_ln712_1_reg_3693 <= trunc_ln712_1_fu_2829_p1;
                trunc_ln712_4_reg_3673 <= trunc_ln712_4_fu_2803_p1;
                trunc_ln712_reg_3688 <= trunc_ln712_fu_2825_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln246_reg_3213_pp0_iter6_reg = ap_const_lv1_1) and (icmp_ln238_reg_3201_pp0_iter6_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1))) then
                b_fu_258 <= sext_ln260_fu_2662_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln246_reg_3213_pp0_iter5_reg = ap_const_lv1_1) and (icmp_ln238_reg_3201_pp0_iter5_reg = ap_const_lv1_1))) then
                firstBias_f_V_load_reg_3483 <= firstBias_f_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln235_fu_837_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln238_reg_3201 <= icmp_ln238_fu_856_p2;
                trunc_ln213_reg_3190 <= trunc_ln213_fu_852_p1;
                trunc_ln323_2_reg_3217 <= trunc_ln323_2_fu_970_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln235_fu_837_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln238_fu_856_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln246_reg_3213 <= icmp_ln246_fu_931_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln246_reg_3213_pp0_iter3_reg = ap_const_lv1_1) and (icmp_ln238_reg_3201_pp0_iter3_reg = ap_const_lv1_1))) then
                    idxprom82_reg_3314(3 downto 0) <= idxprom82_fu_1347_p1(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln246_reg_3213_pp0_iter4_reg = ap_const_lv1_1) and (icmp_ln238_reg_3201_pp0_iter4_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then
                kr_V_0_01134_fu_266 <= sext_ln254_fu_1493_p1;
                kr_V_1_01135_fu_270 <= sext_ln254_1_fu_1497_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln246_reg_3213_pp0_iter5_reg = ap_const_lv1_1) and (icmp_ln238_reg_3201_pp0_iter5_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1))) then
                kr_V_10_01144_fu_306 <= sext_ln254_10_fu_2580_p1;
                kr_V_11_01145_fu_310 <= sext_ln254_11_fu_2584_p1;
                kr_V_2_01136_fu_274 <= sext_ln254_2_fu_2548_p1;
                kr_V_3_01137_fu_278 <= sext_ln254_3_fu_2552_p1;
                kr_V_4_01138_fu_282 <= sext_ln254_4_fu_2556_p1;
                kr_V_5_01139_fu_286 <= sext_ln254_5_fu_2560_p1;
                kr_V_6_01140_fu_290 <= sext_ln254_6_fu_2564_p1;
                kr_V_7_01141_fu_294 <= sext_ln254_7_fu_2568_p1;
                kr_V_8_01142_fu_298 <= sext_ln254_8_fu_2572_p1;
                kr_V_9_01143_fu_302 <= sext_ln254_9_fu_2576_p1;
            end if;
        end if;
    end process;
    idxprom82_reg_3314(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln1548_fu_2884_p2 <= std_logic_vector(unsigned(add_ln712_14_reg_3703) + unsigned(add_ln712_13_fu_2875_p2));
    add_ln239_fu_873_p2 <= std_logic_vector(signed(sext_ln239_fu_865_p1) + signed(ap_const_lv17_1));
    add_ln247_fu_1289_p2 <= std_logic_vector(signed(sext_ln247_fu_1281_p1) + signed(ap_const_lv17_1));
    add_ln260_fu_950_p2 <= std_logic_vector(unsigned(j_fu_182) + unsigned(ap_const_lv12_1));
    add_ln266_fu_987_p2 <= std_logic_vector(unsigned(trunc_ln213_reg_3190) + unsigned(ap_const_lv2_1));
    add_ln267_fu_1019_p2 <= std_logic_vector(signed(sext_ln267_fu_1015_p1) + signed(ap_const_lv17_2));
    add_ln268_fu_1079_p2 <= std_logic_vector(signed(sext_ln267_fu_1015_p1) + signed(ap_const_lv17_3));
    add_ln269_fu_1129_p2 <= std_logic_vector(unsigned(trunc_ln267_fu_1011_p1) + unsigned(ap_const_lv7_2));
    add_ln298_fu_1165_p2 <= std_logic_vector(signed(sext_ln267_fu_1015_p1) + signed(ap_const_lv17_1));
    add_ln323_1_fu_2467_p2 <= std_logic_vector(unsigned(tmp_51_cast_fu_2456_p3) + unsigned(trunc_ln323_3_fu_2463_p1));
    add_ln323_fu_1209_p2 <= std_logic_vector(unsigned(sub_ln323_fu_1203_p2) + unsigned(trunc_ln323_2_reg_3217));
    add_ln712_10_fu_2855_p2 <= std_logic_vector(unsigned(trunc_ln712_3_fu_2845_p1) + unsigned(trunc_ln712_2_fu_2841_p1));
    add_ln712_11_fu_2879_p2 <= std_logic_vector(unsigned(add_ln712_12_reg_3698) + unsigned(add_ln712_4_fu_2871_p2));
    add_ln712_12_fu_2861_p2 <= std_logic_vector(unsigned(add_ln712_9_fu_2849_p2) + unsigned(add_ln712_6_reg_3668));
    add_ln712_13_fu_2875_p2 <= std_logic_vector(unsigned(trunc_ln712_1_reg_3693) + unsigned(trunc_ln712_reg_3688));
    add_ln712_14_fu_2866_p2 <= std_logic_vector(unsigned(add_ln712_10_fu_2855_p2) + unsigned(trunc_ln712_4_reg_3673));
    add_ln712_1_fu_2811_p2 <= std_logic_vector(unsigned(add_ln712_fu_2807_p2) + unsigned(mul_ln712_9_reg_3653));
    add_ln712_2_fu_2816_p2 <= std_logic_vector(unsigned(mul_ln712_7_reg_3643) + unsigned(mul_ln712_6_reg_3638));
    add_ln712_3_fu_2820_p2 <= std_logic_vector(unsigned(add_ln712_2_fu_2816_p2) + unsigned(mul_ln712_5_reg_3633));
    add_ln712_4_fu_2871_p2 <= std_logic_vector(unsigned(add_ln712_3_reg_3683) + unsigned(add_ln712_1_reg_3678));
    add_ln712_5_fu_2793_p2 <= std_logic_vector(unsigned(mul_ln712_1_reg_3563) + unsigned(b_fu_258));
    add_ln712_6_fu_2798_p2 <= std_logic_vector(unsigned(add_ln712_5_fu_2793_p2) + unsigned(mul_ln712_reg_3558));
    add_ln712_7_fu_2833_p2 <= std_logic_vector(unsigned(mul_ln712_2_reg_3618) + unsigned(mul_ln712_4_reg_3628));
    add_ln712_8_fu_2837_p2 <= std_logic_vector(unsigned(mul_ln712_3_reg_3623) + unsigned(mul_ln712_11_reg_3663));
    add_ln712_9_fu_2849_p2 <= std_logic_vector(unsigned(add_ln712_8_fu_2837_p2) + unsigned(add_ln712_7_fu_2833_p2));
    add_ln712_fu_2807_p2 <= std_logic_vector(unsigned(mul_ln712_10_reg_3658) + unsigned(mul_ln712_8_reg_3648));
    and_ln267_1_fu_1390_p2 <= (xor_ln268_fu_1384_p2 and icmp_ln267_1_reg_3248_pp0_iter3_reg);
    and_ln267_fu_1364_p2 <= (icmp_ln267_4_reg_3239_pp0_iter3_reg and icmp_ln267_1_reg_3248_pp0_iter3_reg);
    and_ln268_fu_1374_p2 <= (xor_ln267_fu_1368_p2 and icmp_ln268_reg_3259_pp0_iter3_reg);
    and_ln279_1_fu_1722_p2 <= (icmp_ln273_reg_3275_pp0_iter4_reg and icmp_ln267_reg_3222_pp0_iter4_reg);
    and_ln279_fu_1703_p2 <= (xor_ln279_fu_1698_p2 and icmp_ln273_reg_3275_pp0_iter4_reg);
    and_ln281_1_fu_1746_p2 <= (icmp_ln281_1_fu_1740_p2 and and_ln279_1_fu_1722_p2);
    and_ln281_2_fu_1766_p2 <= (icmp_ln281_2_fu_1760_p2 and and_ln279_1_fu_1722_p2);
    and_ln281_3_fu_1798_p2 <= (icmp_ln281_4_fu_1786_p2 and icmp_ln281_3_fu_1780_p2);
    and_ln281_4_fu_1804_p2 <= (icmp_ln281_5_fu_1792_p2 and and_ln279_1_fu_1722_p2);
    and_ln281_5_fu_1810_p2 <= (and_ln281_4_fu_1804_p2 and and_ln281_3_fu_1798_p2);
    and_ln281_fu_1726_p2 <= (icmp_ln281_fu_1716_p2 and and_ln279_1_fu_1722_p2);
    and_ln285_1_fu_1846_p2 <= (icmp_ln281_fu_1716_p2 and and_ln285_fu_1841_p2);
    and_ln285_2_fu_1860_p2 <= (icmp_ln281_1_fu_1740_p2 and and_ln285_fu_1841_p2);
    and_ln285_3_fu_1874_p2 <= (icmp_ln281_2_fu_1760_p2 and and_ln285_fu_1841_p2);
    and_ln285_fu_1841_p2 <= (xor_ln273_fu_1836_p2 and icmp_ln267_reg_3222_pp0_iter4_reg);
    and_ln294_1_fu_2215_p2 <= (xor_ln279_fu_1698_p2 and icmp_ln267_4_reg_3239_pp0_iter4_reg);
    and_ln294_fu_2203_p2 <= (icmp_ln267_reg_3222_pp0_iter4_reg and icmp_ln267_4_reg_3239_pp0_iter4_reg);
    and_ln298_fu_2233_p2 <= (xor_ln267_1_fu_2228_p2 and icmp_ln298_reg_3283_pp0_iter4_reg);
    and_ln301_1_fu_2252_p2 <= (icmp_ln267_reg_3222_pp0_iter4_reg and and_ln298_fu_2233_p2);
    and_ln301_2_fu_2257_p2 <= (icmp_ln272_fu_1619_p2 and and_ln301_1_fu_2252_p2);
    and_ln301_3_fu_2271_p2 <= (icmp_ln238_reg_3201_pp0_iter4_reg and and_ln301_1_fu_2252_p2);
    and_ln301_fu_2238_p2 <= (xor_ln279_fu_1698_p2 and and_ln298_fu_2233_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_2218_assign_proc : process(ap_enable_reg_pp0_iter4, icmp_ln238_reg_3201_pp0_iter3_reg, icmp_ln246_reg_3213_pp0_iter3_reg)
    begin
                ap_condition_2218 <= ((icmp_ln246_reg_3213_pp0_iter3_reg = ap_const_lv1_1) and (icmp_ln238_reg_3201_pp0_iter3_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1));
    end process;


    ap_condition_2222_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln235_fu_837_p2, icmp_ln238_fu_856_p2, icmp_ln246_fu_931_p2)
    begin
                ap_condition_2222 <= ((icmp_ln235_fu_837_p2 = ap_const_lv1_0) and (icmp_ln246_fu_931_p2 = ap_const_lv1_0) and (icmp_ln238_fu_856_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_condition_2226_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln235_fu_837_p2, icmp_ln238_fu_856_p2, icmp_ln246_fu_931_p2)
    begin
                ap_condition_2226 <= ((icmp_ln235_fu_837_p2 = ap_const_lv1_0) and (icmp_ln246_fu_931_p2 = ap_const_lv1_1) and (icmp_ln238_fu_856_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_condition_991_assign_proc : process(icmp_ln267_4_reg_3239, icmp_ln267_1_reg_3248, icmp_ln268_reg_3259)
    begin
                ap_condition_991 <= (((icmp_ln268_reg_3259 = ap_const_lv1_1) and (icmp_ln267_4_reg_3239 = ap_const_lv1_0)) or ((icmp_ln268_reg_3259 = ap_const_lv1_1) and (icmp_ln267_1_reg_3248 = ap_const_lv1_0)));
    end process;


    ap_condition_997_assign_proc : process(icmp_ln267_4_reg_3239, icmp_ln267_1_reg_3248, icmp_ln268_reg_3259)
    begin
                ap_condition_997 <= ((icmp_ln268_reg_3259 = ap_const_lv1_0) and (icmp_ln267_1_reg_3248 = ap_const_lv1_1) and (icmp_ln267_4_reg_3239 = ap_const_lv1_0));
    end process;


    ap_condition_exit_pp0_iter1_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone, icmp_ln235_fu_837_p2)
    begin
        if (((icmp_ln235_fu_837_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter10_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter10_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11)
    begin
        if (((ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter1_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;

    d_9_fu_1335_p3 <= 
        sub_ln247_fu_1321_p2 when (tmp_19_fu_1295_p3(0) = '1') else 
        tmp_13_fu_1327_p3;
    firstBias_f_V_address0 <= idxprom82_reg_3314(3 - 1 downto 0);

    firstBias_f_V_ce0_assign_proc : process(ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            firstBias_f_V_ce0 <= ap_const_logic_1;
        else 
            firstBias_f_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    firstKernel_f_V_0_0_address0 <= idxprom82_fu_1347_p1(3 - 1 downto 0);

    firstKernel_f_V_0_0_ce0_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            firstKernel_f_V_0_0_ce0 <= ap_const_logic_1;
        else 
            firstKernel_f_V_0_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    firstKernel_f_V_0_1_address0 <= idxprom82_fu_1347_p1(3 - 1 downto 0);

    firstKernel_f_V_0_1_ce0_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            firstKernel_f_V_0_1_ce0 <= ap_const_logic_1;
        else 
            firstKernel_f_V_0_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    firstKernel_f_V_0_2_address0 <= idxprom82_reg_3314(3 - 1 downto 0);

    firstKernel_f_V_0_2_ce0_assign_proc : process(ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            firstKernel_f_V_0_2_ce0 <= ap_const_logic_1;
        else 
            firstKernel_f_V_0_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    firstKernel_f_V_1_0_address0 <= idxprom82_reg_3314(3 - 1 downto 0);

    firstKernel_f_V_1_0_ce0_assign_proc : process(ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            firstKernel_f_V_1_0_ce0 <= ap_const_logic_1;
        else 
            firstKernel_f_V_1_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    firstKernel_f_V_1_1_address0 <= idxprom82_reg_3314(3 - 1 downto 0);

    firstKernel_f_V_1_1_ce0_assign_proc : process(ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            firstKernel_f_V_1_1_ce0 <= ap_const_logic_1;
        else 
            firstKernel_f_V_1_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    firstKernel_f_V_1_2_address0 <= idxprom82_reg_3314(3 - 1 downto 0);

    firstKernel_f_V_1_2_ce0_assign_proc : process(ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            firstKernel_f_V_1_2_ce0 <= ap_const_logic_1;
        else 
            firstKernel_f_V_1_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    firstKernel_f_V_2_0_address0 <= idxprom82_reg_3314(3 - 1 downto 0);

    firstKernel_f_V_2_0_ce0_assign_proc : process(ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            firstKernel_f_V_2_0_ce0 <= ap_const_logic_1;
        else 
            firstKernel_f_V_2_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    firstKernel_f_V_2_1_address0 <= idxprom82_reg_3314(3 - 1 downto 0);

    firstKernel_f_V_2_1_ce0_assign_proc : process(ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            firstKernel_f_V_2_1_ce0 <= ap_const_logic_1;
        else 
            firstKernel_f_V_2_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    firstKernel_f_V_2_2_address0 <= idxprom82_reg_3314(3 - 1 downto 0);

    firstKernel_f_V_2_2_ce0_assign_proc : process(ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            firstKernel_f_V_2_2_ce0 <= ap_const_logic_1;
        else 
            firstKernel_f_V_2_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    firstKernel_f_V_3_0_address0 <= idxprom82_reg_3314(3 - 1 downto 0);

    firstKernel_f_V_3_0_ce0_assign_proc : process(ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            firstKernel_f_V_3_0_ce0 <= ap_const_logic_1;
        else 
            firstKernel_f_V_3_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    firstKernel_f_V_3_1_address0 <= idxprom82_reg_3314(3 - 1 downto 0);

    firstKernel_f_V_3_1_ce0_assign_proc : process(ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            firstKernel_f_V_3_1_ce0 <= ap_const_logic_1;
        else 
            firstKernel_f_V_3_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    firstKernel_f_V_3_2_address0 <= idxprom82_reg_3314(3 - 1 downto 0);

    firstKernel_f_V_3_2_ce0_assign_proc : process(ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            firstKernel_f_V_3_2_ce0 <= ap_const_logic_1;
        else 
            firstKernel_f_V_3_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    i_7_fu_919_p3 <= 
        sub_ln239_fu_905_p2 when (tmp_fu_879_p3(0) = '1') else 
        tmp_s_fu_911_p3;
    icmp_ln235_fu_837_p2 <= "1" when (id_fu_186 = ap_const_lv12_C00) else "0";
    icmp_ln238_fu_856_p2 <= "1" when (trunc_ln213_fu_852_p1 = ap_const_lv2_0) else "0";
    icmp_ln246_fu_931_p2 <= "1" when (i_7_fu_919_p3 = ap_const_lv8_0) else "0";
    icmp_ln260_1_fu_956_p2 <= "1" when (unsigned(add_ln260_fu_950_p2) < unsigned(ap_const_lv12_3)) else "0";
    icmp_ln260_fu_1577_p2 <= "1" when (trunc_ln213_reg_3190_pp0_iter4_reg = ap_const_lv2_2) else "0";
    icmp_ln267_1_fu_1041_p2 <= "0" when (t_fu_1003_p3 = ap_const_lv2_0) else "1";
    icmp_ln267_2_fu_1441_p2 <= "1" when (t_reg_3232_pp0_iter3_reg = ap_const_lv2_1) else "0";
    icmp_ln267_3_fu_1454_p2 <= "1" when (t_reg_3232_pp0_iter3_reg = ap_const_lv2_0) else "0";
    icmp_ln267_4_fu_1035_p2 <= "1" when (signed(tmp_20_fu_1025_p4) < signed(ap_const_lv10_1)) else "0";
    icmp_ln267_fu_992_p2 <= "0" when (add_ln266_fu_987_p2 = ap_const_lv2_3) else "1";
    icmp_ln268_fu_1095_p2 <= "1" when (signed(tmp_21_fu_1085_p4) < signed(ap_const_lv10_1)) else "0";
    icmp_ln272_fu_1619_p2 <= "1" when (trunc_ln213_reg_3190_pp0_iter4_reg = ap_const_lv2_1) else "0";
    icmp_ln273_fu_1159_p0 <= i_fu_314;
    icmp_ln273_fu_1159_p2 <= "1" when (signed(icmp_ln273_fu_1159_p0) > signed(ap_const_lv16_0)) else "0";
    icmp_ln275_fu_1632_p2 <= "0" when (trunc_ln213_reg_3190_pp0_iter4_reg = ap_const_lv2_0) else "1";
    icmp_ln281_1_fu_1740_p2 <= "1" when (or_ln_fu_1668_p3 = ap_const_lv3_5) else "0";
    icmp_ln281_2_fu_1760_p2 <= "1" when (or_ln_fu_1668_p3 = ap_const_lv3_6) else "0";
    icmp_ln281_3_fu_1780_p2 <= "0" when (or_ln_fu_1668_p3 = ap_const_lv3_6) else "1";
    icmp_ln281_4_fu_1786_p2 <= "0" when (or_ln_fu_1668_p3 = ap_const_lv3_5) else "1";
    icmp_ln281_5_fu_1792_p2 <= "0" when (or_ln_fu_1668_p3 = ap_const_lv3_4) else "1";
    icmp_ln281_fu_1716_p2 <= "1" when (or_ln_fu_1668_p3 = ap_const_lv3_4) else "0";
    icmp_ln298_fu_1181_p2 <= "1" when (signed(tmp_22_fu_1171_p4) < signed(ap_const_lv10_1)) else "0";
    id_2_fu_843_p2 <= std_logic_vector(unsigned(id_fu_186) + unsigned(ap_const_lv12_1));
    idxprom82_fu_1347_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(d_9_fu_1335_p3),64));

    input_r_address0_assign_proc : process(ap_enable_reg_pp0_iter3, icmp_ln267_4_reg_3239, icmp_ln267_1_reg_3248, icmp_ln268_reg_3259, zext_ln267_fu_1214_p1, ap_block_pp0_stage0, zext_ln267_1_fu_1218_p1, zext_ln268_fu_1222_p1, zext_ln269_1_fu_1226_p1, ap_condition_991, ap_condition_997)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then
            if (((icmp_ln268_reg_3259 = ap_const_lv1_0) and (icmp_ln267_1_reg_3248 = ap_const_lv1_0))) then 
                input_r_address0 <= zext_ln267_fu_1214_p1(9 - 1 downto 0);
            elsif ((ap_const_boolean_1 = ap_condition_997)) then 
                input_r_address0 <= zext_ln269_1_fu_1226_p1(9 - 1 downto 0);
            elsif ((ap_const_boolean_1 = ap_condition_991)) then 
                input_r_address0 <= zext_ln268_fu_1222_p1(9 - 1 downto 0);
            elsif (((icmp_ln267_1_reg_3248 = ap_const_lv1_1) and (icmp_ln267_4_reg_3239 = ap_const_lv1_1))) then 
                input_r_address0 <= zext_ln267_1_fu_1218_p1(9 - 1 downto 0);
            else 
                input_r_address0 <= "XXXXXXXXX";
            end if;
        else 
            input_r_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    input_r_ce0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001, icmp_ln267_4_reg_3239, icmp_ln267_1_reg_3248, icmp_ln268_reg_3259)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln268_reg_3259 = ap_const_lv1_0) and (icmp_ln267_1_reg_3248 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln268_reg_3259 = ap_const_lv1_0) and (icmp_ln267_1_reg_3248 = ap_const_lv1_1) and (icmp_ln267_4_reg_3239 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln267_1_reg_3248 = ap_const_lv1_1) and (icmp_ln267_4_reg_3239 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (((icmp_ln268_reg_3259 = ap_const_lv1_1) and (icmp_ln267_4_reg_3239 = ap_const_lv1_0)) or ((icmp_ln268_reg_3259 = ap_const_lv1_1) and (icmp_ln267_1_reg_3248 = ap_const_lv1_0)))))) then 
            input_r_ce0 <= ap_const_logic_1;
        else 
            input_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    newFirst74_fu_1067_p2 <= std_logic_vector(unsigned(zext_ln270_fu_1047_p1) - unsigned(trunc_ln267_1_fu_1051_p1));
    newFirst76_fu_1117_p2 <= std_logic_vector(unsigned(zext_ln270_fu_1047_p1) - unsigned(trunc_ln268_fu_1101_p1));
    newFirst_fu_1147_p2 <= std_logic_vector(unsigned(tmp_14_fu_1139_p3) + unsigned(zext_ln270_fu_1047_p1));
    newSecond75_fu_1073_p2 <= std_logic_vector(unsigned(tmp_42_cast_fu_1059_p3) + unsigned(newFirst74_fu_1067_p2));
    newSecond77_fu_1123_p2 <= std_logic_vector(unsigned(tmp_43_cast_fu_1109_p3) + unsigned(newFirst76_fu_1117_p2));
    newSecond_fu_1153_p2 <= std_logic_vector(unsigned(newFirst_fu_1147_p2) - unsigned(zext_ln269_fu_1135_p1));
    num_V_1_fu_2897_p3 <= 
        ap_const_lv35_0 when (tmp_23_fu_2889_p3(0) = '1') else 
        add_ln1548_fu_2884_p2;
    or_ln267_fu_1395_p2 <= (and_ln268_fu_1374_p2 or and_ln267_1_fu_1390_p2);
    or_ln268_fu_1379_p2 <= (icmp_ln268_reg_3259_pp0_iter3_reg or and_ln267_fu_1364_p2);
    or_ln285_fu_1824_p2 <= (icmp_ln273_reg_3275_pp0_iter4_reg or icmp_ln267_reg_3222_pp0_iter4_reg);
    or_ln298_fu_2284_p2 <= (icmp_ln298_reg_3283_pp0_iter4_reg or icmp_ln267_4_reg_3239_pp0_iter4_reg);
    or_ln_fu_1668_p3 <= (ap_const_lv1_1 & trunc_ln213_reg_3190_pp0_iter4_reg);
    out_r_address0 <= zext_ln323_fu_2905_p1(12 - 1 downto 0);

    out_r_ce0_assign_proc : process(ap_enable_reg_pp0_iter11, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter11 = ap_const_logic_1))) then 
            out_r_ce0 <= ap_const_logic_1;
        else 
            out_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_r_d0 <= num_V_1_reg_3708;

    out_r_we0_assign_proc : process(ap_enable_reg_pp0_iter11, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter11 = ap_const_logic_1))) then 
            out_r_we0 <= ap_const_logic_1;
        else 
            out_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

    p_and_t3_cast_fu_897_p3 <= (ap_const_lv1_0 & xor_ln239_fu_891_p2);
    p_and_t7_cast_fu_1313_p3 <= (ap_const_lv1_0 & xor_ln247_fu_1307_p2);
    select_ln260_fu_962_p3 <= 
        add_ln260_fu_950_p2 when (icmp_ln260_1_fu_956_p2(0) = '1') else 
        ap_const_lv12_0;
    select_ln267_1_fu_1425_p3 <= 
        trunc_ln267_5_fu_1417_p1 when (and_ln267_fu_1364_p2(0) = '1') else 
        trunc_ln267_6_fu_1421_p1;
    select_ln267_fu_1409_p3 <= 
        trunc_ln267_3_fu_1401_p1 when (and_ln267_1_fu_1390_p2(0) = '1') else 
        trunc_ln267_4_fu_1405_p1;
    select_ln272_1_fu_1624_p3 <= 
        tmp1_V_1_fu_322 when (icmp_ln272_fu_1619_p2(0) = '1') else 
        select_ln272_fu_1612_p3;
    select_ln272_fu_1612_p3 <= 
        tmp1_V_3_1_fu_1590_p3 when (icmp_ln238_reg_3201_pp0_iter4_reg(0) = '1') else 
        tmp1_V_2_fu_334;
    select_ln274_fu_1653_p3 <= 
        tmp1_V_0_3_fu_1598_p3 when (icmp_ln238_reg_3201_pp0_iter4_reg(0) = '1') else 
        tmp1_V_2_1_fu_338;
    select_ln275_1_fu_1683_p3 <= 
        tmp2_V_0_fu_1675_p3 when (icmp_ln275_fu_1632_p2(0) = '1') else 
        tmp2_V_0_2_fu_190;
    select_ln275_2_fu_2132_p3 <= 
        tmp2_V_6_fu_2124_p3 when (icmp_ln275_fu_1632_p2(0) = '1') else 
        tmp2_V_6_2_fu_210;
    select_ln275_3_fu_2175_p3 <= 
        tmp2_V_9_fu_2147_p14 when (icmp_ln275_fu_1632_p2(0) = '1') else 
        tmp2_V_9_2_fu_222;
    select_ln275_fu_1645_p3 <= 
        tmp2_V_3_fu_1637_p3 when (icmp_ln275_fu_1632_p2(0) = '1') else 
        tmp2_V_3_2_fu_202;
    select_ln279_1_fu_1952_p3 <= 
        tmp2_V_1_fu_1660_p3 when (and_ln279_fu_1703_p2(0) = '1') else 
        tmp2_V_1_2_fu_194;
    select_ln279_2_fu_2024_p3 <= 
        select_ln275_1_fu_1683_p3 when (and_ln279_fu_1703_p2(0) = '1') else 
        tmp2_V_0_2_fu_190;
    select_ln279_fu_1708_p3 <= 
        tmp2_V_5_2_fu_206 when (and_ln279_fu_1703_p2(0) = '1') else 
        tmp1_V_4_fu_318;
    select_ln281_10_fu_1976_p3 <= 
        tmp2_V_1_fu_1660_p3 when (and_ln281_2_fu_1766_p2(0) = '1') else 
        select_ln281_9_fu_1968_p3;
    select_ln281_11_fu_1984_p3 <= 
        tmp2_V_1_fu_1660_p3 when (and_ln281_5_fu_1810_p2(0) = '1') else 
        select_ln281_10_fu_1976_p3;
    select_ln281_12_fu_2032_p3 <= 
        select_ln275_1_fu_1683_p3 when (and_ln281_fu_1726_p2(0) = '1') else 
        select_ln279_2_fu_2024_p3;
    select_ln281_13_fu_2040_p3 <= 
        select_ln275_1_fu_1683_p3 when (and_ln281_1_fu_1746_p2(0) = '1') else 
        select_ln281_12_fu_2032_p3;
    select_ln281_14_fu_2048_p3 <= 
        select_ln275_1_fu_1683_p3 when (and_ln281_2_fu_1766_p2(0) = '1') else 
        select_ln281_13_fu_2040_p3;
    select_ln281_15_fu_2056_p3 <= 
        select_ln275_1_fu_1683_p3 when (and_ln281_5_fu_1810_p2(0) = '1') else 
        select_ln281_14_fu_2048_p3;
    select_ln281_1_fu_1752_p3 <= 
        tmp1_V_2_fu_334 when (and_ln281_1_fu_1746_p2(0) = '1') else 
        select_ln281_fu_1732_p3;
    select_ln281_2_fu_1772_p3 <= 
        tmp1_V_6_1_fu_1582_p3 when (and_ln281_2_fu_1766_p2(0) = '1') else 
        select_ln281_1_fu_1752_p3;
    select_ln281_3_fu_1816_p3 <= 
        tmp1_V_4_fu_318 when (and_ln281_5_fu_1810_p2(0) = '1') else 
        select_ln281_2_fu_1772_p3;
    select_ln281_4_fu_1888_p3 <= 
        tmp2_V_2_fu_1691_p3 when (and_ln281_fu_1726_p2(0) = '1') else 
        tmp2_V_2_2_fu_198;
    select_ln281_5_fu_1896_p3 <= 
        tmp2_V_2_fu_1691_p3 when (and_ln281_1_fu_1746_p2(0) = '1') else 
        select_ln281_4_fu_1888_p3;
    select_ln281_6_fu_1904_p3 <= 
        tmp2_V_2_fu_1691_p3 when (and_ln281_2_fu_1766_p2(0) = '1') else 
        select_ln281_5_fu_1896_p3;
    select_ln281_7_fu_1912_p3 <= 
        tmp2_V_2_fu_1691_p3 when (and_ln281_5_fu_1810_p2(0) = '1') else 
        select_ln281_6_fu_1904_p3;
    select_ln281_8_fu_1960_p3 <= 
        tmp2_V_1_fu_1660_p3 when (and_ln281_fu_1726_p2(0) = '1') else 
        select_ln279_1_fu_1952_p3;
    select_ln281_9_fu_1968_p3 <= 
        tmp2_V_1_fu_1660_p3 when (and_ln281_1_fu_1746_p2(0) = '1') else 
        select_ln281_8_fu_1960_p3;
    select_ln281_fu_1732_p3 <= 
        tmp1_V_1_fu_322 when (and_ln281_fu_1726_p2(0) = '1') else 
        select_ln279_fu_1708_p3;
    select_ln285_10_fu_2008_p3 <= 
        tmp2_V_1_2_fu_194 when (and_ln285_2_fu_1860_p2(0) = '1') else 
        select_ln285_9_fu_2000_p3;
    select_ln285_11_fu_2016_p3 <= 
        tmp2_V_1_2_fu_194 when (and_ln285_3_fu_1874_p2(0) = '1') else 
        select_ln285_10_fu_2008_p3;
    select_ln285_12_fu_2064_p3 <= 
        select_ln281_15_fu_2056_p3 when (or_ln285_fu_1824_p2(0) = '1') else 
        tmp2_V_0_2_fu_190;
    select_ln285_13_fu_2072_p3 <= 
        tmp2_V_0_2_fu_190 when (and_ln285_1_fu_1846_p2(0) = '1') else 
        select_ln285_12_fu_2064_p3;
    select_ln285_14_fu_2080_p3 <= 
        tmp2_V_0_2_fu_190 when (and_ln285_2_fu_1860_p2(0) = '1') else 
        select_ln285_13_fu_2072_p3;
    select_ln285_15_fu_2088_p3 <= 
        tmp2_V_0_2_fu_190 when (and_ln285_3_fu_1874_p2(0) = '1') else 
        select_ln285_14_fu_2080_p3;
    select_ln285_1_fu_1852_p3 <= 
        tmp1_V_1_fu_322 when (and_ln285_1_fu_1846_p2(0) = '1') else 
        select_ln285_fu_1828_p3;
    select_ln285_2_fu_1866_p3 <= 
        tmp1_V_2_fu_334 when (and_ln285_2_fu_1860_p2(0) = '1') else 
        select_ln285_1_fu_1852_p3;
    select_ln285_3_fu_1880_p3 <= 
        tmp1_V_6_1_fu_1582_p3 when (and_ln285_3_fu_1874_p2(0) = '1') else 
        select_ln285_2_fu_1866_p3;
    select_ln285_4_fu_1920_p3 <= 
        select_ln281_7_fu_1912_p3 when (or_ln285_fu_1824_p2(0) = '1') else 
        tmp2_V_2_2_fu_198;
    select_ln285_5_fu_1928_p3 <= 
        tmp2_V_2_2_fu_198 when (and_ln285_1_fu_1846_p2(0) = '1') else 
        select_ln285_4_fu_1920_p3;
    select_ln285_6_fu_1936_p3 <= 
        tmp2_V_2_2_fu_198 when (and_ln285_2_fu_1860_p2(0) = '1') else 
        select_ln285_5_fu_1928_p3;
    select_ln285_7_fu_1944_p3 <= 
        tmp2_V_2_2_fu_198 when (and_ln285_3_fu_1874_p2(0) = '1') else 
        select_ln285_6_fu_1936_p3;
    select_ln285_8_fu_1992_p3 <= 
        select_ln281_11_fu_1984_p3 when (or_ln285_fu_1824_p2(0) = '1') else 
        tmp2_V_1_2_fu_194;
    select_ln285_9_fu_2000_p3 <= 
        tmp2_V_1_2_fu_194 when (and_ln285_1_fu_1846_p2(0) = '1') else 
        select_ln285_8_fu_1992_p3;
    select_ln285_fu_1828_p3 <= 
        select_ln281_3_fu_1816_p3 when (or_ln285_fu_1824_p2(0) = '1') else 
        tmp2_V_5_2_fu_206;
    select_ln288_fu_2096_p3 <= 
        tmp1_V_6_1_fu_1582_p3 when (icmp_ln238_reg_3201_pp0_iter4_reg(0) = '1') else 
        tmp1_V_5_fu_330;
    select_ln294_1_fu_2220_p3 <= 
        tmp2_V_11_2_fu_230 when (and_ln294_1_fu_2215_p2(0) = '1') else 
        select_ln294_fu_2207_p3;
    select_ln294_2_fu_2296_p3 <= 
        tmp1_V_11_33_fu_2117_p3 when (and_ln294_fu_2203_p2(0) = '1') else 
        tmp2_V_10_2_fu_226;
    select_ln294_3_fu_2304_p3 <= 
        tmp1_V_11_33_fu_2117_p3 when (and_ln294_1_fu_2215_p2(0) = '1') else 
        select_ln294_2_fu_2296_p3;
    select_ln294_4_fu_2344_p3 <= 
        select_ln275_3_fu_2175_p3 when (and_ln294_fu_2203_p2(0) = '1') else 
        tmp2_V_9_2_fu_222;
    select_ln294_5_fu_2352_p3 <= 
        select_ln275_3_fu_2175_p3 when (and_ln294_1_fu_2215_p2(0) = '1') else 
        select_ln294_4_fu_2344_p3;
    select_ln294_6_fu_2392_p3 <= 
        tmp1_V_11_34_fu_2190_p3 when (and_ln294_fu_2203_p2(0) = '1') else 
        tmp1_V_11_27_fu_1606_p3;
    select_ln294_7_fu_2400_p3 <= 
        tmp2_V_8_2_fu_218 when (and_ln294_1_fu_2215_p2(0) = '1') else 
        select_ln294_6_fu_2392_p3;
    select_ln294_fu_2207_p3 <= 
        tmp2_V_11_fu_2198_p3 when (and_ln294_fu_2203_p2(0) = '1') else 
        tmp2_V_11_2_fu_230;
    select_ln298_1_fu_2336_p3 <= 
        select_ln301_5_fu_2328_p3 when (or_ln298_fu_2284_p2(0) = '1') else 
        tmp2_V_10_2_fu_226;
    select_ln298_2_fu_2384_p3 <= 
        select_ln301_8_fu_2376_p3 when (or_ln298_fu_2284_p2(0) = '1') else 
        tmp2_V_9_2_fu_222;
    select_ln298_3_fu_2432_p3 <= 
        select_ln301_11_fu_2424_p3 when (or_ln298_fu_2284_p2(0) = '1') else 
        tmp2_V_8_2_fu_218;
    select_ln298_5_fu_2448_p3 <= 
        select_ln275_2_fu_2132_p3 when (or_ln298_fu_2284_p2(0) = '1') else 
        tmp2_V_6_2_fu_210;
    select_ln298_fu_2288_p3 <= 
        select_ln301_2_fu_2276_p3 when (or_ln298_fu_2284_p2(0) = '1') else 
        tmp2_V_11_2_fu_230;
    select_ln301_10_fu_2416_p3 <= 
        tmp1_V_5_fu_330 when (and_ln301_2_fu_2257_p2(0) = '1') else 
        select_ln301_9_fu_2408_p3;
    select_ln301_11_fu_2424_p3 <= 
        tmp1_V_4_fu_318 when (and_ln301_3_fu_2271_p2(0) = '1') else 
        select_ln301_10_fu_2416_p3;
    select_ln301_1_fu_2263_p3 <= 
        tmp2_V_11_2_fu_230 when (and_ln301_2_fu_2257_p2(0) = '1') else 
        select_ln301_fu_2244_p3;
    select_ln301_2_fu_2276_p3 <= 
        tmp2_V_11_2_fu_230 when (and_ln301_3_fu_2271_p2(0) = '1') else 
        select_ln301_1_fu_2263_p3;
    select_ln301_3_fu_2312_p3 <= 
        tmp2_V_10_2_fu_226 when (and_ln301_fu_2238_p2(0) = '1') else 
        select_ln294_3_fu_2304_p3;
    select_ln301_4_fu_2320_p3 <= 
        tmp2_V_10_2_fu_226 when (and_ln301_2_fu_2257_p2(0) = '1') else 
        select_ln301_3_fu_2312_p3;
    select_ln301_5_fu_2328_p3 <= 
        tmp2_V_10_2_fu_226 when (and_ln301_3_fu_2271_p2(0) = '1') else 
        select_ln301_4_fu_2320_p3;
    select_ln301_6_fu_2360_p3 <= 
        tmp2_V_9_2_fu_222 when (and_ln301_fu_2238_p2(0) = '1') else 
        select_ln294_5_fu_2352_p3;
    select_ln301_7_fu_2368_p3 <= 
        tmp2_V_9_2_fu_222 when (and_ln301_2_fu_2257_p2(0) = '1') else 
        select_ln301_6_fu_2360_p3;
    select_ln301_8_fu_2376_p3 <= 
        tmp2_V_9_2_fu_222 when (and_ln301_3_fu_2271_p2(0) = '1') else 
        select_ln301_7_fu_2368_p3;
    select_ln301_9_fu_2408_p3 <= 
        tmp2_V_8_2_fu_218 when (and_ln301_fu_2238_p2(0) = '1') else 
        select_ln294_7_fu_2400_p3;
    select_ln301_fu_2244_p3 <= 
        tmp2_V_11_2_fu_230 when (and_ln301_fu_2238_p2(0) = '1') else 
        select_ln294_1_fu_2220_p3;
        sext_ln239_1_fu_927_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(i_7_fu_919_p3),16));

    sext_ln239_fu_865_p0 <= i_fu_314;
        sext_ln239_fu_865_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln239_fu_865_p0),17));

        sext_ln247_1_fu_1343_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(d_9_fu_1335_p3),16));

    sext_ln247_fu_1281_p0 <= d_fu_262;
        sext_ln247_fu_1281_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln247_fu_1281_p0),17));

        sext_ln254_10_fu_2580_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(firstKernel_f_V_3_1_q0),36));

        sext_ln254_11_fu_2584_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(firstKernel_f_V_3_2_q0),36));

        sext_ln254_1_fu_1497_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(firstKernel_f_V_0_1_q0),36));

        sext_ln254_2_fu_2548_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(firstKernel_f_V_0_2_q0),36));

        sext_ln254_3_fu_2552_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(firstKernel_f_V_1_0_q0),36));

        sext_ln254_4_fu_2556_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(firstKernel_f_V_1_1_q0),36));

        sext_ln254_5_fu_2560_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(firstKernel_f_V_1_2_q0),36));

        sext_ln254_6_fu_2564_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(firstKernel_f_V_2_0_q0),36));

        sext_ln254_7_fu_2568_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(firstKernel_f_V_2_1_q0),36));

        sext_ln254_8_fu_2572_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(firstKernel_f_V_2_2_q0),36));

        sext_ln254_9_fu_2576_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(firstKernel_f_V_3_0_q0),36));

        sext_ln254_fu_1493_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(firstKernel_f_V_0_0_q0),36));

        sext_ln260_fu_2662_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(firstBias_f_V_load_reg_3483),36));

    sext_ln267_fu_1015_p0 <= i_fu_314;
        sext_ln267_fu_1015_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln267_fu_1015_p0),17));

    sub_ln239_fu_905_p2 <= std_logic_vector(unsigned(ap_const_lv8_0) - unsigned(p_and_t3_cast_fu_897_p3));
    sub_ln247_fu_1321_p2 <= std_logic_vector(unsigned(ap_const_lv4_0) - unsigned(p_and_t7_cast_fu_1313_p3));
    sub_ln323_fu_1203_p2 <= std_logic_vector(unsigned(tmp_49_cast_fu_1195_p3) - unsigned(trunc_ln323_fu_1187_p1));
    t_fu_1003_p3 <= 
        add_ln266_fu_987_p2 when (icmp_ln267_fu_992_p2(0) = '1') else 
        xor_ln267_2_fu_998_p2;
    tmp1_V_0_3_fu_1598_p3 <= 
        tmp1_V_0_fu_238 when (icmp_ln260_fu_1577_p2(0) = '1') else 
        tmp1_V_0_2_fu_234;
    tmp1_V_11_21_fu_1446_p3 <= 
        tmp1_V_8_fu_254 when (icmp_ln267_2_fu_1441_p2(0) = '1') else 
        tmp1_V_11_32_fu_1433_p3;
    tmp1_V_11_22_fu_1459_p3 <= 
        tmp1_V_8_fu_254 when (icmp_ln267_3_fu_1454_p2(0) = '1') else 
        tmp1_V_11_21_fu_1446_p3;
    tmp1_V_11_23_fu_1467_p3 <= 
        tmp1_V_11_32_fu_1433_p3 when (icmp_ln267_2_fu_1441_p2(0) = '1') else 
        tmp1_V_7_fu_250;
    tmp1_V_11_26_fu_1475_p3 <= 
        tmp1_V_7_fu_250 when (icmp_ln267_3_fu_1454_p2(0) = '1') else 
        tmp1_V_11_23_fu_1467_p3;
    tmp1_V_11_27_fu_1606_p3 <= 
        tmp1_V_11_32_reg_3339 when (icmp_ln267_3_reg_3344(0) = '1') else 
        tmp1_V_11_fu_246;
    tmp1_V_11_28_fu_2111_p3 <= 
        tmp1_V_11_27_fu_1606_p3 when (icmp_ln238_reg_3201_pp0_iter4_reg(0) = '1') else 
        tmp1_V_11_22_reg_3349;
    tmp1_V_11_30_fu_2183_p3 <= 
        tmp1_V_4_fu_318 when (icmp_ln238_reg_3201_pp0_iter4_reg(0) = '1') else 
        tmp1_V_11_27_fu_1606_p3;
    tmp1_V_11_32_fu_1433_p3 <= 
        select_ln267_fu_1409_p3 when (or_ln267_fu_1395_p2(0) = '1') else 
        select_ln267_1_fu_1425_p3;
    tmp1_V_11_33_fu_2117_p3 <= 
        tmp1_V_11_26_reg_3356 when (icmp_ln272_fu_1619_p2(0) = '1') else 
        tmp1_V_11_28_fu_2111_p3;
    tmp1_V_11_34_fu_2190_p3 <= 
        tmp1_V_5_fu_330 when (icmp_ln272_fu_1619_p2(0) = '1') else 
        tmp1_V_11_30_fu_2183_p3;
    tmp1_V_3_1_fu_1590_p3 <= 
        tmp1_V_3_fu_242 when (icmp_ln260_fu_1577_p2(0) = '1') else 
        tmp1_V_0_fu_238;
    tmp1_V_6_1_fu_1582_p3 <= 
        tmp1_V_11_fu_246 when (icmp_ln260_fu_1577_p2(0) = '1') else 
        tmp1_V_3_fu_242;
    tmp2_V_0_fu_1675_p3 <= 
        tmp1_V_0_3_fu_1598_p3 when (icmp_ln272_fu_1619_p2(0) = '1') else 
        tmp1_V_1_1_fu_326;
    tmp2_V_11_fu_2198_p3 <= 
        tmp1_V_11_26_reg_3356 when (icmp_ln238_reg_3201_pp0_iter4_reg(0) = '1') else 
        tmp1_V_11_22_reg_3349;
    tmp2_V_1_fu_1660_p3 <= 
        tmp1_V_1_1_fu_326 when (icmp_ln272_fu_1619_p2(0) = '1') else 
        select_ln274_fu_1653_p3;
    tmp2_V_2_fu_1691_p3 <= 
        tmp1_V_1_1_fu_326 when (icmp_ln238_reg_3201_pp0_iter4_reg(0) = '1') else 
        tmp1_V_2_1_fu_338;
    tmp2_V_3_fu_1637_p3 <= 
        tmp1_V_3_1_fu_1590_p3 when (icmp_ln272_fu_1619_p2(0) = '1') else 
        tmp1_V_1_fu_322;
    tmp2_V_6_fu_2124_p3 <= 
        tmp1_V_6_1_fu_1582_p3 when (icmp_ln272_fu_1619_p2(0) = '1') else 
        tmp1_V_4_fu_318;
    tmp2_V_7_1_fu_2440_p3 <= 
        tmp2_V_7_fu_2103_p3 when (or_ln298_fu_2284_p2(0) = '1') else 
        tmp2_V_7_2_fu_214;
    tmp2_V_7_fu_2103_p3 <= 
        tmp1_V_4_fu_318 when (icmp_ln272_fu_1619_p2(0) = '1') else 
        select_ln288_fu_2096_p3;
    tmp2_V_9_fu_2147_p13 <= (ap_const_lv2_2 & trunc_ln213_reg_3190_pp0_iter4_reg);
    tmp_13_fu_1327_p3 <= (ap_const_lv1_0 & trunc_ln247_1_fu_1303_p1);
    tmp_14_fu_1139_p3 <= (add_ln269_fu_1129_p2 & ap_const_lv2_0);
    tmp_19_fu_1295_p3 <= add_ln247_fu_1289_p2(16 downto 16);
    tmp_20_fu_1025_p4 <= add_ln267_fu_1019_p2(16 downto 7);
    tmp_21_fu_1085_p4 <= add_ln268_fu_1079_p2(16 downto 7);
    tmp_22_fu_1171_p4 <= add_ln298_fu_1165_p2(16 downto 7);
    tmp_23_fu_2889_p3 <= add_ln712_11_fu_2879_p2(35 downto 35);
    tmp_42_cast_fu_1059_p3 <= (trunc_ln267_2_fu_1055_p1 & ap_const_lv2_0);
    tmp_43_cast_fu_1109_p3 <= (trunc_ln268_1_fu_1105_p1 & ap_const_lv2_0);
    tmp_49_cast_fu_1195_p3 <= (trunc_ln323_1_fu_1191_p1 & ap_const_lv2_0);
    tmp_51_cast_fu_2456_p3 <= (add_ln323_reg_3289_pp0_iter4_reg & ap_const_lv3_0);
    tmp_fu_879_p3 <= add_ln239_fu_873_p2(16 downto 16);
    tmp_s_fu_911_p3 <= (ap_const_lv1_0 & trunc_ln239_1_fu_887_p1);
    trunc_ln213_fu_852_p1 <= j_fu_182(2 - 1 downto 0);
    trunc_ln239_1_fu_887_p1 <= add_ln239_fu_873_p2(7 - 1 downto 0);
    trunc_ln239_fu_869_p0 <= i_fu_314;
    trunc_ln239_fu_869_p1 <= trunc_ln239_fu_869_p0(7 - 1 downto 0);
    trunc_ln247_1_fu_1303_p1 <= add_ln247_fu_1289_p2(3 - 1 downto 0);
    trunc_ln247_fu_1285_p0 <= d_fu_262;
    trunc_ln247_fu_1285_p1 <= trunc_ln247_fu_1285_p0(3 - 1 downto 0);
    trunc_ln267_1_fu_1051_p1 <= add_ln267_fu_1019_p2(9 - 1 downto 0);
    trunc_ln267_2_fu_1055_p1 <= add_ln267_fu_1019_p2(7 - 1 downto 0);
    trunc_ln267_3_fu_1401_p1 <= input_r_q0(12 - 1 downto 0);
    trunc_ln267_4_fu_1405_p1 <= input_r_q0(12 - 1 downto 0);
    trunc_ln267_5_fu_1417_p1 <= input_r_q0(12 - 1 downto 0);
    trunc_ln267_6_fu_1421_p1 <= input_r_q0(12 - 1 downto 0);
    trunc_ln267_fu_1011_p0 <= i_fu_314;
    trunc_ln267_fu_1011_p1 <= trunc_ln267_fu_1011_p0(7 - 1 downto 0);
    trunc_ln268_1_fu_1105_p1 <= add_ln268_fu_1079_p2(7 - 1 downto 0);
    trunc_ln268_fu_1101_p1 <= add_ln268_fu_1079_p2(9 - 1 downto 0);
    trunc_ln323_1_fu_1191_p0 <= i_fu_314;
    trunc_ln323_1_fu_1191_p1 <= trunc_ln323_1_fu_1191_p0(7 - 1 downto 0);
    trunc_ln323_2_fu_970_p1 <= j_fu_182(9 - 1 downto 0);
    trunc_ln323_3_fu_2463_p1 <= d_fu_262(12 - 1 downto 0);
    trunc_ln323_fu_1187_p0 <= i_fu_314;
    trunc_ln323_fu_1187_p1 <= trunc_ln323_fu_1187_p0(9 - 1 downto 0);
    trunc_ln712_1_fu_2829_p1 <= add_ln712_3_fu_2820_p2(35 - 1 downto 0);
    trunc_ln712_2_fu_2841_p1 <= add_ln712_7_fu_2833_p2(35 - 1 downto 0);
    trunc_ln712_3_fu_2845_p1 <= add_ln712_8_fu_2837_p2(35 - 1 downto 0);
    trunc_ln712_4_fu_2803_p1 <= add_ln712_6_fu_2798_p2(35 - 1 downto 0);
    trunc_ln712_fu_2825_p1 <= add_ln712_1_fu_2811_p2(35 - 1 downto 0);
    xor_ln239_fu_891_p2 <= (trunc_ln239_fu_869_p1 xor ap_const_lv7_7F);
    xor_ln247_fu_1307_p2 <= (trunc_ln247_fu_1285_p1 xor ap_const_lv3_7);
    xor_ln267_1_fu_2228_p2 <= (icmp_ln267_4_reg_3239_pp0_iter4_reg xor ap_const_lv1_1);
    xor_ln267_2_fu_998_p2 <= (trunc_ln213_reg_3190 xor ap_const_lv2_2);
    xor_ln267_fu_1368_p2 <= (ap_const_lv1_1 xor and_ln267_fu_1364_p2);
    xor_ln268_fu_1384_p2 <= (or_ln268_fu_1379_p2 xor ap_const_lv1_1);
    xor_ln273_fu_1836_p2 <= (icmp_ln273_reg_3275_pp0_iter4_reg xor ap_const_lv1_1);
    xor_ln279_fu_1698_p2 <= (icmp_ln267_reg_3222_pp0_iter4_reg xor ap_const_lv1_1);
    zext_ln267_1_fu_1218_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(newSecond75_reg_3254),64));
    zext_ln267_fu_1214_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(t_reg_3232),64));
    zext_ln268_fu_1222_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(newSecond77_reg_3265),64));
    zext_ln269_1_fu_1226_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(newSecond_reg_3270),64));
    zext_ln269_fu_1135_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln269_fu_1129_p2),9));
    zext_ln270_fu_1047_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(t_fu_1003_p3),9));
    zext_ln323_fu_2905_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln323_1_reg_3478_pp0_iter10_reg),64));
end behav;
