-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
-- Version: 2021.1
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity master_fix_convolution1_fix_Pipeline_Conv_loop is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    tmp1_V_11_0_reload : IN STD_LOGIC_VECTOR (11 downto 0);
    tmp1_V_10_0_reload : IN STD_LOGIC_VECTOR (11 downto 0);
    tmp1_V_9 : IN STD_LOGIC_VECTOR (11 downto 0);
    tmp1_V_11_4_reload : IN STD_LOGIC_VECTOR (11 downto 0);
    tmp1_V_11_6_reload : IN STD_LOGIC_VECTOR (11 downto 0);
    tmp1_V_11_9_reload : IN STD_LOGIC_VECTOR (11 downto 0);
    tmp1_V_5_0_reload : IN STD_LOGIC_VECTOR (11 downto 0);
    tmp1_V_4_0_reload : IN STD_LOGIC_VECTOR (11 downto 0);
    tmp1_V_11_11_reload : IN STD_LOGIC_VECTOR (11 downto 0);
    tmp1_V_2_0_reload : IN STD_LOGIC_VECTOR (11 downto 0);
    tmp1_V_1_0_reload : IN STD_LOGIC_VECTOR (11 downto 0);
    tmp1_V_0_0_reload : IN STD_LOGIC_VECTOR (11 downto 0);
    tmp2_V_11_0_reload : IN STD_LOGIC_VECTOR (11 downto 0);
    tmp2_V_10_0_reload : IN STD_LOGIC_VECTOR (11 downto 0);
    tmp2_V_9_0_reload : IN STD_LOGIC_VECTOR (11 downto 0);
    tmp2_V_8_0_reload : IN STD_LOGIC_VECTOR (11 downto 0);
    tmp2_V_7_0_reload : IN STD_LOGIC_VECTOR (11 downto 0);
    tmp2_V_6_0_reload : IN STD_LOGIC_VECTOR (11 downto 0);
    tmp2_V_5_0_reload : IN STD_LOGIC_VECTOR (11 downto 0);
    tmp2_V_3_0_reload : IN STD_LOGIC_VECTOR (11 downto 0);
    tmp2_V_2_0_reload : IN STD_LOGIC_VECTOR (11 downto 0);
    tmp2_V_1_0_reload : IN STD_LOGIC_VECTOR (11 downto 0);
    tmp2_V_0_0_reload : IN STD_LOGIC_VECTOR (11 downto 0);
    input_r_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    input_r_ce0 : OUT STD_LOGIC;
    input_r_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    out_r_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    out_r_ce0 : OUT STD_LOGIC;
    out_r_we0 : OUT STD_LOGIC;
    out_r_d0 : OUT STD_LOGIC_VECTOR (34 downto 0) );
end;


architecture behav of master_fix_convolution1_fix_Pipeline_Conv_loop is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv16_FFFF : STD_LOGIC_VECTOR (15 downto 0) := "1111111111111111";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv12_C00 : STD_LOGIC_VECTOR (11 downto 0) := "110000000000";
    constant ap_const_lv12_1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv17_1 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv7_7F : STD_LOGIC_VECTOR (6 downto 0) := "1111111";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv12_3 : STD_LOGIC_VECTOR (11 downto 0) := "000000000011";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv17_2 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000010";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv17_3 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000011";
    constant ap_const_lv7_2 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_const_lv7_3 : STD_LOGIC_VECTOR (6 downto 0) := "0000011";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv35_0 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000000000000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln197_fu_839_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter1_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal firstKernel_f_V_0_0_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal firstKernel_f_V_0_0_ce0 : STD_LOGIC;
    signal firstKernel_f_V_0_0_q0 : STD_LOGIC_VECTOR (18 downto 0);
    signal firstKernel_f_V_0_1_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal firstKernel_f_V_0_1_ce0 : STD_LOGIC;
    signal firstKernel_f_V_0_1_q0 : STD_LOGIC_VECTOR (18 downto 0);
    signal firstKernel_f_V_0_2_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal firstKernel_f_V_0_2_ce0 : STD_LOGIC;
    signal firstKernel_f_V_0_2_q0 : STD_LOGIC_VECTOR (19 downto 0);
    signal firstKernel_f_V_1_0_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal firstKernel_f_V_1_0_ce0 : STD_LOGIC;
    signal firstKernel_f_V_1_0_q0 : STD_LOGIC_VECTOR (17 downto 0);
    signal firstKernel_f_V_1_1_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal firstKernel_f_V_1_1_ce0 : STD_LOGIC;
    signal firstKernel_f_V_1_1_q0 : STD_LOGIC_VECTOR (17 downto 0);
    signal firstKernel_f_V_1_2_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal firstKernel_f_V_1_2_ce0 : STD_LOGIC;
    signal firstKernel_f_V_1_2_q0 : STD_LOGIC_VECTOR (17 downto 0);
    signal firstKernel_f_V_2_0_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal firstKernel_f_V_2_0_ce0 : STD_LOGIC;
    signal firstKernel_f_V_2_0_q0 : STD_LOGIC_VECTOR (17 downto 0);
    signal firstKernel_f_V_2_1_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal firstKernel_f_V_2_1_ce0 : STD_LOGIC;
    signal firstKernel_f_V_2_1_q0 : STD_LOGIC_VECTOR (17 downto 0);
    signal firstKernel_f_V_2_2_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal firstKernel_f_V_2_2_ce0 : STD_LOGIC;
    signal firstKernel_f_V_2_2_q0 : STD_LOGIC_VECTOR (17 downto 0);
    signal firstKernel_f_V_3_0_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal firstKernel_f_V_3_0_ce0 : STD_LOGIC;
    signal firstKernel_f_V_3_0_q0 : STD_LOGIC_VECTOR (17 downto 0);
    signal firstKernel_f_V_3_1_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal firstKernel_f_V_3_1_ce0 : STD_LOGIC;
    signal firstKernel_f_V_3_1_q0 : STD_LOGIC_VECTOR (18 downto 0);
    signal firstKernel_f_V_3_2_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal firstKernel_f_V_3_2_ce0 : STD_LOGIC;
    signal firstKernel_f_V_3_2_q0 : STD_LOGIC_VECTOR (18 downto 0);
    signal firstBias_f_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal firstBias_f_V_ce0 : STD_LOGIC;
    signal firstBias_f_V_q0 : STD_LOGIC_VECTOR (21 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal trunc_ln173_fu_854_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln173_reg_3222 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln173_reg_3222_pp0_iter2_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln173_reg_3222_pp0_iter3_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln173_reg_3222_pp0_iter4_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln200_fu_858_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln200_reg_3233 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln200_reg_3233_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln200_reg_3233_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln200_reg_3233_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln200_reg_3233_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln200_reg_3233_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln208_fu_933_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln208_reg_3245 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln208_reg_3245_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln208_reg_3245_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln208_reg_3245_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln208_reg_3245_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln208_reg_3245_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln274_2_fu_972_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln274_2_reg_3249 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln229_fu_994_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln229_reg_3254 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln229_reg_3254_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln229_reg_3254_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal t_fu_1005_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal t_reg_3264 : STD_LOGIC_VECTOR (1 downto 0);
    signal t_reg_3264_pp0_iter3_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln229_4_fu_1037_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln229_4_reg_3270 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln229_4_reg_3270_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln229_4_reg_3270_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln229_1_fu_1043_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln229_1_reg_3279 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln229_1_reg_3279_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal newSecond75_fu_1075_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal newSecond75_reg_3285 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln230_fu_1097_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln230_reg_3290 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln230_reg_3290_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal newSecond77_fu_1125_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal newSecond77_reg_3296 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln231_1_fu_1155_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln231_1_reg_3301 : STD_LOGIC_VECTOR (8 downto 0);
    signal newSecond_fu_1185_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal newSecond_reg_3306 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln235_fu_1191_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln235_reg_3311 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln235_reg_3311_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln235_reg_3311_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln260_fu_1213_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln260_reg_3319 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln260_reg_3319_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln260_reg_3319_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln274_fu_1241_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln274_reg_3325 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln274_reg_3325_pp0_iter3_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln274_reg_3325_pp0_iter4_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal idxprom87_fu_1379_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal idxprom87_reg_3350 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp1_V_11_35_fu_1465_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp1_V_11_35_reg_3375 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln229_3_fu_1486_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln229_3_reg_3380 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp1_V_11_25_fu_1491_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp1_V_11_25_reg_3385 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp1_V_11_29_fu_1507_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp1_V_11_29_reg_3392 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln234_1_fu_1656_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln234_1_reg_3454 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln234_1_reg_3454_pp0_iter6_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln237_fu_1677_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln237_reg_3459 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln237_reg_3459_pp0_iter6_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln247_3_fu_1912_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln247_3_reg_3464 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln247_3_reg_3464_pp0_iter6_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln247_7_fu_1976_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln247_7_reg_3469 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln247_7_reg_3469_pp0_iter6_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln247_11_fu_2048_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln247_11_reg_3474 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln247_15_fu_2120_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln247_15_reg_3479 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln260_fu_2320_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln260_reg_3484 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln260_reg_3484_pp0_iter6_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln260_1_fu_2368_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln260_1_reg_3489 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln260_1_reg_3489_pp0_iter6_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln260_2_fu_2416_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln260_2_reg_3494 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln260_2_reg_3494_pp0_iter6_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln260_3_fu_2464_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln260_3_reg_3499 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln260_3_reg_3499_pp0_iter6_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp2_V_7_1_fu_2472_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp2_V_7_1_reg_3504 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp2_V_7_1_reg_3504_pp0_iter6_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln260_5_fu_2480_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln260_5_reg_3509 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln260_5_reg_3509_pp0_iter6_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln274_1_fu_2499_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln274_1_reg_3514 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln274_1_reg_3514_pp0_iter6_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln274_1_reg_3514_pp0_iter7_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln274_1_reg_3514_pp0_iter8_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln274_1_reg_3514_pp0_iter9_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln274_1_reg_3514_pp0_iter10_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal firstBias_f_V_load_reg_3519 : STD_LOGIC_VECTOR (21 downto 0);
    signal grp_fu_2679_p2 : STD_LOGIC_VECTOR (35 downto 0);
    signal mul_ln712_reg_3594 : STD_LOGIC_VECTOR (35 downto 0);
    signal grp_fu_2688_p2 : STD_LOGIC_VECTOR (35 downto 0);
    signal mul_ln712_1_reg_3599 : STD_LOGIC_VECTOR (35 downto 0);
    signal grp_fu_2735_p2 : STD_LOGIC_VECTOR (35 downto 0);
    signal mul_ln712_2_reg_3654 : STD_LOGIC_VECTOR (35 downto 0);
    signal grp_fu_2744_p2 : STD_LOGIC_VECTOR (35 downto 0);
    signal mul_ln712_3_reg_3659 : STD_LOGIC_VECTOR (35 downto 0);
    signal grp_fu_2753_p2 : STD_LOGIC_VECTOR (35 downto 0);
    signal mul_ln712_4_reg_3664 : STD_LOGIC_VECTOR (35 downto 0);
    signal grp_fu_2762_p2 : STD_LOGIC_VECTOR (35 downto 0);
    signal mul_ln712_5_reg_3669 : STD_LOGIC_VECTOR (35 downto 0);
    signal grp_fu_2771_p2 : STD_LOGIC_VECTOR (35 downto 0);
    signal mul_ln712_6_reg_3674 : STD_LOGIC_VECTOR (35 downto 0);
    signal grp_fu_2780_p2 : STD_LOGIC_VECTOR (35 downto 0);
    signal mul_ln712_7_reg_3679 : STD_LOGIC_VECTOR (35 downto 0);
    signal grp_fu_2789_p2 : STD_LOGIC_VECTOR (35 downto 0);
    signal mul_ln712_8_reg_3684 : STD_LOGIC_VECTOR (35 downto 0);
    signal grp_fu_2798_p2 : STD_LOGIC_VECTOR (35 downto 0);
    signal mul_ln712_9_reg_3689 : STD_LOGIC_VECTOR (35 downto 0);
    signal grp_fu_2807_p2 : STD_LOGIC_VECTOR (35 downto 0);
    signal mul_ln712_10_reg_3694 : STD_LOGIC_VECTOR (35 downto 0);
    signal grp_fu_2816_p2 : STD_LOGIC_VECTOR (35 downto 0);
    signal mul_ln712_11_reg_3699 : STD_LOGIC_VECTOR (35 downto 0);
    signal add_ln712_6_fu_2830_p2 : STD_LOGIC_VECTOR (35 downto 0);
    signal add_ln712_6_reg_3704 : STD_LOGIC_VECTOR (35 downto 0);
    signal trunc_ln712_4_fu_2835_p1 : STD_LOGIC_VECTOR (34 downto 0);
    signal trunc_ln712_4_reg_3709 : STD_LOGIC_VECTOR (34 downto 0);
    signal add_ln712_1_fu_2843_p2 : STD_LOGIC_VECTOR (35 downto 0);
    signal add_ln712_1_reg_3714 : STD_LOGIC_VECTOR (35 downto 0);
    signal add_ln712_3_fu_2852_p2 : STD_LOGIC_VECTOR (35 downto 0);
    signal add_ln712_3_reg_3719 : STD_LOGIC_VECTOR (35 downto 0);
    signal trunc_ln712_fu_2857_p1 : STD_LOGIC_VECTOR (34 downto 0);
    signal trunc_ln712_reg_3724 : STD_LOGIC_VECTOR (34 downto 0);
    signal trunc_ln712_1_fu_2861_p1 : STD_LOGIC_VECTOR (34 downto 0);
    signal trunc_ln712_1_reg_3729 : STD_LOGIC_VECTOR (34 downto 0);
    signal add_ln712_12_fu_2893_p2 : STD_LOGIC_VECTOR (35 downto 0);
    signal add_ln712_12_reg_3734 : STD_LOGIC_VECTOR (35 downto 0);
    signal add_ln712_14_fu_2898_p2 : STD_LOGIC_VECTOR (34 downto 0);
    signal add_ln712_14_reg_3739 : STD_LOGIC_VECTOR (34 downto 0);
    signal num_V_2_fu_2929_p3 : STD_LOGIC_VECTOR (34 downto 0);
    signal num_V_2_reg_3744 : STD_LOGIC_VECTOR (34 downto 0);
    signal zext_ln229_1_fu_1246_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln230_fu_1250_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln231_1_fu_1254_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln232_1_fu_1258_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln274_fu_2937_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_fu_184 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln222_fu_964_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal id_fu_188 : STD_LOGIC_VECTOR (11 downto 0);
    signal id_4_fu_845_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp2_V_0_2_fu_192 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp2_V_1_2_fu_196 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp2_V_2_2_fu_200 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp2_V_3_2_fu_204 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp2_V_5_2_fu_208 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp2_V_6_2_fu_212 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp2_V_7_2_fu_216 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp2_V_8_2_fu_220 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp2_V_9_2_fu_224 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp2_V_10_2_fu_228 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp2_V_11_2_fu_232 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp1_V_0_2_fu_236 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp1_V_0_3_fu_1630_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp1_V_0_fu_240 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp1_V_3_1_fu_1622_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp1_V_3_fu_244 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp1_V_6_fu_1614_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp1_V_11_fu_248 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp1_V_11_30_fu_1638_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp1_V_7_fu_252 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp1_V_8_fu_256 : STD_LOGIC_VECTOR (11 downto 0);
    signal b_fu_260 : STD_LOGIC_VECTOR (35 downto 0);
    signal sext_ln222_fu_2694_p1 : STD_LOGIC_VECTOR (35 downto 0);
    signal d_fu_264 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln209_1_fu_1375_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal kr_V_0_01129_fu_268 : STD_LOGIC_VECTOR (35 downto 0);
    signal sext_ln216_fu_1525_p1 : STD_LOGIC_VECTOR (35 downto 0);
    signal kr_V_1_01130_fu_272 : STD_LOGIC_VECTOR (35 downto 0);
    signal sext_ln216_1_fu_1529_p1 : STD_LOGIC_VECTOR (35 downto 0);
    signal kr_V_2_01131_fu_276 : STD_LOGIC_VECTOR (35 downto 0);
    signal sext_ln216_2_fu_2580_p1 : STD_LOGIC_VECTOR (35 downto 0);
    signal kr_V_3_01132_fu_280 : STD_LOGIC_VECTOR (35 downto 0);
    signal sext_ln216_3_fu_2584_p1 : STD_LOGIC_VECTOR (35 downto 0);
    signal kr_V_4_01133_fu_284 : STD_LOGIC_VECTOR (35 downto 0);
    signal sext_ln216_4_fu_2588_p1 : STD_LOGIC_VECTOR (35 downto 0);
    signal kr_V_5_01134_fu_288 : STD_LOGIC_VECTOR (35 downto 0);
    signal sext_ln216_5_fu_2592_p1 : STD_LOGIC_VECTOR (35 downto 0);
    signal kr_V_6_01135_fu_292 : STD_LOGIC_VECTOR (35 downto 0);
    signal sext_ln216_6_fu_2596_p1 : STD_LOGIC_VECTOR (35 downto 0);
    signal kr_V_7_01136_fu_296 : STD_LOGIC_VECTOR (35 downto 0);
    signal sext_ln216_7_fu_2600_p1 : STD_LOGIC_VECTOR (35 downto 0);
    signal kr_V_8_01137_fu_300 : STD_LOGIC_VECTOR (35 downto 0);
    signal sext_ln216_8_fu_2604_p1 : STD_LOGIC_VECTOR (35 downto 0);
    signal kr_V_9_01138_fu_304 : STD_LOGIC_VECTOR (35 downto 0);
    signal sext_ln216_9_fu_2608_p1 : STD_LOGIC_VECTOR (35 downto 0);
    signal kr_V_10_01139_fu_308 : STD_LOGIC_VECTOR (35 downto 0);
    signal sext_ln216_10_fu_2612_p1 : STD_LOGIC_VECTOR (35 downto 0);
    signal kr_V_11_01140_fu_312 : STD_LOGIC_VECTOR (35 downto 0);
    signal sext_ln216_11_fu_2616_p1 : STD_LOGIC_VECTOR (35 downto 0);
    signal i_fu_316 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln201_1_fu_929_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp1_V_4_fu_320 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp1_V_1_fu_324 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp1_V_1_1_fu_328 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp1_V_5_fu_332 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp1_V_2_fu_336 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp1_V_2_1_fu_340 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln201_fu_867_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln201_fu_871_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln201_fu_867_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln201_fu_875_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal trunc_ln201_fu_871_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal xor_ln201_fu_893_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_and_t3_cast_fu_899_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln201_1_fu_889_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_fu_881_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln201_fu_907_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_s_fu_913_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_8_fu_921_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln222_fu_952_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln222_1_fu_958_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln228_fu_989_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal xor_ln229_2_fu_1000_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln229_fu_1013_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln229_fu_1017_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln229_fu_1017_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln229_fu_1021_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_84_fu_1027_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln229_2_fu_1057_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln229_fu_1049_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln229_1_fu_1053_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_58_cast_fu_1061_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal newFirst74_fu_1069_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln230_fu_1081_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_85_fu_1087_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln230_1_fu_1107_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln230_fu_1103_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_59_cast_fu_1111_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal newFirst76_fu_1119_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln229_fu_1013_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln231_fu_1131_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_19_fu_1141_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln231_fu_1137_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln231_fu_1149_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln232_fu_1161_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_20_fu_1171_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal newFirst_fu_1179_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln232_fu_1167_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln235_fu_1191_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln260_fu_1197_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_86_fu_1203_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln274_fu_1219_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln274_1_fu_1223_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln274_1_fu_1223_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_66_cast_fu_1227_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln274_fu_1219_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln274_fu_1235_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln209_fu_1313_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln209_fu_1317_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln209_fu_1313_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln209_fu_1321_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal trunc_ln209_fu_1317_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal xor_ln209_fu_1339_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_and_t7_cast_fu_1345_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln209_1_fu_1335_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_83_fu_1327_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln209_fu_1353_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_18_fu_1359_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal d_9_fu_1367_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal and_ln229_fu_1396_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln229_fu_1400_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln230_fu_1411_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln230_fu_1416_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln229_1_fu_1422_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln230_fu_1406_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln229_3_fu_1433_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln229_4_fu_1437_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln229_5_fu_1449_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln229_6_fu_1453_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal or_ln229_fu_1427_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln229_fu_1441_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln229_1_fu_1457_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln229_2_fu_1473_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp1_V_11_24_fu_1478_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp1_V_11_28_fu_1499_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln222_fu_1609_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln234_fu_1651_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln234_fu_1644_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln237_fu_1664_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp2_V_3_fu_1669_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln236_fu_1685_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp2_V_0_fu_1707_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal xor_ln241_fu_1730_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln241_fu_1735_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln_fu_1700_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal and_ln241_1_fu_1754_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln243_fu_1748_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln243_fu_1758_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln241_fu_1740_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln243_1_fu_1772_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln243_1_fu_1778_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln243_fu_1764_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln243_2_fu_1792_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln243_2_fu_1798_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln243_1_fu_1784_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln243_3_fu_1812_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln243_4_fu_1818_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln243_5_fu_1824_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln243_4_fu_1836_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln243_3_fu_1830_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln243_5_fu_1842_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln243_2_fu_1804_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal or_ln247_fu_1856_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln243_3_fu_1848_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal xor_ln235_fu_1868_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln247_fu_1873_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln247_1_fu_1878_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln247_fu_1860_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal and_ln247_2_fu_1892_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln247_1_fu_1884_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal and_ln247_3_fu_1906_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln247_2_fu_1898_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp2_V_2_fu_1723_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln243_4_fu_1920_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln243_5_fu_1928_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln243_6_fu_1936_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln243_7_fu_1944_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln247_4_fu_1952_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln247_5_fu_1960_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln247_6_fu_1968_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp2_V_1_fu_1692_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln241_1_fu_1984_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln243_8_fu_1992_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln243_9_fu_2000_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln243_10_fu_2008_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln243_11_fu_2016_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln247_8_fu_2024_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln247_9_fu_2032_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln247_10_fu_2040_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln237_1_fu_1715_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln241_2_fu_2056_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln243_12_fu_2064_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln243_13_fu_2072_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln243_14_fu_2080_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln243_15_fu_2088_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln247_12_fu_2096_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln247_13_fu_2104_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln247_14_fu_2112_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln250_fu_2128_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp1_V_11_31_fu_2143_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp2_V_6_fu_2156_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp2_V_9_fu_2179_p13 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp2_V_9_fu_2179_p14 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp1_V_11_33_fu_2215_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal and_ln256_fu_2235_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp2_V_11_fu_2230_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal and_ln256_1_fu_2247_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln256_fu_2239_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal xor_ln229_1_fu_2260_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln260_fu_2265_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln263_fu_2270_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln256_1_fu_2252_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal and_ln263_1_fu_2284_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln263_2_fu_2289_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln263_fu_2276_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal and_ln263_3_fu_2303_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln263_1_fu_2295_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal or_ln260_fu_2316_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln263_2_fu_2308_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp1_V_11_36_fu_2149_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln256_2_fu_2328_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln256_3_fu_2336_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln263_3_fu_2344_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln263_4_fu_2352_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln263_5_fu_2360_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln237_3_fu_2207_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln256_4_fu_2376_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln256_5_fu_2384_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln263_6_fu_2392_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln263_7_fu_2400_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln263_8_fu_2408_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp1_V_11_37_fu_2222_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln256_6_fu_2424_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln256_7_fu_2432_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln263_9_fu_2440_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln263_10_fu_2448_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln263_11_fu_2456_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp2_V_7_fu_2135_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln237_2_fu_2164_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_68_cast_fu_2488_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln274_3_fu_2495_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln712_5_fu_2825_p2 : STD_LOGIC_VECTOR (35 downto 0);
    signal add_ln712_fu_2839_p2 : STD_LOGIC_VECTOR (35 downto 0);
    signal add_ln712_2_fu_2848_p2 : STD_LOGIC_VECTOR (35 downto 0);
    signal add_ln712_7_fu_2865_p2 : STD_LOGIC_VECTOR (35 downto 0);
    signal add_ln712_8_fu_2869_p2 : STD_LOGIC_VECTOR (35 downto 0);
    signal trunc_ln712_3_fu_2877_p1 : STD_LOGIC_VECTOR (34 downto 0);
    signal trunc_ln712_2_fu_2873_p1 : STD_LOGIC_VECTOR (34 downto 0);
    signal add_ln712_9_fu_2881_p2 : STD_LOGIC_VECTOR (35 downto 0);
    signal add_ln712_10_fu_2887_p2 : STD_LOGIC_VECTOR (34 downto 0);
    signal add_ln712_4_fu_2903_p2 : STD_LOGIC_VECTOR (35 downto 0);
    signal add_ln712_13_fu_2907_p2 : STD_LOGIC_VECTOR (34 downto 0);
    signal add_ln712_11_fu_2911_p2 : STD_LOGIC_VECTOR (35 downto 0);
    signal tmp_87_fu_2921_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln1548_fu_2916_p2 : STD_LOGIC_VECTOR (34 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter7_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter8_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter9_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter10_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_condition_2239 : BOOLEAN;
    signal ap_condition_2243 : BOOLEAN;
    signal ap_condition_2247 : BOOLEAN;
    signal ap_condition_993 : BOOLEAN;
    signal ap_condition_999 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component master_fix_mux_124_12_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        din9_WIDTH : INTEGER;
        din10_WIDTH : INTEGER;
        din11_WIDTH : INTEGER;
        din12_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (11 downto 0);
        din1 : IN STD_LOGIC_VECTOR (11 downto 0);
        din2 : IN STD_LOGIC_VECTOR (11 downto 0);
        din3 : IN STD_LOGIC_VECTOR (11 downto 0);
        din4 : IN STD_LOGIC_VECTOR (11 downto 0);
        din5 : IN STD_LOGIC_VECTOR (11 downto 0);
        din6 : IN STD_LOGIC_VECTOR (11 downto 0);
        din7 : IN STD_LOGIC_VECTOR (11 downto 0);
        din8 : IN STD_LOGIC_VECTOR (11 downto 0);
        din9 : IN STD_LOGIC_VECTOR (11 downto 0);
        din10 : IN STD_LOGIC_VECTOR (11 downto 0);
        din11 : IN STD_LOGIC_VECTOR (11 downto 0);
        din12 : IN STD_LOGIC_VECTOR (3 downto 0);
        dout : OUT STD_LOGIC_VECTOR (11 downto 0) );
    end component;


    component master_fix_mul_36s_12s_36_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (35 downto 0);
        din1 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (35 downto 0) );
    end component;


    component master_fix_convolution1_fix_Pipeline_Conv_loop_firstKernel_f_V_0_0 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (18 downto 0) );
    end component;


    component master_fix_convolution1_fix_Pipeline_Conv_loop_firstKernel_f_V_0_1 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (18 downto 0) );
    end component;


    component master_fix_convolution1_fix_Pipeline_Conv_loop_firstKernel_f_V_0_2 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (19 downto 0) );
    end component;


    component master_fix_convolution1_fix_Pipeline_Conv_loop_firstKernel_f_V_1_0 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (17 downto 0) );
    end component;


    component master_fix_convolution1_fix_Pipeline_Conv_loop_firstKernel_f_V_1_1 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (17 downto 0) );
    end component;


    component master_fix_convolution1_fix_Pipeline_Conv_loop_firstKernel_f_V_1_2 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (17 downto 0) );
    end component;


    component master_fix_convolution1_fix_Pipeline_Conv_loop_firstKernel_f_V_2_0 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (17 downto 0) );
    end component;


    component master_fix_convolution1_fix_Pipeline_Conv_loop_firstKernel_f_V_2_1 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (17 downto 0) );
    end component;


    component master_fix_convolution1_fix_Pipeline_Conv_loop_firstKernel_f_V_2_2 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (17 downto 0) );
    end component;


    component master_fix_convolution1_fix_Pipeline_Conv_loop_firstKernel_f_V_3_0 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (17 downto 0) );
    end component;


    component master_fix_convolution1_fix_Pipeline_Conv_loop_firstKernel_f_V_3_1 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (18 downto 0) );
    end component;


    component master_fix_convolution1_fix_Pipeline_Conv_loop_firstKernel_f_V_3_2 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (18 downto 0) );
    end component;


    component master_fix_convolution1_fix_Pipeline_Conv_loop_firstBias_f_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (21 downto 0) );
    end component;


    component master_fix_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    firstKernel_f_V_0_0_U : component master_fix_convolution1_fix_Pipeline_Conv_loop_firstKernel_f_V_0_0
    generic map (
        DataWidth => 19,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => firstKernel_f_V_0_0_address0,
        ce0 => firstKernel_f_V_0_0_ce0,
        q0 => firstKernel_f_V_0_0_q0);

    firstKernel_f_V_0_1_U : component master_fix_convolution1_fix_Pipeline_Conv_loop_firstKernel_f_V_0_1
    generic map (
        DataWidth => 19,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => firstKernel_f_V_0_1_address0,
        ce0 => firstKernel_f_V_0_1_ce0,
        q0 => firstKernel_f_V_0_1_q0);

    firstKernel_f_V_0_2_U : component master_fix_convolution1_fix_Pipeline_Conv_loop_firstKernel_f_V_0_2
    generic map (
        DataWidth => 20,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => firstKernel_f_V_0_2_address0,
        ce0 => firstKernel_f_V_0_2_ce0,
        q0 => firstKernel_f_V_0_2_q0);

    firstKernel_f_V_1_0_U : component master_fix_convolution1_fix_Pipeline_Conv_loop_firstKernel_f_V_1_0
    generic map (
        DataWidth => 18,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => firstKernel_f_V_1_0_address0,
        ce0 => firstKernel_f_V_1_0_ce0,
        q0 => firstKernel_f_V_1_0_q0);

    firstKernel_f_V_1_1_U : component master_fix_convolution1_fix_Pipeline_Conv_loop_firstKernel_f_V_1_1
    generic map (
        DataWidth => 18,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => firstKernel_f_V_1_1_address0,
        ce0 => firstKernel_f_V_1_1_ce0,
        q0 => firstKernel_f_V_1_1_q0);

    firstKernel_f_V_1_2_U : component master_fix_convolution1_fix_Pipeline_Conv_loop_firstKernel_f_V_1_2
    generic map (
        DataWidth => 18,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => firstKernel_f_V_1_2_address0,
        ce0 => firstKernel_f_V_1_2_ce0,
        q0 => firstKernel_f_V_1_2_q0);

    firstKernel_f_V_2_0_U : component master_fix_convolution1_fix_Pipeline_Conv_loop_firstKernel_f_V_2_0
    generic map (
        DataWidth => 18,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => firstKernel_f_V_2_0_address0,
        ce0 => firstKernel_f_V_2_0_ce0,
        q0 => firstKernel_f_V_2_0_q0);

    firstKernel_f_V_2_1_U : component master_fix_convolution1_fix_Pipeline_Conv_loop_firstKernel_f_V_2_1
    generic map (
        DataWidth => 18,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => firstKernel_f_V_2_1_address0,
        ce0 => firstKernel_f_V_2_1_ce0,
        q0 => firstKernel_f_V_2_1_q0);

    firstKernel_f_V_2_2_U : component master_fix_convolution1_fix_Pipeline_Conv_loop_firstKernel_f_V_2_2
    generic map (
        DataWidth => 18,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => firstKernel_f_V_2_2_address0,
        ce0 => firstKernel_f_V_2_2_ce0,
        q0 => firstKernel_f_V_2_2_q0);

    firstKernel_f_V_3_0_U : component master_fix_convolution1_fix_Pipeline_Conv_loop_firstKernel_f_V_3_0
    generic map (
        DataWidth => 18,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => firstKernel_f_V_3_0_address0,
        ce0 => firstKernel_f_V_3_0_ce0,
        q0 => firstKernel_f_V_3_0_q0);

    firstKernel_f_V_3_1_U : component master_fix_convolution1_fix_Pipeline_Conv_loop_firstKernel_f_V_3_1
    generic map (
        DataWidth => 19,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => firstKernel_f_V_3_1_address0,
        ce0 => firstKernel_f_V_3_1_ce0,
        q0 => firstKernel_f_V_3_1_q0);

    firstKernel_f_V_3_2_U : component master_fix_convolution1_fix_Pipeline_Conv_loop_firstKernel_f_V_3_2
    generic map (
        DataWidth => 19,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => firstKernel_f_V_3_2_address0,
        ce0 => firstKernel_f_V_3_2_ce0,
        q0 => firstKernel_f_V_3_2_q0);

    firstBias_f_V_U : component master_fix_convolution1_fix_Pipeline_Conv_loop_firstBias_f_V
    generic map (
        DataWidth => 22,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => firstBias_f_V_address0,
        ce0 => firstBias_f_V_ce0,
        q0 => firstBias_f_V_q0);

    mux_124_12_1_1_U36 : component master_fix_mux_124_12_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 12,
        din1_WIDTH => 12,
        din2_WIDTH => 12,
        din3_WIDTH => 12,
        din4_WIDTH => 12,
        din5_WIDTH => 12,
        din6_WIDTH => 12,
        din7_WIDTH => 12,
        din8_WIDTH => 12,
        din9_WIDTH => 12,
        din10_WIDTH => 12,
        din11_WIDTH => 12,
        din12_WIDTH => 4,
        dout_WIDTH => 12)
    port map (
        din0 => tmp1_V_0_3_fu_1630_p3,
        din1 => tmp1_V_1_1_fu_328,
        din2 => tmp1_V_2_1_fu_340,
        din3 => tmp1_V_3_1_fu_1622_p3,
        din4 => tmp1_V_1_fu_324,
        din5 => tmp1_V_2_fu_336,
        din6 => tmp1_V_6_fu_1614_p3,
        din7 => tmp1_V_4_fu_320,
        din8 => tmp1_V_5_fu_332,
        din9 => tmp1_V_11_30_fu_1638_p3,
        din10 => tmp1_V_11_29_reg_3392,
        din11 => tmp1_V_11_25_reg_3385,
        din12 => tmp2_V_9_fu_2179_p13,
        dout => tmp2_V_9_fu_2179_p14);

    mul_36s_12s_36_2_1_U37 : component master_fix_mul_36s_12s_36_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 36,
        din1_WIDTH => 12,
        dout_WIDTH => 36)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => kr_V_0_01129_fu_268,
        din1 => select_ln247_15_reg_3479,
        ce => ap_const_logic_1,
        dout => grp_fu_2679_p2);

    mul_36s_12s_36_2_1_U38 : component master_fix_mul_36s_12s_36_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 36,
        din1_WIDTH => 12,
        dout_WIDTH => 36)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => kr_V_1_01130_fu_272,
        din1 => select_ln247_11_reg_3474,
        ce => ap_const_logic_1,
        dout => grp_fu_2688_p2);

    mul_36s_12s_36_2_1_U39 : component master_fix_mul_36s_12s_36_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 36,
        din1_WIDTH => 12,
        dout_WIDTH => 36)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => kr_V_2_01131_fu_276,
        din1 => select_ln247_7_reg_3469_pp0_iter6_reg,
        ce => ap_const_logic_1,
        dout => grp_fu_2735_p2);

    mul_36s_12s_36_2_1_U40 : component master_fix_mul_36s_12s_36_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 36,
        din1_WIDTH => 12,
        dout_WIDTH => 36)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => kr_V_3_01132_fu_280,
        din1 => select_ln237_reg_3459_pp0_iter6_reg,
        ce => ap_const_logic_1,
        dout => grp_fu_2744_p2);

    mul_36s_12s_36_2_1_U41 : component master_fix_mul_36s_12s_36_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 36,
        din1_WIDTH => 12,
        dout_WIDTH => 36)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => kr_V_4_01133_fu_284,
        din1 => select_ln234_1_reg_3454_pp0_iter6_reg,
        ce => ap_const_logic_1,
        dout => grp_fu_2753_p2);

    mul_36s_12s_36_2_1_U42 : component master_fix_mul_36s_12s_36_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 36,
        din1_WIDTH => 12,
        dout_WIDTH => 36)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => kr_V_5_01134_fu_288,
        din1 => select_ln247_3_reg_3464_pp0_iter6_reg,
        ce => ap_const_logic_1,
        dout => grp_fu_2762_p2);

    mul_36s_12s_36_2_1_U43 : component master_fix_mul_36s_12s_36_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 36,
        din1_WIDTH => 12,
        dout_WIDTH => 36)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => kr_V_6_01135_fu_292,
        din1 => select_ln260_5_reg_3509_pp0_iter6_reg,
        ce => ap_const_logic_1,
        dout => grp_fu_2771_p2);

    mul_36s_12s_36_2_1_U44 : component master_fix_mul_36s_12s_36_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 36,
        din1_WIDTH => 12,
        dout_WIDTH => 36)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => kr_V_7_01136_fu_296,
        din1 => tmp2_V_7_1_reg_3504_pp0_iter6_reg,
        ce => ap_const_logic_1,
        dout => grp_fu_2780_p2);

    mul_36s_12s_36_2_1_U45 : component master_fix_mul_36s_12s_36_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 36,
        din1_WIDTH => 12,
        dout_WIDTH => 36)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => kr_V_8_01137_fu_300,
        din1 => select_ln260_3_reg_3499_pp0_iter6_reg,
        ce => ap_const_logic_1,
        dout => grp_fu_2789_p2);

    mul_36s_12s_36_2_1_U46 : component master_fix_mul_36s_12s_36_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 36,
        din1_WIDTH => 12,
        dout_WIDTH => 36)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => kr_V_9_01138_fu_304,
        din1 => select_ln260_2_reg_3494_pp0_iter6_reg,
        ce => ap_const_logic_1,
        dout => grp_fu_2798_p2);

    mul_36s_12s_36_2_1_U47 : component master_fix_mul_36s_12s_36_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 36,
        din1_WIDTH => 12,
        dout_WIDTH => 36)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => kr_V_10_01139_fu_308,
        din1 => select_ln260_1_reg_3489_pp0_iter6_reg,
        ce => ap_const_logic_1,
        dout => grp_fu_2807_p2);

    mul_36s_12s_36_2_1_U48 : component master_fix_mul_36s_12s_36_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 36,
        din1_WIDTH => 12,
        dout_WIDTH => 36)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => kr_V_11_01140_fu_312,
        din1 => select_ln260_reg_3484_pp0_iter6_reg,
        ce => ap_const_logic_1,
        dout => grp_fu_2816_p2);

    flow_control_loop_pipe_sequential_init_U : component master_fix_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter1_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter10_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    d_fu_264_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    d_fu_264 <= ap_const_lv16_FFFF;
                elsif ((ap_const_boolean_1 = ap_condition_2239)) then 
                    d_fu_264 <= sext_ln209_1_fu_1375_p1;
                end if;
            end if; 
        end if;
    end process;

    i_fu_316_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_316 <= ap_const_lv16_FFFF;
                elsif ((ap_const_boolean_1 = ap_condition_2247)) then 
                    i_fu_316 <= ap_const_lv16_0;
                elsif ((ap_const_boolean_1 = ap_condition_2243)) then 
                    i_fu_316 <= sext_ln201_1_fu_929_p1;
                end if;
            end if; 
        end if;
    end process;

    id_fu_188_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    id_fu_188 <= ap_const_lv12_0;
                elsif (((icmp_ln197_fu_839_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    id_fu_188 <= id_4_fu_845_p2;
                end if;
            end if; 
        end if;
    end process;

    j_fu_184_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    j_fu_184 <= ap_const_lv12_0;
                elsif (((icmp_ln197_fu_839_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    j_fu_184 <= select_ln222_fu_964_p3;
                end if;
            end if; 
        end if;
    end process;

    tmp1_V_0_2_fu_236_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    tmp1_V_0_2_fu_236 <= tmp1_V_0_0_reload;
                elsif ((ap_enable_reg_pp0_iter5 = ap_const_logic_1)) then 
                    tmp1_V_0_2_fu_236 <= tmp1_V_0_3_fu_1630_p3;
                end if;
            end if; 
        end if;
    end process;

    tmp1_V_0_fu_240_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    tmp1_V_0_fu_240 <= tmp1_V_11_11_reload;
                elsif ((ap_enable_reg_pp0_iter5 = ap_const_logic_1)) then 
                    tmp1_V_0_fu_240 <= tmp1_V_3_1_fu_1622_p3;
                end if;
            end if; 
        end if;
    end process;

    tmp1_V_11_fu_248_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    tmp1_V_11_fu_248 <= tmp1_V_9;
                elsif ((ap_enable_reg_pp0_iter5 = ap_const_logic_1)) then 
                    tmp1_V_11_fu_248 <= tmp1_V_11_30_fu_1638_p3;
                end if;
            end if; 
        end if;
    end process;

    tmp1_V_1_1_fu_328_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    tmp1_V_1_1_fu_328 <= tmp1_V_1_0_reload;
                elsif (((icmp_ln200_reg_3233_pp0_iter3_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
                    tmp1_V_1_1_fu_328 <= tmp1_V_1_fu_324;
                end if;
            end if; 
        end if;
    end process;

    tmp1_V_1_fu_324_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    tmp1_V_1_fu_324 <= tmp1_V_4_0_reload;
                elsif (((icmp_ln200_reg_3233_pp0_iter3_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
                    tmp1_V_1_fu_324 <= tmp1_V_4_fu_320;
                end if;
            end if; 
        end if;
    end process;

    tmp1_V_2_1_fu_340_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    tmp1_V_2_1_fu_340 <= tmp1_V_2_0_reload;
                elsif (((icmp_ln200_reg_3233_pp0_iter3_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
                    tmp1_V_2_1_fu_340 <= tmp1_V_2_fu_336;
                end if;
            end if; 
        end if;
    end process;

    tmp1_V_2_fu_336_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    tmp1_V_2_fu_336 <= tmp1_V_5_0_reload;
                elsif (((icmp_ln200_reg_3233_pp0_iter3_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
                    tmp1_V_2_fu_336 <= tmp1_V_5_fu_332;
                end if;
            end if; 
        end if;
    end process;

    tmp1_V_3_fu_244_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    tmp1_V_3_fu_244 <= tmp1_V_11_9_reload;
                elsif ((ap_enable_reg_pp0_iter5 = ap_const_logic_1)) then 
                    tmp1_V_3_fu_244 <= tmp1_V_6_fu_1614_p3;
                end if;
            end if; 
        end if;
    end process;

    tmp1_V_4_fu_320_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    tmp1_V_4_fu_320 <= tmp1_V_11_6_reload;
                elsif (((icmp_ln200_reg_3233_pp0_iter3_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
                    tmp1_V_4_fu_320 <= tmp1_V_7_fu_252;
                end if;
            end if; 
        end if;
    end process;

    tmp1_V_5_fu_332_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    tmp1_V_5_fu_332 <= tmp1_V_11_4_reload;
                elsif (((icmp_ln200_reg_3233_pp0_iter3_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
                    tmp1_V_5_fu_332 <= tmp1_V_8_fu_256;
                end if;
            end if; 
        end if;
    end process;

    tmp1_V_7_fu_252_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    tmp1_V_7_fu_252 <= tmp1_V_10_0_reload;
                elsif ((ap_enable_reg_pp0_iter4 = ap_const_logic_1)) then 
                    tmp1_V_7_fu_252 <= tmp1_V_11_29_fu_1507_p3;
                end if;
            end if; 
        end if;
    end process;

    tmp1_V_8_fu_256_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    tmp1_V_8_fu_256 <= tmp1_V_11_0_reload;
                elsif ((ap_enable_reg_pp0_iter4 = ap_const_logic_1)) then 
                    tmp1_V_8_fu_256 <= tmp1_V_11_25_fu_1491_p3;
                end if;
            end if; 
        end if;
    end process;

    tmp2_V_0_2_fu_192_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    tmp2_V_0_2_fu_192 <= tmp2_V_0_0_reload;
                elsif ((ap_enable_reg_pp0_iter5 = ap_const_logic_1)) then 
                    tmp2_V_0_2_fu_192 <= ap_const_lv12_0;
                end if;
            end if; 
        end if;
    end process;

    tmp2_V_10_2_fu_228_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    tmp2_V_10_2_fu_228 <= tmp2_V_10_0_reload;
                elsif ((ap_enable_reg_pp0_iter5 = ap_const_logic_1)) then 
                    tmp2_V_10_2_fu_228 <= ap_const_lv12_0;
                end if;
            end if; 
        end if;
    end process;

    tmp2_V_11_2_fu_232_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    tmp2_V_11_2_fu_232 <= tmp2_V_11_0_reload;
                elsif ((ap_enable_reg_pp0_iter5 = ap_const_logic_1)) then 
                    tmp2_V_11_2_fu_232 <= ap_const_lv12_0;
                end if;
            end if; 
        end if;
    end process;

    tmp2_V_1_2_fu_196_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    tmp2_V_1_2_fu_196 <= tmp2_V_1_0_reload;
                elsif ((ap_enable_reg_pp0_iter5 = ap_const_logic_1)) then 
                    tmp2_V_1_2_fu_196 <= ap_const_lv12_0;
                end if;
            end if; 
        end if;
    end process;

    tmp2_V_2_2_fu_200_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    tmp2_V_2_2_fu_200 <= tmp2_V_2_0_reload;
                elsif ((ap_enable_reg_pp0_iter5 = ap_const_logic_1)) then 
                    tmp2_V_2_2_fu_200 <= ap_const_lv12_0;
                end if;
            end if; 
        end if;
    end process;

    tmp2_V_3_2_fu_204_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    tmp2_V_3_2_fu_204 <= tmp2_V_3_0_reload;
                elsif ((ap_enable_reg_pp0_iter5 = ap_const_logic_1)) then 
                    tmp2_V_3_2_fu_204 <= ap_const_lv12_0;
                end if;
            end if; 
        end if;
    end process;

    tmp2_V_5_2_fu_208_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    tmp2_V_5_2_fu_208 <= tmp2_V_5_0_reload;
                elsif ((ap_enable_reg_pp0_iter5 = ap_const_logic_1)) then 
                    tmp2_V_5_2_fu_208 <= ap_const_lv12_0;
                end if;
            end if; 
        end if;
    end process;

    tmp2_V_6_2_fu_212_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    tmp2_V_6_2_fu_212 <= tmp2_V_6_0_reload;
                elsif ((ap_enable_reg_pp0_iter5 = ap_const_logic_1)) then 
                    tmp2_V_6_2_fu_212 <= ap_const_lv12_0;
                end if;
            end if; 
        end if;
    end process;

    tmp2_V_7_2_fu_216_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    tmp2_V_7_2_fu_216 <= tmp2_V_7_0_reload;
                elsif ((ap_enable_reg_pp0_iter5 = ap_const_logic_1)) then 
                    tmp2_V_7_2_fu_216 <= ap_const_lv12_0;
                end if;
            end if; 
        end if;
    end process;

    tmp2_V_8_2_fu_220_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    tmp2_V_8_2_fu_220 <= tmp2_V_8_0_reload;
                elsif ((ap_enable_reg_pp0_iter5 = ap_const_logic_1)) then 
                    tmp2_V_8_2_fu_220 <= ap_const_lv12_0;
                end if;
            end if; 
        end if;
    end process;

    tmp2_V_9_2_fu_224_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    tmp2_V_9_2_fu_224 <= tmp2_V_9_0_reload;
                elsif ((ap_enable_reg_pp0_iter5 = ap_const_logic_1)) then 
                    tmp2_V_9_2_fu_224 <= ap_const_lv12_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                add_ln231_1_reg_3301 <= add_ln231_1_fu_1155_p2;
                add_ln274_1_reg_3514 <= add_ln274_1_fu_2499_p2;
                add_ln274_1_reg_3514_pp0_iter10_reg <= add_ln274_1_reg_3514_pp0_iter9_reg;
                add_ln274_1_reg_3514_pp0_iter6_reg <= add_ln274_1_reg_3514;
                add_ln274_1_reg_3514_pp0_iter7_reg <= add_ln274_1_reg_3514_pp0_iter6_reg;
                add_ln274_1_reg_3514_pp0_iter8_reg <= add_ln274_1_reg_3514_pp0_iter7_reg;
                add_ln274_1_reg_3514_pp0_iter9_reg <= add_ln274_1_reg_3514_pp0_iter8_reg;
                add_ln274_reg_3325 <= add_ln274_fu_1241_p2;
                add_ln274_reg_3325_pp0_iter3_reg <= add_ln274_reg_3325;
                add_ln274_reg_3325_pp0_iter4_reg <= add_ln274_reg_3325_pp0_iter3_reg;
                add_ln712_12_reg_3734 <= add_ln712_12_fu_2893_p2;
                add_ln712_14_reg_3739 <= add_ln712_14_fu_2898_p2;
                add_ln712_1_reg_3714 <= add_ln712_1_fu_2843_p2;
                add_ln712_3_reg_3719 <= add_ln712_3_fu_2852_p2;
                add_ln712_6_reg_3704 <= add_ln712_6_fu_2830_p2;
                ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
                ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
                ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
                ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
                icmp_ln200_reg_3233_pp0_iter2_reg <= icmp_ln200_reg_3233;
                icmp_ln200_reg_3233_pp0_iter3_reg <= icmp_ln200_reg_3233_pp0_iter2_reg;
                icmp_ln200_reg_3233_pp0_iter4_reg <= icmp_ln200_reg_3233_pp0_iter3_reg;
                icmp_ln200_reg_3233_pp0_iter5_reg <= icmp_ln200_reg_3233_pp0_iter4_reg;
                icmp_ln200_reg_3233_pp0_iter6_reg <= icmp_ln200_reg_3233_pp0_iter5_reg;
                icmp_ln208_reg_3245_pp0_iter2_reg <= icmp_ln208_reg_3245;
                icmp_ln208_reg_3245_pp0_iter3_reg <= icmp_ln208_reg_3245_pp0_iter2_reg;
                icmp_ln208_reg_3245_pp0_iter4_reg <= icmp_ln208_reg_3245_pp0_iter3_reg;
                icmp_ln208_reg_3245_pp0_iter5_reg <= icmp_ln208_reg_3245_pp0_iter4_reg;
                icmp_ln208_reg_3245_pp0_iter6_reg <= icmp_ln208_reg_3245_pp0_iter5_reg;
                icmp_ln229_1_reg_3279 <= icmp_ln229_1_fu_1043_p2;
                icmp_ln229_1_reg_3279_pp0_iter3_reg <= icmp_ln229_1_reg_3279;
                icmp_ln229_3_reg_3380 <= icmp_ln229_3_fu_1486_p2;
                icmp_ln229_4_reg_3270 <= icmp_ln229_4_fu_1037_p2;
                icmp_ln229_4_reg_3270_pp0_iter3_reg <= icmp_ln229_4_reg_3270;
                icmp_ln229_4_reg_3270_pp0_iter4_reg <= icmp_ln229_4_reg_3270_pp0_iter3_reg;
                icmp_ln229_reg_3254 <= icmp_ln229_fu_994_p2;
                icmp_ln229_reg_3254_pp0_iter3_reg <= icmp_ln229_reg_3254;
                icmp_ln229_reg_3254_pp0_iter4_reg <= icmp_ln229_reg_3254_pp0_iter3_reg;
                icmp_ln230_reg_3290 <= icmp_ln230_fu_1097_p2;
                icmp_ln230_reg_3290_pp0_iter3_reg <= icmp_ln230_reg_3290;
                icmp_ln235_reg_3311 <= icmp_ln235_fu_1191_p2;
                icmp_ln235_reg_3311_pp0_iter3_reg <= icmp_ln235_reg_3311;
                icmp_ln235_reg_3311_pp0_iter4_reg <= icmp_ln235_reg_3311_pp0_iter3_reg;
                icmp_ln260_reg_3319 <= icmp_ln260_fu_1213_p2;
                icmp_ln260_reg_3319_pp0_iter3_reg <= icmp_ln260_reg_3319;
                icmp_ln260_reg_3319_pp0_iter4_reg <= icmp_ln260_reg_3319_pp0_iter3_reg;
                mul_ln712_10_reg_3694 <= grp_fu_2807_p2;
                mul_ln712_11_reg_3699 <= grp_fu_2816_p2;
                mul_ln712_1_reg_3599 <= grp_fu_2688_p2;
                mul_ln712_2_reg_3654 <= grp_fu_2735_p2;
                mul_ln712_3_reg_3659 <= grp_fu_2744_p2;
                mul_ln712_4_reg_3664 <= grp_fu_2753_p2;
                mul_ln712_5_reg_3669 <= grp_fu_2762_p2;
                mul_ln712_6_reg_3674 <= grp_fu_2771_p2;
                mul_ln712_7_reg_3679 <= grp_fu_2780_p2;
                mul_ln712_8_reg_3684 <= grp_fu_2789_p2;
                mul_ln712_9_reg_3689 <= grp_fu_2798_p2;
                mul_ln712_reg_3594 <= grp_fu_2679_p2;
                newSecond75_reg_3285 <= newSecond75_fu_1075_p2;
                newSecond77_reg_3296 <= newSecond77_fu_1125_p2;
                newSecond_reg_3306 <= newSecond_fu_1185_p2;
                num_V_2_reg_3744 <= num_V_2_fu_2929_p3;
                select_ln234_1_reg_3454 <= select_ln234_1_fu_1656_p3;
                select_ln234_1_reg_3454_pp0_iter6_reg <= select_ln234_1_reg_3454;
                select_ln237_reg_3459 <= select_ln237_fu_1677_p3;
                select_ln237_reg_3459_pp0_iter6_reg <= select_ln237_reg_3459;
                select_ln247_11_reg_3474 <= select_ln247_11_fu_2048_p3;
                select_ln247_15_reg_3479 <= select_ln247_15_fu_2120_p3;
                select_ln247_3_reg_3464 <= select_ln247_3_fu_1912_p3;
                select_ln247_3_reg_3464_pp0_iter6_reg <= select_ln247_3_reg_3464;
                select_ln247_7_reg_3469 <= select_ln247_7_fu_1976_p3;
                select_ln247_7_reg_3469_pp0_iter6_reg <= select_ln247_7_reg_3469;
                select_ln260_1_reg_3489 <= select_ln260_1_fu_2368_p3;
                select_ln260_1_reg_3489_pp0_iter6_reg <= select_ln260_1_reg_3489;
                select_ln260_2_reg_3494 <= select_ln260_2_fu_2416_p3;
                select_ln260_2_reg_3494_pp0_iter6_reg <= select_ln260_2_reg_3494;
                select_ln260_3_reg_3499 <= select_ln260_3_fu_2464_p3;
                select_ln260_3_reg_3499_pp0_iter6_reg <= select_ln260_3_reg_3499;
                select_ln260_5_reg_3509 <= select_ln260_5_fu_2480_p3;
                select_ln260_5_reg_3509_pp0_iter6_reg <= select_ln260_5_reg_3509;
                select_ln260_reg_3484 <= select_ln260_fu_2320_p3;
                select_ln260_reg_3484_pp0_iter6_reg <= select_ln260_reg_3484;
                t_reg_3264 <= t_fu_1005_p3;
                t_reg_3264_pp0_iter3_reg <= t_reg_3264;
                tmp1_V_11_25_reg_3385 <= tmp1_V_11_25_fu_1491_p3;
                tmp1_V_11_29_reg_3392 <= tmp1_V_11_29_fu_1507_p3;
                tmp1_V_11_35_reg_3375 <= tmp1_V_11_35_fu_1465_p3;
                tmp2_V_7_1_reg_3504 <= tmp2_V_7_1_fu_2472_p3;
                tmp2_V_7_1_reg_3504_pp0_iter6_reg <= tmp2_V_7_1_reg_3504;
                trunc_ln173_reg_3222_pp0_iter2_reg <= trunc_ln173_reg_3222;
                trunc_ln173_reg_3222_pp0_iter3_reg <= trunc_ln173_reg_3222_pp0_iter2_reg;
                trunc_ln173_reg_3222_pp0_iter4_reg <= trunc_ln173_reg_3222_pp0_iter3_reg;
                trunc_ln712_1_reg_3729 <= trunc_ln712_1_fu_2861_p1;
                trunc_ln712_4_reg_3709 <= trunc_ln712_4_fu_2835_p1;
                trunc_ln712_reg_3724 <= trunc_ln712_fu_2857_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln208_reg_3245_pp0_iter6_reg = ap_const_lv1_1) and (icmp_ln200_reg_3233_pp0_iter6_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1))) then
                b_fu_260 <= sext_ln222_fu_2694_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln208_reg_3245_pp0_iter5_reg = ap_const_lv1_1) and (icmp_ln200_reg_3233_pp0_iter5_reg = ap_const_lv1_1))) then
                firstBias_f_V_load_reg_3519 <= firstBias_f_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln197_fu_839_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln200_reg_3233 <= icmp_ln200_fu_858_p2;
                trunc_ln173_reg_3222 <= trunc_ln173_fu_854_p1;
                trunc_ln274_2_reg_3249 <= trunc_ln274_2_fu_972_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln197_fu_839_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln200_fu_858_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln208_reg_3245 <= icmp_ln208_fu_933_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln208_reg_3245_pp0_iter3_reg = ap_const_lv1_1) and (icmp_ln200_reg_3233_pp0_iter3_reg = ap_const_lv1_1))) then
                    idxprom87_reg_3350(3 downto 0) <= idxprom87_fu_1379_p1(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln208_reg_3245_pp0_iter4_reg = ap_const_lv1_1) and (icmp_ln200_reg_3233_pp0_iter4_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then
                kr_V_0_01129_fu_268 <= sext_ln216_fu_1525_p1;
                kr_V_1_01130_fu_272 <= sext_ln216_1_fu_1529_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln208_reg_3245_pp0_iter5_reg = ap_const_lv1_1) and (icmp_ln200_reg_3233_pp0_iter5_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1))) then
                kr_V_10_01139_fu_308 <= sext_ln216_10_fu_2612_p1;
                kr_V_11_01140_fu_312 <= sext_ln216_11_fu_2616_p1;
                kr_V_2_01131_fu_276 <= sext_ln216_2_fu_2580_p1;
                kr_V_3_01132_fu_280 <= sext_ln216_3_fu_2584_p1;
                kr_V_4_01133_fu_284 <= sext_ln216_4_fu_2588_p1;
                kr_V_5_01134_fu_288 <= sext_ln216_5_fu_2592_p1;
                kr_V_6_01135_fu_292 <= sext_ln216_6_fu_2596_p1;
                kr_V_7_01136_fu_296 <= sext_ln216_7_fu_2600_p1;
                kr_V_8_01137_fu_300 <= sext_ln216_8_fu_2604_p1;
                kr_V_9_01138_fu_304 <= sext_ln216_9_fu_2608_p1;
            end if;
        end if;
    end process;
    idxprom87_reg_3350(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln1548_fu_2916_p2 <= std_logic_vector(unsigned(add_ln712_14_reg_3739) + unsigned(add_ln712_13_fu_2907_p2));
    add_ln201_fu_875_p2 <= std_logic_vector(signed(sext_ln201_fu_867_p1) + signed(ap_const_lv17_1));
    add_ln209_fu_1321_p2 <= std_logic_vector(signed(sext_ln209_fu_1313_p1) + signed(ap_const_lv17_1));
    add_ln222_fu_952_p2 <= std_logic_vector(unsigned(j_fu_184) + unsigned(ap_const_lv12_1));
    add_ln228_fu_989_p2 <= std_logic_vector(unsigned(trunc_ln173_reg_3222) + unsigned(ap_const_lv2_1));
    add_ln229_fu_1021_p2 <= std_logic_vector(signed(sext_ln229_fu_1017_p1) + signed(ap_const_lv17_2));
    add_ln230_fu_1081_p2 <= std_logic_vector(signed(sext_ln229_fu_1017_p1) + signed(ap_const_lv17_3));
    add_ln231_1_fu_1155_p2 <= std_logic_vector(unsigned(sub_ln231_fu_1149_p2) + unsigned(zext_ln229_fu_1049_p1));
    add_ln231_fu_1131_p2 <= std_logic_vector(unsigned(trunc_ln229_fu_1013_p1) + unsigned(ap_const_lv7_2));
    add_ln232_fu_1161_p2 <= std_logic_vector(unsigned(trunc_ln229_fu_1013_p1) + unsigned(ap_const_lv7_3));
    add_ln260_fu_1197_p2 <= std_logic_vector(signed(sext_ln229_fu_1017_p1) + signed(ap_const_lv17_1));
    add_ln274_1_fu_2499_p2 <= std_logic_vector(unsigned(tmp_68_cast_fu_2488_p3) + unsigned(trunc_ln274_3_fu_2495_p1));
    add_ln274_fu_1241_p2 <= std_logic_vector(unsigned(sub_ln274_fu_1235_p2) + unsigned(trunc_ln274_2_reg_3249));
    add_ln712_10_fu_2887_p2 <= std_logic_vector(unsigned(trunc_ln712_3_fu_2877_p1) + unsigned(trunc_ln712_2_fu_2873_p1));
    add_ln712_11_fu_2911_p2 <= std_logic_vector(unsigned(add_ln712_12_reg_3734) + unsigned(add_ln712_4_fu_2903_p2));
    add_ln712_12_fu_2893_p2 <= std_logic_vector(unsigned(add_ln712_9_fu_2881_p2) + unsigned(add_ln712_6_reg_3704));
    add_ln712_13_fu_2907_p2 <= std_logic_vector(unsigned(trunc_ln712_1_reg_3729) + unsigned(trunc_ln712_reg_3724));
    add_ln712_14_fu_2898_p2 <= std_logic_vector(unsigned(add_ln712_10_fu_2887_p2) + unsigned(trunc_ln712_4_reg_3709));
    add_ln712_1_fu_2843_p2 <= std_logic_vector(unsigned(add_ln712_fu_2839_p2) + unsigned(mul_ln712_9_reg_3689));
    add_ln712_2_fu_2848_p2 <= std_logic_vector(unsigned(mul_ln712_7_reg_3679) + unsigned(mul_ln712_6_reg_3674));
    add_ln712_3_fu_2852_p2 <= std_logic_vector(unsigned(add_ln712_2_fu_2848_p2) + unsigned(mul_ln712_5_reg_3669));
    add_ln712_4_fu_2903_p2 <= std_logic_vector(unsigned(add_ln712_3_reg_3719) + unsigned(add_ln712_1_reg_3714));
    add_ln712_5_fu_2825_p2 <= std_logic_vector(unsigned(mul_ln712_1_reg_3599) + unsigned(b_fu_260));
    add_ln712_6_fu_2830_p2 <= std_logic_vector(unsigned(add_ln712_5_fu_2825_p2) + unsigned(mul_ln712_reg_3594));
    add_ln712_7_fu_2865_p2 <= std_logic_vector(unsigned(mul_ln712_2_reg_3654) + unsigned(mul_ln712_4_reg_3664));
    add_ln712_8_fu_2869_p2 <= std_logic_vector(unsigned(mul_ln712_3_reg_3659) + unsigned(mul_ln712_11_reg_3699));
    add_ln712_9_fu_2881_p2 <= std_logic_vector(unsigned(add_ln712_8_fu_2869_p2) + unsigned(add_ln712_7_fu_2865_p2));
    add_ln712_fu_2839_p2 <= std_logic_vector(unsigned(mul_ln712_10_reg_3694) + unsigned(mul_ln712_8_reg_3684));
    and_ln229_1_fu_1422_p2 <= (xor_ln230_fu_1416_p2 and icmp_ln229_1_reg_3279_pp0_iter3_reg);
    and_ln229_fu_1396_p2 <= (icmp_ln229_4_reg_3270_pp0_iter3_reg and icmp_ln229_1_reg_3279_pp0_iter3_reg);
    and_ln230_fu_1406_p2 <= (xor_ln229_fu_1400_p2 and icmp_ln230_reg_3290_pp0_iter3_reg);
    and_ln241_1_fu_1754_p2 <= (icmp_ln235_reg_3311_pp0_iter4_reg and icmp_ln229_reg_3254_pp0_iter4_reg);
    and_ln241_fu_1735_p2 <= (xor_ln241_fu_1730_p2 and icmp_ln235_reg_3311_pp0_iter4_reg);
    and_ln243_1_fu_1778_p2 <= (icmp_ln243_1_fu_1772_p2 and and_ln241_1_fu_1754_p2);
    and_ln243_2_fu_1798_p2 <= (icmp_ln243_2_fu_1792_p2 and and_ln241_1_fu_1754_p2);
    and_ln243_3_fu_1830_p2 <= (icmp_ln243_4_fu_1818_p2 and icmp_ln243_3_fu_1812_p2);
    and_ln243_4_fu_1836_p2 <= (icmp_ln243_5_fu_1824_p2 and and_ln241_1_fu_1754_p2);
    and_ln243_5_fu_1842_p2 <= (and_ln243_4_fu_1836_p2 and and_ln243_3_fu_1830_p2);
    and_ln243_fu_1758_p2 <= (icmp_ln243_fu_1748_p2 and and_ln241_1_fu_1754_p2);
    and_ln247_1_fu_1878_p2 <= (icmp_ln243_fu_1748_p2 and and_ln247_fu_1873_p2);
    and_ln247_2_fu_1892_p2 <= (icmp_ln243_1_fu_1772_p2 and and_ln247_fu_1873_p2);
    and_ln247_3_fu_1906_p2 <= (icmp_ln243_2_fu_1792_p2 and and_ln247_fu_1873_p2);
    and_ln247_fu_1873_p2 <= (xor_ln235_fu_1868_p2 and icmp_ln229_reg_3254_pp0_iter4_reg);
    and_ln256_1_fu_2247_p2 <= (xor_ln241_fu_1730_p2 and icmp_ln229_4_reg_3270_pp0_iter4_reg);
    and_ln256_fu_2235_p2 <= (icmp_ln229_reg_3254_pp0_iter4_reg and icmp_ln229_4_reg_3270_pp0_iter4_reg);
    and_ln260_fu_2265_p2 <= (xor_ln229_1_fu_2260_p2 and icmp_ln260_reg_3319_pp0_iter4_reg);
    and_ln263_1_fu_2284_p2 <= (icmp_ln229_reg_3254_pp0_iter4_reg and and_ln260_fu_2265_p2);
    and_ln263_2_fu_2289_p2 <= (icmp_ln234_fu_1651_p2 and and_ln263_1_fu_2284_p2);
    and_ln263_3_fu_2303_p2 <= (icmp_ln200_reg_3233_pp0_iter4_reg and and_ln263_1_fu_2284_p2);
    and_ln263_fu_2270_p2 <= (xor_ln241_fu_1730_p2 and and_ln260_fu_2265_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_2239_assign_proc : process(ap_enable_reg_pp0_iter4, icmp_ln200_reg_3233_pp0_iter3_reg, icmp_ln208_reg_3245_pp0_iter3_reg)
    begin
                ap_condition_2239 <= ((icmp_ln208_reg_3245_pp0_iter3_reg = ap_const_lv1_1) and (icmp_ln200_reg_3233_pp0_iter3_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1));
    end process;


    ap_condition_2243_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln197_fu_839_p2, icmp_ln200_fu_858_p2, icmp_ln208_fu_933_p2)
    begin
                ap_condition_2243 <= ((icmp_ln197_fu_839_p2 = ap_const_lv1_0) and (icmp_ln208_fu_933_p2 = ap_const_lv1_0) and (icmp_ln200_fu_858_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_condition_2247_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln197_fu_839_p2, icmp_ln200_fu_858_p2, icmp_ln208_fu_933_p2)
    begin
                ap_condition_2247 <= ((icmp_ln197_fu_839_p2 = ap_const_lv1_0) and (icmp_ln208_fu_933_p2 = ap_const_lv1_1) and (icmp_ln200_fu_858_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_condition_993_assign_proc : process(icmp_ln229_4_reg_3270, icmp_ln229_1_reg_3279, icmp_ln230_reg_3290)
    begin
                ap_condition_993 <= (((icmp_ln230_reg_3290 = ap_const_lv1_1) and (icmp_ln229_4_reg_3270 = ap_const_lv1_0)) or ((icmp_ln230_reg_3290 = ap_const_lv1_1) and (icmp_ln229_1_reg_3279 = ap_const_lv1_0)));
    end process;


    ap_condition_999_assign_proc : process(icmp_ln229_4_reg_3270, icmp_ln229_1_reg_3279, icmp_ln230_reg_3290)
    begin
                ap_condition_999 <= ((icmp_ln230_reg_3290 = ap_const_lv1_0) and (icmp_ln229_1_reg_3279 = ap_const_lv1_1) and (icmp_ln229_4_reg_3270 = ap_const_lv1_0));
    end process;


    ap_condition_exit_pp0_iter1_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone, icmp_ln197_fu_839_p2)
    begin
        if (((icmp_ln197_fu_839_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter10_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter10_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11)
    begin
        if (((ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter1_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;

    d_9_fu_1367_p3 <= 
        sub_ln209_fu_1353_p2 when (tmp_83_fu_1327_p3(0) = '1') else 
        tmp_18_fu_1359_p3;
    firstBias_f_V_address0 <= idxprom87_reg_3350(3 - 1 downto 0);

    firstBias_f_V_ce0_assign_proc : process(ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            firstBias_f_V_ce0 <= ap_const_logic_1;
        else 
            firstBias_f_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    firstKernel_f_V_0_0_address0 <= idxprom87_fu_1379_p1(3 - 1 downto 0);

    firstKernel_f_V_0_0_ce0_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            firstKernel_f_V_0_0_ce0 <= ap_const_logic_1;
        else 
            firstKernel_f_V_0_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    firstKernel_f_V_0_1_address0 <= idxprom87_fu_1379_p1(3 - 1 downto 0);

    firstKernel_f_V_0_1_ce0_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            firstKernel_f_V_0_1_ce0 <= ap_const_logic_1;
        else 
            firstKernel_f_V_0_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    firstKernel_f_V_0_2_address0 <= idxprom87_reg_3350(3 - 1 downto 0);

    firstKernel_f_V_0_2_ce0_assign_proc : process(ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            firstKernel_f_V_0_2_ce0 <= ap_const_logic_1;
        else 
            firstKernel_f_V_0_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    firstKernel_f_V_1_0_address0 <= idxprom87_reg_3350(3 - 1 downto 0);

    firstKernel_f_V_1_0_ce0_assign_proc : process(ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            firstKernel_f_V_1_0_ce0 <= ap_const_logic_1;
        else 
            firstKernel_f_V_1_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    firstKernel_f_V_1_1_address0 <= idxprom87_reg_3350(3 - 1 downto 0);

    firstKernel_f_V_1_1_ce0_assign_proc : process(ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            firstKernel_f_V_1_1_ce0 <= ap_const_logic_1;
        else 
            firstKernel_f_V_1_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    firstKernel_f_V_1_2_address0 <= idxprom87_reg_3350(3 - 1 downto 0);

    firstKernel_f_V_1_2_ce0_assign_proc : process(ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            firstKernel_f_V_1_2_ce0 <= ap_const_logic_1;
        else 
            firstKernel_f_V_1_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    firstKernel_f_V_2_0_address0 <= idxprom87_reg_3350(3 - 1 downto 0);

    firstKernel_f_V_2_0_ce0_assign_proc : process(ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            firstKernel_f_V_2_0_ce0 <= ap_const_logic_1;
        else 
            firstKernel_f_V_2_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    firstKernel_f_V_2_1_address0 <= idxprom87_reg_3350(3 - 1 downto 0);

    firstKernel_f_V_2_1_ce0_assign_proc : process(ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            firstKernel_f_V_2_1_ce0 <= ap_const_logic_1;
        else 
            firstKernel_f_V_2_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    firstKernel_f_V_2_2_address0 <= idxprom87_reg_3350(3 - 1 downto 0);

    firstKernel_f_V_2_2_ce0_assign_proc : process(ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            firstKernel_f_V_2_2_ce0 <= ap_const_logic_1;
        else 
            firstKernel_f_V_2_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    firstKernel_f_V_3_0_address0 <= idxprom87_reg_3350(3 - 1 downto 0);

    firstKernel_f_V_3_0_ce0_assign_proc : process(ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            firstKernel_f_V_3_0_ce0 <= ap_const_logic_1;
        else 
            firstKernel_f_V_3_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    firstKernel_f_V_3_1_address0 <= idxprom87_reg_3350(3 - 1 downto 0);

    firstKernel_f_V_3_1_ce0_assign_proc : process(ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            firstKernel_f_V_3_1_ce0 <= ap_const_logic_1;
        else 
            firstKernel_f_V_3_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    firstKernel_f_V_3_2_address0 <= idxprom87_reg_3350(3 - 1 downto 0);

    firstKernel_f_V_3_2_ce0_assign_proc : process(ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            firstKernel_f_V_3_2_ce0 <= ap_const_logic_1;
        else 
            firstKernel_f_V_3_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    i_8_fu_921_p3 <= 
        sub_ln201_fu_907_p2 when (tmp_fu_881_p3(0) = '1') else 
        tmp_s_fu_913_p3;
    icmp_ln197_fu_839_p2 <= "1" when (id_fu_188 = ap_const_lv12_C00) else "0";
    icmp_ln200_fu_858_p2 <= "1" when (trunc_ln173_fu_854_p1 = ap_const_lv2_0) else "0";
    icmp_ln208_fu_933_p2 <= "1" when (i_8_fu_921_p3 = ap_const_lv8_0) else "0";
    icmp_ln222_1_fu_958_p2 <= "1" when (unsigned(add_ln222_fu_952_p2) < unsigned(ap_const_lv12_3)) else "0";
    icmp_ln222_fu_1609_p2 <= "1" when (trunc_ln173_reg_3222_pp0_iter4_reg = ap_const_lv2_2) else "0";
    icmp_ln229_1_fu_1043_p2 <= "0" when (t_fu_1005_p3 = ap_const_lv2_0) else "1";
    icmp_ln229_2_fu_1473_p2 <= "1" when (t_reg_3264_pp0_iter3_reg = ap_const_lv2_1) else "0";
    icmp_ln229_3_fu_1486_p2 <= "1" when (t_reg_3264_pp0_iter3_reg = ap_const_lv2_0) else "0";
    icmp_ln229_4_fu_1037_p2 <= "1" when (signed(tmp_84_fu_1027_p4) < signed(ap_const_lv10_1)) else "0";
    icmp_ln229_fu_994_p2 <= "0" when (add_ln228_fu_989_p2 = ap_const_lv2_3) else "1";
    icmp_ln230_fu_1097_p2 <= "1" when (signed(tmp_85_fu_1087_p4) < signed(ap_const_lv10_1)) else "0";
    icmp_ln234_fu_1651_p2 <= "1" when (trunc_ln173_reg_3222_pp0_iter4_reg = ap_const_lv2_1) else "0";
    icmp_ln235_fu_1191_p0 <= i_fu_316;
    icmp_ln235_fu_1191_p2 <= "1" when (signed(icmp_ln235_fu_1191_p0) > signed(ap_const_lv16_0)) else "0";
    icmp_ln237_fu_1664_p2 <= "0" when (trunc_ln173_reg_3222_pp0_iter4_reg = ap_const_lv2_0) else "1";
    icmp_ln243_1_fu_1772_p2 <= "1" when (or_ln_fu_1700_p3 = ap_const_lv3_5) else "0";
    icmp_ln243_2_fu_1792_p2 <= "1" when (or_ln_fu_1700_p3 = ap_const_lv3_6) else "0";
    icmp_ln243_3_fu_1812_p2 <= "0" when (or_ln_fu_1700_p3 = ap_const_lv3_6) else "1";
    icmp_ln243_4_fu_1818_p2 <= "0" when (or_ln_fu_1700_p3 = ap_const_lv3_5) else "1";
    icmp_ln243_5_fu_1824_p2 <= "0" when (or_ln_fu_1700_p3 = ap_const_lv3_4) else "1";
    icmp_ln243_fu_1748_p2 <= "1" when (or_ln_fu_1700_p3 = ap_const_lv3_4) else "0";
    icmp_ln260_fu_1213_p2 <= "1" when (signed(tmp_86_fu_1203_p4) < signed(ap_const_lv10_1)) else "0";
    id_4_fu_845_p2 <= std_logic_vector(unsigned(id_fu_188) + unsigned(ap_const_lv12_1));
    idxprom87_fu_1379_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(d_9_fu_1367_p3),64));

    input_r_address0_assign_proc : process(ap_enable_reg_pp0_iter3, icmp_ln229_4_reg_3270, icmp_ln229_1_reg_3279, icmp_ln230_reg_3290, zext_ln229_1_fu_1246_p1, ap_block_pp0_stage0, zext_ln230_fu_1250_p1, zext_ln231_1_fu_1254_p1, zext_ln232_1_fu_1258_p1, ap_condition_993, ap_condition_999)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then
            if (((icmp_ln230_reg_3290 = ap_const_lv1_0) and (icmp_ln229_1_reg_3279 = ap_const_lv1_0))) then 
                input_r_address0 <= zext_ln232_1_fu_1258_p1(9 - 1 downto 0);
            elsif ((ap_const_boolean_1 = ap_condition_999)) then 
                input_r_address0 <= zext_ln231_1_fu_1254_p1(9 - 1 downto 0);
            elsif ((ap_const_boolean_1 = ap_condition_993)) then 
                input_r_address0 <= zext_ln230_fu_1250_p1(9 - 1 downto 0);
            elsif (((icmp_ln229_1_reg_3279 = ap_const_lv1_1) and (icmp_ln229_4_reg_3270 = ap_const_lv1_1))) then 
                input_r_address0 <= zext_ln229_1_fu_1246_p1(9 - 1 downto 0);
            else 
                input_r_address0 <= "XXXXXXXXX";
            end if;
        else 
            input_r_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    input_r_ce0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001, icmp_ln229_4_reg_3270, icmp_ln229_1_reg_3279, icmp_ln230_reg_3290)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln230_reg_3290 = ap_const_lv1_0) and (icmp_ln229_1_reg_3279 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln230_reg_3290 = ap_const_lv1_0) and (icmp_ln229_1_reg_3279 = ap_const_lv1_1) and (icmp_ln229_4_reg_3270 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln229_1_reg_3279 = ap_const_lv1_1) and (icmp_ln229_4_reg_3270 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (((icmp_ln230_reg_3290 = ap_const_lv1_1) and (icmp_ln229_4_reg_3270 = ap_const_lv1_0)) or ((icmp_ln230_reg_3290 = ap_const_lv1_1) and (icmp_ln229_1_reg_3279 = ap_const_lv1_0)))))) then 
            input_r_ce0 <= ap_const_logic_1;
        else 
            input_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    newFirst74_fu_1069_p2 <= std_logic_vector(unsigned(zext_ln229_fu_1049_p1) - unsigned(trunc_ln229_1_fu_1053_p1));
    newFirst76_fu_1119_p2 <= std_logic_vector(unsigned(zext_ln229_fu_1049_p1) - unsigned(trunc_ln230_fu_1103_p1));
    newFirst_fu_1179_p2 <= std_logic_vector(unsigned(tmp_20_fu_1171_p3) + unsigned(zext_ln229_fu_1049_p1));
    newSecond75_fu_1075_p2 <= std_logic_vector(unsigned(tmp_58_cast_fu_1061_p3) + unsigned(newFirst74_fu_1069_p2));
    newSecond77_fu_1125_p2 <= std_logic_vector(unsigned(tmp_59_cast_fu_1111_p3) + unsigned(newFirst76_fu_1119_p2));
    newSecond_fu_1185_p2 <= std_logic_vector(unsigned(newFirst_fu_1179_p2) - unsigned(zext_ln232_fu_1167_p1));
    num_V_2_fu_2929_p3 <= 
        ap_const_lv35_0 when (tmp_87_fu_2921_p3(0) = '1') else 
        add_ln1548_fu_2916_p2;
    or_ln229_fu_1427_p2 <= (and_ln230_fu_1406_p2 or and_ln229_1_fu_1422_p2);
    or_ln230_fu_1411_p2 <= (icmp_ln230_reg_3290_pp0_iter3_reg or and_ln229_fu_1396_p2);
    or_ln247_fu_1856_p2 <= (icmp_ln235_reg_3311_pp0_iter4_reg or icmp_ln229_reg_3254_pp0_iter4_reg);
    or_ln260_fu_2316_p2 <= (icmp_ln260_reg_3319_pp0_iter4_reg or icmp_ln229_4_reg_3270_pp0_iter4_reg);
    or_ln_fu_1700_p3 <= (ap_const_lv1_1 & trunc_ln173_reg_3222_pp0_iter4_reg);
    out_r_address0 <= zext_ln274_fu_2937_p1(12 - 1 downto 0);

    out_r_ce0_assign_proc : process(ap_enable_reg_pp0_iter11, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter11 = ap_const_logic_1))) then 
            out_r_ce0 <= ap_const_logic_1;
        else 
            out_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_r_d0 <= num_V_2_reg_3744;

    out_r_we0_assign_proc : process(ap_enable_reg_pp0_iter11, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter11 = ap_const_logic_1))) then 
            out_r_we0 <= ap_const_logic_1;
        else 
            out_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

    p_and_t3_cast_fu_899_p3 <= (ap_const_lv1_0 & xor_ln201_fu_893_p2);
    p_and_t7_cast_fu_1345_p3 <= (ap_const_lv1_0 & xor_ln209_fu_1339_p2);
    select_ln222_fu_964_p3 <= 
        add_ln222_fu_952_p2 when (icmp_ln222_1_fu_958_p2(0) = '1') else 
        ap_const_lv12_0;
    select_ln229_1_fu_1457_p3 <= 
        trunc_ln229_5_fu_1449_p1 when (and_ln229_fu_1396_p2(0) = '1') else 
        trunc_ln229_6_fu_1453_p1;
    select_ln229_fu_1441_p3 <= 
        trunc_ln229_3_fu_1433_p1 when (and_ln229_1_fu_1422_p2(0) = '1') else 
        trunc_ln229_4_fu_1437_p1;
    select_ln234_1_fu_1656_p3 <= 
        tmp1_V_1_fu_324 when (icmp_ln234_fu_1651_p2(0) = '1') else 
        select_ln234_fu_1644_p3;
    select_ln234_fu_1644_p3 <= 
        tmp1_V_3_1_fu_1622_p3 when (icmp_ln200_reg_3233_pp0_iter4_reg(0) = '1') else 
        tmp1_V_2_fu_336;
    select_ln236_fu_1685_p3 <= 
        tmp1_V_0_3_fu_1630_p3 when (icmp_ln200_reg_3233_pp0_iter4_reg(0) = '1') else 
        tmp1_V_2_1_fu_340;
    select_ln237_1_fu_1715_p3 <= 
        tmp2_V_0_fu_1707_p3 when (icmp_ln237_fu_1664_p2(0) = '1') else 
        tmp2_V_0_2_fu_192;
    select_ln237_2_fu_2164_p3 <= 
        tmp2_V_6_fu_2156_p3 when (icmp_ln237_fu_1664_p2(0) = '1') else 
        tmp2_V_6_2_fu_212;
    select_ln237_3_fu_2207_p3 <= 
        tmp2_V_9_fu_2179_p14 when (icmp_ln237_fu_1664_p2(0) = '1') else 
        tmp2_V_9_2_fu_224;
    select_ln237_fu_1677_p3 <= 
        tmp2_V_3_fu_1669_p3 when (icmp_ln237_fu_1664_p2(0) = '1') else 
        tmp2_V_3_2_fu_204;
    select_ln241_1_fu_1984_p3 <= 
        tmp2_V_1_fu_1692_p3 when (and_ln241_fu_1735_p2(0) = '1') else 
        tmp2_V_1_2_fu_196;
    select_ln241_2_fu_2056_p3 <= 
        select_ln237_1_fu_1715_p3 when (and_ln241_fu_1735_p2(0) = '1') else 
        tmp2_V_0_2_fu_192;
    select_ln241_fu_1740_p3 <= 
        tmp2_V_5_2_fu_208 when (and_ln241_fu_1735_p2(0) = '1') else 
        tmp1_V_4_fu_320;
    select_ln243_10_fu_2008_p3 <= 
        tmp2_V_1_fu_1692_p3 when (and_ln243_2_fu_1798_p2(0) = '1') else 
        select_ln243_9_fu_2000_p3;
    select_ln243_11_fu_2016_p3 <= 
        tmp2_V_1_fu_1692_p3 when (and_ln243_5_fu_1842_p2(0) = '1') else 
        select_ln243_10_fu_2008_p3;
    select_ln243_12_fu_2064_p3 <= 
        select_ln237_1_fu_1715_p3 when (and_ln243_fu_1758_p2(0) = '1') else 
        select_ln241_2_fu_2056_p3;
    select_ln243_13_fu_2072_p3 <= 
        select_ln237_1_fu_1715_p3 when (and_ln243_1_fu_1778_p2(0) = '1') else 
        select_ln243_12_fu_2064_p3;
    select_ln243_14_fu_2080_p3 <= 
        select_ln237_1_fu_1715_p3 when (and_ln243_2_fu_1798_p2(0) = '1') else 
        select_ln243_13_fu_2072_p3;
    select_ln243_15_fu_2088_p3 <= 
        select_ln237_1_fu_1715_p3 when (and_ln243_5_fu_1842_p2(0) = '1') else 
        select_ln243_14_fu_2080_p3;
    select_ln243_1_fu_1784_p3 <= 
        tmp1_V_2_fu_336 when (and_ln243_1_fu_1778_p2(0) = '1') else 
        select_ln243_fu_1764_p3;
    select_ln243_2_fu_1804_p3 <= 
        tmp1_V_6_fu_1614_p3 when (and_ln243_2_fu_1798_p2(0) = '1') else 
        select_ln243_1_fu_1784_p3;
    select_ln243_3_fu_1848_p3 <= 
        tmp1_V_4_fu_320 when (and_ln243_5_fu_1842_p2(0) = '1') else 
        select_ln243_2_fu_1804_p3;
    select_ln243_4_fu_1920_p3 <= 
        tmp2_V_2_fu_1723_p3 when (and_ln243_fu_1758_p2(0) = '1') else 
        tmp2_V_2_2_fu_200;
    select_ln243_5_fu_1928_p3 <= 
        tmp2_V_2_fu_1723_p3 when (and_ln243_1_fu_1778_p2(0) = '1') else 
        select_ln243_4_fu_1920_p3;
    select_ln243_6_fu_1936_p3 <= 
        tmp2_V_2_fu_1723_p3 when (and_ln243_2_fu_1798_p2(0) = '1') else 
        select_ln243_5_fu_1928_p3;
    select_ln243_7_fu_1944_p3 <= 
        tmp2_V_2_fu_1723_p3 when (and_ln243_5_fu_1842_p2(0) = '1') else 
        select_ln243_6_fu_1936_p3;
    select_ln243_8_fu_1992_p3 <= 
        tmp2_V_1_fu_1692_p3 when (and_ln243_fu_1758_p2(0) = '1') else 
        select_ln241_1_fu_1984_p3;
    select_ln243_9_fu_2000_p3 <= 
        tmp2_V_1_fu_1692_p3 when (and_ln243_1_fu_1778_p2(0) = '1') else 
        select_ln243_8_fu_1992_p3;
    select_ln243_fu_1764_p3 <= 
        tmp1_V_1_fu_324 when (and_ln243_fu_1758_p2(0) = '1') else 
        select_ln241_fu_1740_p3;
    select_ln247_10_fu_2040_p3 <= 
        tmp2_V_1_2_fu_196 when (and_ln247_2_fu_1892_p2(0) = '1') else 
        select_ln247_9_fu_2032_p3;
    select_ln247_11_fu_2048_p3 <= 
        tmp2_V_1_2_fu_196 when (and_ln247_3_fu_1906_p2(0) = '1') else 
        select_ln247_10_fu_2040_p3;
    select_ln247_12_fu_2096_p3 <= 
        select_ln243_15_fu_2088_p3 when (or_ln247_fu_1856_p2(0) = '1') else 
        tmp2_V_0_2_fu_192;
    select_ln247_13_fu_2104_p3 <= 
        tmp2_V_0_2_fu_192 when (and_ln247_1_fu_1878_p2(0) = '1') else 
        select_ln247_12_fu_2096_p3;
    select_ln247_14_fu_2112_p3 <= 
        tmp2_V_0_2_fu_192 when (and_ln247_2_fu_1892_p2(0) = '1') else 
        select_ln247_13_fu_2104_p3;
    select_ln247_15_fu_2120_p3 <= 
        tmp2_V_0_2_fu_192 when (and_ln247_3_fu_1906_p2(0) = '1') else 
        select_ln247_14_fu_2112_p3;
    select_ln247_1_fu_1884_p3 <= 
        tmp1_V_1_fu_324 when (and_ln247_1_fu_1878_p2(0) = '1') else 
        select_ln247_fu_1860_p3;
    select_ln247_2_fu_1898_p3 <= 
        tmp1_V_2_fu_336 when (and_ln247_2_fu_1892_p2(0) = '1') else 
        select_ln247_1_fu_1884_p3;
    select_ln247_3_fu_1912_p3 <= 
        tmp1_V_6_fu_1614_p3 when (and_ln247_3_fu_1906_p2(0) = '1') else 
        select_ln247_2_fu_1898_p3;
    select_ln247_4_fu_1952_p3 <= 
        select_ln243_7_fu_1944_p3 when (or_ln247_fu_1856_p2(0) = '1') else 
        tmp2_V_2_2_fu_200;
    select_ln247_5_fu_1960_p3 <= 
        tmp2_V_2_2_fu_200 when (and_ln247_1_fu_1878_p2(0) = '1') else 
        select_ln247_4_fu_1952_p3;
    select_ln247_6_fu_1968_p3 <= 
        tmp2_V_2_2_fu_200 when (and_ln247_2_fu_1892_p2(0) = '1') else 
        select_ln247_5_fu_1960_p3;
    select_ln247_7_fu_1976_p3 <= 
        tmp2_V_2_2_fu_200 when (and_ln247_3_fu_1906_p2(0) = '1') else 
        select_ln247_6_fu_1968_p3;
    select_ln247_8_fu_2024_p3 <= 
        select_ln243_11_fu_2016_p3 when (or_ln247_fu_1856_p2(0) = '1') else 
        tmp2_V_1_2_fu_196;
    select_ln247_9_fu_2032_p3 <= 
        tmp2_V_1_2_fu_196 when (and_ln247_1_fu_1878_p2(0) = '1') else 
        select_ln247_8_fu_2024_p3;
    select_ln247_fu_1860_p3 <= 
        select_ln243_3_fu_1848_p3 when (or_ln247_fu_1856_p2(0) = '1') else 
        tmp2_V_5_2_fu_208;
    select_ln250_fu_2128_p3 <= 
        tmp1_V_6_fu_1614_p3 when (icmp_ln200_reg_3233_pp0_iter4_reg(0) = '1') else 
        tmp1_V_5_fu_332;
    select_ln256_1_fu_2252_p3 <= 
        tmp2_V_11_2_fu_232 when (and_ln256_1_fu_2247_p2(0) = '1') else 
        select_ln256_fu_2239_p3;
    select_ln256_2_fu_2328_p3 <= 
        tmp1_V_11_36_fu_2149_p3 when (and_ln256_fu_2235_p2(0) = '1') else 
        tmp2_V_10_2_fu_228;
    select_ln256_3_fu_2336_p3 <= 
        tmp1_V_11_36_fu_2149_p3 when (and_ln256_1_fu_2247_p2(0) = '1') else 
        select_ln256_2_fu_2328_p3;
    select_ln256_4_fu_2376_p3 <= 
        select_ln237_3_fu_2207_p3 when (and_ln256_fu_2235_p2(0) = '1') else 
        tmp2_V_9_2_fu_224;
    select_ln256_5_fu_2384_p3 <= 
        select_ln237_3_fu_2207_p3 when (and_ln256_1_fu_2247_p2(0) = '1') else 
        select_ln256_4_fu_2376_p3;
    select_ln256_6_fu_2424_p3 <= 
        tmp1_V_11_37_fu_2222_p3 when (and_ln256_fu_2235_p2(0) = '1') else 
        tmp1_V_11_30_fu_1638_p3;
    select_ln256_7_fu_2432_p3 <= 
        tmp2_V_8_2_fu_220 when (and_ln256_1_fu_2247_p2(0) = '1') else 
        select_ln256_6_fu_2424_p3;
    select_ln256_fu_2239_p3 <= 
        tmp2_V_11_fu_2230_p3 when (and_ln256_fu_2235_p2(0) = '1') else 
        tmp2_V_11_2_fu_232;
    select_ln260_1_fu_2368_p3 <= 
        select_ln263_5_fu_2360_p3 when (or_ln260_fu_2316_p2(0) = '1') else 
        tmp2_V_10_2_fu_228;
    select_ln260_2_fu_2416_p3 <= 
        select_ln263_8_fu_2408_p3 when (or_ln260_fu_2316_p2(0) = '1') else 
        tmp2_V_9_2_fu_224;
    select_ln260_3_fu_2464_p3 <= 
        select_ln263_11_fu_2456_p3 when (or_ln260_fu_2316_p2(0) = '1') else 
        tmp2_V_8_2_fu_220;
    select_ln260_5_fu_2480_p3 <= 
        select_ln237_2_fu_2164_p3 when (or_ln260_fu_2316_p2(0) = '1') else 
        tmp2_V_6_2_fu_212;
    select_ln260_fu_2320_p3 <= 
        select_ln263_2_fu_2308_p3 when (or_ln260_fu_2316_p2(0) = '1') else 
        tmp2_V_11_2_fu_232;
    select_ln263_10_fu_2448_p3 <= 
        tmp1_V_5_fu_332 when (and_ln263_2_fu_2289_p2(0) = '1') else 
        select_ln263_9_fu_2440_p3;
    select_ln263_11_fu_2456_p3 <= 
        tmp1_V_4_fu_320 when (and_ln263_3_fu_2303_p2(0) = '1') else 
        select_ln263_10_fu_2448_p3;
    select_ln263_1_fu_2295_p3 <= 
        tmp2_V_11_2_fu_232 when (and_ln263_2_fu_2289_p2(0) = '1') else 
        select_ln263_fu_2276_p3;
    select_ln263_2_fu_2308_p3 <= 
        tmp2_V_11_2_fu_232 when (and_ln263_3_fu_2303_p2(0) = '1') else 
        select_ln263_1_fu_2295_p3;
    select_ln263_3_fu_2344_p3 <= 
        tmp2_V_10_2_fu_228 when (and_ln263_fu_2270_p2(0) = '1') else 
        select_ln256_3_fu_2336_p3;
    select_ln263_4_fu_2352_p3 <= 
        tmp2_V_10_2_fu_228 when (and_ln263_2_fu_2289_p2(0) = '1') else 
        select_ln263_3_fu_2344_p3;
    select_ln263_5_fu_2360_p3 <= 
        tmp2_V_10_2_fu_228 when (and_ln263_3_fu_2303_p2(0) = '1') else 
        select_ln263_4_fu_2352_p3;
    select_ln263_6_fu_2392_p3 <= 
        tmp2_V_9_2_fu_224 when (and_ln263_fu_2270_p2(0) = '1') else 
        select_ln256_5_fu_2384_p3;
    select_ln263_7_fu_2400_p3 <= 
        tmp2_V_9_2_fu_224 when (and_ln263_2_fu_2289_p2(0) = '1') else 
        select_ln263_6_fu_2392_p3;
    select_ln263_8_fu_2408_p3 <= 
        tmp2_V_9_2_fu_224 when (and_ln263_3_fu_2303_p2(0) = '1') else 
        select_ln263_7_fu_2400_p3;
    select_ln263_9_fu_2440_p3 <= 
        tmp2_V_8_2_fu_220 when (and_ln263_fu_2270_p2(0) = '1') else 
        select_ln256_7_fu_2432_p3;
    select_ln263_fu_2276_p3 <= 
        tmp2_V_11_2_fu_232 when (and_ln263_fu_2270_p2(0) = '1') else 
        select_ln256_1_fu_2252_p3;
        sext_ln201_1_fu_929_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(i_8_fu_921_p3),16));

    sext_ln201_fu_867_p0 <= i_fu_316;
        sext_ln201_fu_867_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln201_fu_867_p0),17));

        sext_ln209_1_fu_1375_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(d_9_fu_1367_p3),16));

    sext_ln209_fu_1313_p0 <= d_fu_264;
        sext_ln209_fu_1313_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln209_fu_1313_p0),17));

        sext_ln216_10_fu_2612_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(firstKernel_f_V_3_1_q0),36));

        sext_ln216_11_fu_2616_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(firstKernel_f_V_3_2_q0),36));

        sext_ln216_1_fu_1529_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(firstKernel_f_V_0_1_q0),36));

        sext_ln216_2_fu_2580_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(firstKernel_f_V_0_2_q0),36));

        sext_ln216_3_fu_2584_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(firstKernel_f_V_1_0_q0),36));

        sext_ln216_4_fu_2588_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(firstKernel_f_V_1_1_q0),36));

        sext_ln216_5_fu_2592_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(firstKernel_f_V_1_2_q0),36));

        sext_ln216_6_fu_2596_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(firstKernel_f_V_2_0_q0),36));

        sext_ln216_7_fu_2600_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(firstKernel_f_V_2_1_q0),36));

        sext_ln216_8_fu_2604_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(firstKernel_f_V_2_2_q0),36));

        sext_ln216_9_fu_2608_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(firstKernel_f_V_3_0_q0),36));

        sext_ln216_fu_1525_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(firstKernel_f_V_0_0_q0),36));

        sext_ln222_fu_2694_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(firstBias_f_V_load_reg_3519),36));

    sext_ln229_fu_1017_p0 <= i_fu_316;
        sext_ln229_fu_1017_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln229_fu_1017_p0),17));

    sub_ln201_fu_907_p2 <= std_logic_vector(unsigned(ap_const_lv8_0) - unsigned(p_and_t3_cast_fu_899_p3));
    sub_ln209_fu_1353_p2 <= std_logic_vector(unsigned(ap_const_lv4_0) - unsigned(p_and_t7_cast_fu_1345_p3));
    sub_ln231_fu_1149_p2 <= std_logic_vector(unsigned(tmp_19_fu_1141_p3) - unsigned(zext_ln231_fu_1137_p1));
    sub_ln274_fu_1235_p2 <= std_logic_vector(unsigned(tmp_66_cast_fu_1227_p3) - unsigned(trunc_ln274_fu_1219_p1));
    t_fu_1005_p3 <= 
        add_ln228_fu_989_p2 when (icmp_ln229_fu_994_p2(0) = '1') else 
        xor_ln229_2_fu_1000_p2;
    tmp1_V_0_3_fu_1630_p3 <= 
        tmp1_V_0_fu_240 when (icmp_ln222_fu_1609_p2(0) = '1') else 
        tmp1_V_0_2_fu_236;
    tmp1_V_11_24_fu_1478_p3 <= 
        tmp1_V_8_fu_256 when (icmp_ln229_2_fu_1473_p2(0) = '1') else 
        tmp1_V_11_35_fu_1465_p3;
    tmp1_V_11_25_fu_1491_p3 <= 
        tmp1_V_8_fu_256 when (icmp_ln229_3_fu_1486_p2(0) = '1') else 
        tmp1_V_11_24_fu_1478_p3;
    tmp1_V_11_28_fu_1499_p3 <= 
        tmp1_V_11_35_fu_1465_p3 when (icmp_ln229_2_fu_1473_p2(0) = '1') else 
        tmp1_V_7_fu_252;
    tmp1_V_11_29_fu_1507_p3 <= 
        tmp1_V_7_fu_252 when (icmp_ln229_3_fu_1486_p2(0) = '1') else 
        tmp1_V_11_28_fu_1499_p3;
    tmp1_V_11_30_fu_1638_p3 <= 
        tmp1_V_11_35_reg_3375 when (icmp_ln229_3_reg_3380(0) = '1') else 
        tmp1_V_11_fu_248;
    tmp1_V_11_31_fu_2143_p3 <= 
        tmp1_V_11_30_fu_1638_p3 when (icmp_ln200_reg_3233_pp0_iter4_reg(0) = '1') else 
        tmp1_V_11_25_reg_3385;
    tmp1_V_11_33_fu_2215_p3 <= 
        tmp1_V_4_fu_320 when (icmp_ln200_reg_3233_pp0_iter4_reg(0) = '1') else 
        tmp1_V_11_30_fu_1638_p3;
    tmp1_V_11_35_fu_1465_p3 <= 
        select_ln229_fu_1441_p3 when (or_ln229_fu_1427_p2(0) = '1') else 
        select_ln229_1_fu_1457_p3;
    tmp1_V_11_36_fu_2149_p3 <= 
        tmp1_V_11_29_reg_3392 when (icmp_ln234_fu_1651_p2(0) = '1') else 
        tmp1_V_11_31_fu_2143_p3;
    tmp1_V_11_37_fu_2222_p3 <= 
        tmp1_V_5_fu_332 when (icmp_ln234_fu_1651_p2(0) = '1') else 
        tmp1_V_11_33_fu_2215_p3;
    tmp1_V_3_1_fu_1622_p3 <= 
        tmp1_V_3_fu_244 when (icmp_ln222_fu_1609_p2(0) = '1') else 
        tmp1_V_0_fu_240;
    tmp1_V_6_fu_1614_p3 <= 
        tmp1_V_11_fu_248 when (icmp_ln222_fu_1609_p2(0) = '1') else 
        tmp1_V_3_fu_244;
    tmp2_V_0_fu_1707_p3 <= 
        tmp1_V_0_3_fu_1630_p3 when (icmp_ln234_fu_1651_p2(0) = '1') else 
        tmp1_V_1_1_fu_328;
    tmp2_V_11_fu_2230_p3 <= 
        tmp1_V_11_29_reg_3392 when (icmp_ln200_reg_3233_pp0_iter4_reg(0) = '1') else 
        tmp1_V_11_25_reg_3385;
    tmp2_V_1_fu_1692_p3 <= 
        tmp1_V_1_1_fu_328 when (icmp_ln234_fu_1651_p2(0) = '1') else 
        select_ln236_fu_1685_p3;
    tmp2_V_2_fu_1723_p3 <= 
        tmp1_V_1_1_fu_328 when (icmp_ln200_reg_3233_pp0_iter4_reg(0) = '1') else 
        tmp1_V_2_1_fu_340;
    tmp2_V_3_fu_1669_p3 <= 
        tmp1_V_3_1_fu_1622_p3 when (icmp_ln234_fu_1651_p2(0) = '1') else 
        tmp1_V_1_fu_324;
    tmp2_V_6_fu_2156_p3 <= 
        tmp1_V_6_fu_1614_p3 when (icmp_ln234_fu_1651_p2(0) = '1') else 
        tmp1_V_4_fu_320;
    tmp2_V_7_1_fu_2472_p3 <= 
        tmp2_V_7_fu_2135_p3 when (or_ln260_fu_2316_p2(0) = '1') else 
        tmp2_V_7_2_fu_216;
    tmp2_V_7_fu_2135_p3 <= 
        tmp1_V_4_fu_320 when (icmp_ln234_fu_1651_p2(0) = '1') else 
        select_ln250_fu_2128_p3;
    tmp2_V_9_fu_2179_p13 <= (ap_const_lv2_2 & trunc_ln173_reg_3222_pp0_iter4_reg);
    tmp_18_fu_1359_p3 <= (ap_const_lv1_0 & trunc_ln209_1_fu_1335_p1);
    tmp_19_fu_1141_p3 <= (add_ln231_fu_1131_p2 & ap_const_lv2_0);
    tmp_20_fu_1171_p3 <= (add_ln232_fu_1161_p2 & ap_const_lv2_0);
    tmp_58_cast_fu_1061_p3 <= (trunc_ln229_2_fu_1057_p1 & ap_const_lv2_0);
    tmp_59_cast_fu_1111_p3 <= (trunc_ln230_1_fu_1107_p1 & ap_const_lv2_0);
    tmp_66_cast_fu_1227_p3 <= (trunc_ln274_1_fu_1223_p1 & ap_const_lv2_0);
    tmp_68_cast_fu_2488_p3 <= (add_ln274_reg_3325_pp0_iter4_reg & ap_const_lv3_0);
    tmp_83_fu_1327_p3 <= add_ln209_fu_1321_p2(16 downto 16);
    tmp_84_fu_1027_p4 <= add_ln229_fu_1021_p2(16 downto 7);
    tmp_85_fu_1087_p4 <= add_ln230_fu_1081_p2(16 downto 7);
    tmp_86_fu_1203_p4 <= add_ln260_fu_1197_p2(16 downto 7);
    tmp_87_fu_2921_p3 <= add_ln712_11_fu_2911_p2(35 downto 35);
    tmp_fu_881_p3 <= add_ln201_fu_875_p2(16 downto 16);
    tmp_s_fu_913_p3 <= (ap_const_lv1_0 & trunc_ln201_1_fu_889_p1);
    trunc_ln173_fu_854_p1 <= j_fu_184(2 - 1 downto 0);
    trunc_ln201_1_fu_889_p1 <= add_ln201_fu_875_p2(7 - 1 downto 0);
    trunc_ln201_fu_871_p0 <= i_fu_316;
    trunc_ln201_fu_871_p1 <= trunc_ln201_fu_871_p0(7 - 1 downto 0);
    trunc_ln209_1_fu_1335_p1 <= add_ln209_fu_1321_p2(3 - 1 downto 0);
    trunc_ln209_fu_1317_p0 <= d_fu_264;
    trunc_ln209_fu_1317_p1 <= trunc_ln209_fu_1317_p0(3 - 1 downto 0);
    trunc_ln229_1_fu_1053_p1 <= add_ln229_fu_1021_p2(9 - 1 downto 0);
    trunc_ln229_2_fu_1057_p1 <= add_ln229_fu_1021_p2(7 - 1 downto 0);
    trunc_ln229_3_fu_1433_p1 <= input_r_q0(12 - 1 downto 0);
    trunc_ln229_4_fu_1437_p1 <= input_r_q0(12 - 1 downto 0);
    trunc_ln229_5_fu_1449_p1 <= input_r_q0(12 - 1 downto 0);
    trunc_ln229_6_fu_1453_p1 <= input_r_q0(12 - 1 downto 0);
    trunc_ln229_fu_1013_p0 <= i_fu_316;
    trunc_ln229_fu_1013_p1 <= trunc_ln229_fu_1013_p0(7 - 1 downto 0);
    trunc_ln230_1_fu_1107_p1 <= add_ln230_fu_1081_p2(7 - 1 downto 0);
    trunc_ln230_fu_1103_p1 <= add_ln230_fu_1081_p2(9 - 1 downto 0);
    trunc_ln274_1_fu_1223_p0 <= i_fu_316;
    trunc_ln274_1_fu_1223_p1 <= trunc_ln274_1_fu_1223_p0(7 - 1 downto 0);
    trunc_ln274_2_fu_972_p1 <= j_fu_184(9 - 1 downto 0);
    trunc_ln274_3_fu_2495_p1 <= d_fu_264(12 - 1 downto 0);
    trunc_ln274_fu_1219_p0 <= i_fu_316;
    trunc_ln274_fu_1219_p1 <= trunc_ln274_fu_1219_p0(9 - 1 downto 0);
    trunc_ln712_1_fu_2861_p1 <= add_ln712_3_fu_2852_p2(35 - 1 downto 0);
    trunc_ln712_2_fu_2873_p1 <= add_ln712_7_fu_2865_p2(35 - 1 downto 0);
    trunc_ln712_3_fu_2877_p1 <= add_ln712_8_fu_2869_p2(35 - 1 downto 0);
    trunc_ln712_4_fu_2835_p1 <= add_ln712_6_fu_2830_p2(35 - 1 downto 0);
    trunc_ln712_fu_2857_p1 <= add_ln712_1_fu_2843_p2(35 - 1 downto 0);
    xor_ln201_fu_893_p2 <= (trunc_ln201_fu_871_p1 xor ap_const_lv7_7F);
    xor_ln209_fu_1339_p2 <= (trunc_ln209_fu_1317_p1 xor ap_const_lv3_7);
    xor_ln229_1_fu_2260_p2 <= (icmp_ln229_4_reg_3270_pp0_iter4_reg xor ap_const_lv1_1);
    xor_ln229_2_fu_1000_p2 <= (trunc_ln173_reg_3222 xor ap_const_lv2_2);
    xor_ln229_fu_1400_p2 <= (ap_const_lv1_1 xor and_ln229_fu_1396_p2);
    xor_ln230_fu_1416_p2 <= (or_ln230_fu_1411_p2 xor ap_const_lv1_1);
    xor_ln235_fu_1868_p2 <= (icmp_ln235_reg_3311_pp0_iter4_reg xor ap_const_lv1_1);
    xor_ln241_fu_1730_p2 <= (icmp_ln229_reg_3254_pp0_iter4_reg xor ap_const_lv1_1);
    zext_ln229_1_fu_1246_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(newSecond75_reg_3285),64));
    zext_ln229_fu_1049_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(t_fu_1005_p3),9));
    zext_ln230_fu_1250_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(newSecond77_reg_3296),64));
    zext_ln231_1_fu_1254_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln231_1_reg_3301),64));
    zext_ln231_fu_1137_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln231_fu_1131_p2),9));
    zext_ln232_1_fu_1258_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(newSecond_reg_3306),64));
    zext_ln232_fu_1167_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln232_fu_1161_p2),9));
    zext_ln274_fu_2937_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln274_1_reg_3514_pp0_iter10_reg),64));
end behav;
