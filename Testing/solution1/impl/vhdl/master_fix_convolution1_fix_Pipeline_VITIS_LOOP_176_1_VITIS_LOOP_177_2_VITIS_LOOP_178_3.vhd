-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
-- Version: 2021.1
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity master_fix_convolution1_fix_Pipeline_VITIS_LOOP_176_1_VITIS_LOOP_177_2_VITIS_LOOP_178_3 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_r_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    input_r_ce0 : OUT STD_LOGIC;
    input_r_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    input_r_address1 : OUT STD_LOGIC_VECTOR (8 downto 0);
    input_r_ce1 : OUT STD_LOGIC;
    input_r_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
    tmp_V_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    tmp_V_ce0 : OUT STD_LOGIC;
    tmp_V_we0 : OUT STD_LOGIC;
    tmp_V_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of master_fix_convolution1_fix_Pipeline_VITIS_LOOP_176_1_VITIS_LOOP_177_2_VITIS_LOOP_178_3 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_fsm_pp0_stage4 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_fsm_pp0_stage5 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv7_7F : STD_LOGIC_VECTOR (6 downto 0) := "1111111";
    constant ap_const_lv12_C00 : STD_LOGIC_VECTOR (11 downto 0) := "110000000000";
    constant ap_const_lv12_1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv10_180 : STD_LOGIC_VECTOR (9 downto 0) := "0110000000";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv8_2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv8_3 : STD_LOGIC_VECTOR (7 downto 0) := "00000011";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage5 : signal is "none";
    signal ap_block_state6_pp0_stage5_iter0 : BOOLEAN;
    signal ap_block_state12_pp0_stage5_iter1 : BOOLEAN;
    signal ap_block_pp0_stage5_subdone : BOOLEAN;
    signal icmp_ln176_reg_1621 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage5 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal firstKernel_f_V_1_1_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal firstKernel_f_V_1_1_ce0 : STD_LOGIC;
    signal firstKernel_f_V_1_1_q0 : STD_LOGIC_VECTOR (17 downto 0);
    signal firstBias_f_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal firstBias_f_V_ce0 : STD_LOGIC;
    signal firstBias_f_V_q0 : STD_LOGIC_VECTOR (21 downto 0);
    signal firstKernel_f_V_0_1_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal firstKernel_f_V_0_1_ce0 : STD_LOGIC;
    signal firstKernel_f_V_0_1_q0 : STD_LOGIC_VECTOR (18 downto 0);
    signal firstKernel_f_V_0_0_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal firstKernel_f_V_0_0_ce0 : STD_LOGIC;
    signal firstKernel_f_V_0_0_q0 : STD_LOGIC_VECTOR (18 downto 0);
    signal firstKernel_f_V_1_0_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal firstKernel_f_V_1_0_ce0 : STD_LOGIC;
    signal firstKernel_f_V_1_0_q0 : STD_LOGIC_VECTOR (17 downto 0);
    signal firstKernel_f_V_0_2_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal firstKernel_f_V_0_2_ce0 : STD_LOGIC;
    signal firstKernel_f_V_0_2_q0 : STD_LOGIC_VECTOR (19 downto 0);
    signal firstKernel_f_V_1_2_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal firstKernel_f_V_1_2_ce0 : STD_LOGIC;
    signal firstKernel_f_V_1_2_q0 : STD_LOGIC_VECTOR (17 downto 0);
    signal firstKernel_f_V_2_1_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal firstKernel_f_V_2_1_ce0 : STD_LOGIC;
    signal firstKernel_f_V_2_1_q0 : STD_LOGIC_VECTOR (17 downto 0);
    signal firstKernel_f_V_3_1_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal firstKernel_f_V_3_1_ce0 : STD_LOGIC;
    signal firstKernel_f_V_3_1_q0 : STD_LOGIC_VECTOR (18 downto 0);
    signal firstKernel_f_V_2_0_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal firstKernel_f_V_2_0_ce0 : STD_LOGIC;
    signal firstKernel_f_V_2_0_q0 : STD_LOGIC_VECTOR (17 downto 0);
    signal firstKernel_f_V_3_0_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal firstKernel_f_V_3_0_ce0 : STD_LOGIC;
    signal firstKernel_f_V_3_0_q0 : STD_LOGIC_VECTOR (17 downto 0);
    signal firstKernel_f_V_2_2_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal firstKernel_f_V_2_2_ce0 : STD_LOGIC;
    signal firstKernel_f_V_2_2_q0 : STD_LOGIC_VECTOR (17 downto 0);
    signal firstKernel_f_V_3_2_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal firstKernel_f_V_3_2_ce0 : STD_LOGIC;
    signal firstKernel_f_V_3_2_q0 : STD_LOGIC_VECTOR (18 downto 0);
    signal i_6_reg_1614 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state2_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state8_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_state14_pp0_stage1_iter2 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal icmp_ln176_fu_458_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln176_reg_1621_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten59_fu_485_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten59_reg_1625 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln176_fu_491_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln176_reg_1635 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln176_fu_507_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln176_reg_1641 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln176_fu_534_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln176_reg_1702 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln176_1_fu_546_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln176_1_reg_1707 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_mid2_fu_564_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal j_mid2_reg_1718 : STD_LOGIC_VECTOR (1 downto 0);
    signal empty_69_fu_602_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal empty_69_reg_1725 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln1169_1_fu_636_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln1169_1_reg_1731 : STD_LOGIC_VECTOR (8 downto 0);
    signal cmp25_mid1_fu_642_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp25_mid1_reg_1737 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln1169_9_fu_648_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln1169_9_reg_1743 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln202_fu_690_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln202_reg_1759 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln202_reg_1759_pp0_iter1_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln202_reg_1759_pp0_iter2_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_state3_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_state9_pp0_stage2_iter1 : BOOLEAN;
    signal ap_block_state15_pp0_stage2_iter2 : BOOLEAN;
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal firstBias_f_V_load_reg_1769 : STD_LOGIC_VECTOR (21 downto 0);
    signal firstKernel_f_V_0_1_load_reg_1774 : STD_LOGIC_VECTOR (18 downto 0);
    signal firstKernel_f_V_0_0_load_reg_1779 : STD_LOGIC_VECTOR (18 downto 0);
    signal firstKernel_f_V_1_0_load_reg_1784 : STD_LOGIC_VECTOR (17 downto 0);
    signal firstKernel_f_V_0_2_load_reg_1789 : STD_LOGIC_VECTOR (19 downto 0);
    signal firstKernel_f_V_1_2_load_reg_1794 : STD_LOGIC_VECTOR (17 downto 0);
    signal firstKernel_f_V_2_1_load_reg_1799 : STD_LOGIC_VECTOR (17 downto 0);
    signal firstKernel_f_V_3_1_load_reg_1804 : STD_LOGIC_VECTOR (18 downto 0);
    signal firstKernel_f_V_2_0_load_reg_1809 : STD_LOGIC_VECTOR (17 downto 0);
    signal firstKernel_f_V_2_2_load_reg_1814 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln1169_4_fu_747_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln1169_4_reg_1824 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln1169_3_fu_771_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln1169_3_reg_1840 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_block_state4_pp0_stage3_iter0 : BOOLEAN;
    signal ap_block_state10_pp0_stage3_iter1 : BOOLEAN;
    signal ap_block_state16_pp0_stage3_iter2 : BOOLEAN;
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal cmp25_mid2_fu_802_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp25_mid2_reg_1855 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln184_fu_820_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln184_reg_1861 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln184_reg_1861_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln1169_4_fu_828_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln1169_4_reg_1874 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln1169_19_fu_845_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln1169_19_reg_1884 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln185_fu_869_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln185_reg_1900 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln185_reg_1900_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln188_fu_875_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln188_reg_1908 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage4 : signal is "none";
    signal ap_block_state5_pp0_stage4_iter0 : BOOLEAN;
    signal ap_block_state11_pp0_stage4_iter1 : BOOLEAN;
    signal ap_block_pp0_stage4_11001 : BOOLEAN;
    signal sub_ln1169_2_fu_1010_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln1169_2_reg_1928 : STD_LOGIC_VECTOR (8 downto 0);
    signal cmp112_mid2_fu_1030_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp112_mid2_reg_1934 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp112_mid2_reg_1934_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln1169_3_fu_1065_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln1169_3_reg_1940 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_mid210_fu_1118_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_mid210_reg_1946 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_mid210_reg_1946_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln1169_6_fu_1148_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln1169_6_reg_1966 : STD_LOGIC_VECTOR (11 downto 0);
    signal and_ln197_1_fu_1165_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln197_1_reg_1976 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln197_1_reg_1976_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage5_11001 : BOOLEAN;
    signal sext_ln174_fu_1174_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal sext_ln174_reg_1986 : STD_LOGIC_VECTOR (29 downto 0);
    signal add_ln1169_15_fu_1195_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln1169_15_reg_2003 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln1169_16_fu_1199_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln1169_16_reg_2008 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln1169_8_fu_1206_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln1169_8_reg_2018 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln1169_9_fu_1210_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln1169_9_reg_2023 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal sext_ln174_1_fu_1220_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal sext_ln174_1_reg_2038 : STD_LOGIC_VECTOR (30 downto 0);
    signal num_V_5_fu_1244_p3 : STD_LOGIC_VECTOR (29 downto 0);
    signal num_V_5_reg_2058 : STD_LOGIC_VECTOR (29 downto 0);
    signal trunc_ln1169_11_fu_1261_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln1169_11_reg_2074 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln174_2_fu_1276_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln174_2_reg_2099 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1518_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln712_5_reg_2104 : STD_LOGIC_VECTOR (29 downto 0);
    signal trunc_ln1169_13_fu_1300_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln1169_13_reg_2124 : STD_LOGIC_VECTOR (11 downto 0);
    signal firstKernel_f_V_3_0_load_reg_2129 : STD_LOGIC_VECTOR (17 downto 0);
    signal firstKernel_f_V_3_2_load_reg_2134 : STD_LOGIC_VECTOR (18 downto 0);
    signal xor_ln185_fu_1341_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln185_reg_2139 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln185_reg_2139_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal num_V_10_fu_1351_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal num_V_10_reg_2144 : STD_LOGIC_VECTOR (31 downto 0);
    signal num_V_10_reg_2144_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1534_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal num_V_14_reg_2155 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1543_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln712_8_reg_2166 : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_fu_1549_p3 : STD_LOGIC_VECTOR (32 downto 0);
    signal num_V_11_reg_2177 : STD_LOGIC_VECTOR (32 downto 0);
    signal grp_fu_1557_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln712_10_reg_2183 : STD_LOGIC_VECTOR (29 downto 0);
    signal num_V_13_fu_1381_p3 : STD_LOGIC_VECTOR (32 downto 0);
    signal num_V_13_reg_2193 : STD_LOGIC_VECTOR (32 downto 0);
    signal num_V_18_fu_1395_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal num_V_18_reg_2204 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal zext_ln1169_11_fu_662_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1169_12_fu_673_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1169_15_fu_756_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal zext_ln1169_16_fu_766_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1169_20_fu_854_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal zext_ln1169_21_fu_864_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1169_13_fu_1130_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage4 : BOOLEAN;
    signal zext_ln1169_14_fu_1140_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1169_17_fu_1181_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage5 : BOOLEAN;
    signal zext_ln1169_18_fu_1190_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1169_22_fu_1232_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln1169_23_fu_1236_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln202_fu_1401_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_fu_110 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln185_fu_840_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal i_fu_114 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_cast5_mid2_fu_572_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal indvar_flatten_fu_118 : STD_LOGIC_VECTOR (9 downto 0);
    signal indvar_flatten_next_fu_702_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal d_fu_122 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln176_2_fu_499_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal indvar_flatten63_fu_126 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln176_1_fu_464_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal empty_fu_448_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln176_fu_479_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal empty_64_fu_452_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln178_fu_540_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_68_fu_558_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvars_iv_next25_dup_fu_552_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_21_fu_584_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln1169_5_fu_592_p1 : STD_LOGIC_VECTOR (60 downto 0);
    signal zext_ln1169_fu_580_p1 : STD_LOGIC_VECTOR (60 downto 0);
    signal sub_ln1169_fu_596_p2 : STD_LOGIC_VECTOR (60 downto 0);
    signal empty_70_fu_606_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_mid1_fu_610_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln176_3_fu_526_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_cast6_mid2_fu_616_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_shl4_cast_fu_628_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln1169_6_fu_624_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln1169_10_fu_652_p1 : STD_LOGIC_VECTOR (60 downto 0);
    signal add_ln1169_fu_656_p2 : STD_LOGIC_VECTOR (60 downto 0);
    signal add_ln1169_6_fu_667_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln202_fu_678_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_32_cast_fu_682_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln176_1_v_cast_fu_522_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal indvar_flatten_op_fu_696_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln1169_2_fu_734_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln184_fu_742_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln1169_9_fu_751_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln1169_10_fu_761_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal cmp25_fu_775_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp2_fu_780_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln176_fu_792_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp2_mid1_fu_808_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln176_2_fu_797_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln1169_5_fu_832_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln1169_13_fu_849_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln1169_14_fu_859_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sel_tmp2_mid2_fu_813_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_65_fu_886_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_fu_891_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvars_iv_next25_fu_905_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_19_fu_910_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_66_fu_924_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_20_fu_930_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal rev_fu_899_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal rev43_fu_918_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal rev46_fu_938_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_mid15_fu_982_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln176_4_fu_953_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_cast7_mid2_fu_987_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln1169_fu_998_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_shl3_cast_fu_1002_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln1169_7_fu_994_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_22_fu_1016_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal rev49_fu_1024_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln176_fu_960_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvars_iv_next25_mid1_fu_1037_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln176_5_fu_965_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal indvars_iv_next25_cast8_mid2_fu_1042_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln1169_1_fu_1053_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_shl_cast_fu_1057_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln1169_8_fu_1049_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_23_fu_1071_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal rev52_fu_1079_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln176_1_fu_972_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_mid17_fu_1098_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_24_fu_1104_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal rev55_fu_1112_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln176_3_fu_977_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln1169_7_fu_1125_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln1169_8_fu_1135_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln1169_7_fu_1152_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sel_tmp12_mid2_fu_1092_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln197_fu_1160_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp188_mid2_fu_1085_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_1483_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal add_ln1169_11_fu_1177_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln1169_12_fu_1186_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_1492_p3 : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_fu_1501_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal sext_ln712_4_fu_1223_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal num_V_4_fu_1240_p2 : STD_LOGIC_VECTOR (29 downto 0);
    attribute use_dsp48 : string;
    attribute use_dsp48 of num_V_4_fu_1240_p2 : signal is "no";
    signal trunc_ln1169_10_fu_1253_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_1509_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal num_V_3_fu_1271_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal sext_ln712_8_fu_1280_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln1169_12_fu_1292_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln712_7_fu_1310_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal sext_ln174_4_fu_1307_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal num_V_7_fu_1313_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal and_ln185_fu_1323_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_1525_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln174_3_fu_1304_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln174_5_fu_1319_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal num_V_8_fu_1327_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln185_1_fu_1346_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal num_V_9_fu_1334_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1563_p3 : STD_LOGIC_VECTOR (32 downto 0);
    signal sext_ln1169_2_fu_1373_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal num_V_12_fu_1376_p2 : STD_LOGIC_VECTOR (32 downto 0);
    attribute use_dsp48 of num_V_12_fu_1376_p2 : signal is "no";
    signal sext_ln1169_1_fu_1370_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal num_V_16_fu_1390_p2 : STD_LOGIC_VECTOR (31 downto 0);
    attribute use_dsp48 of num_V_16_fu_1390_p2 : signal is "no";
    signal grp_fu_1571_p3 : STD_LOGIC_VECTOR (32 downto 0);
    signal sext_ln1169_3_fu_1408_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal sext_ln174_7_fu_1416_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal and_ln193_fu_1425_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal num_V_15_fu_1411_p2 : STD_LOGIC_VECTOR (32 downto 0);
    attribute use_dsp48 of num_V_15_fu_1411_p2 : signal is "no";
    signal num_V_19_fu_1419_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal num_V_20_fu_1429_p3 : STD_LOGIC_VECTOR (32 downto 0);
    signal and_ln193_1_fu_1444_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal num_V_21_fu_1437_p3 : STD_LOGIC_VECTOR (32 downto 0);
    signal num_V_22_fu_1448_p3 : STD_LOGIC_VECTOR (32 downto 0);
    signal sext_ln174_6_fu_1405_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal num_V_17_fu_1455_p3 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_25_fu_1466_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln174_fu_1462_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1509_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal grp_fu_1525_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1534_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_condition_exit_pp0_iter1_stage3 : STD_LOGIC;
    signal ap_idle_pp0_0to0 : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_idle_pp0_1to2 : STD_LOGIC;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_block_pp0_stage4_subdone : BOOLEAN;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component master_fix_mac_muladd_18s_12s_22s_29_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (17 downto 0);
        din1 : IN STD_LOGIC_VECTOR (11 downto 0);
        din2 : IN STD_LOGIC_VECTOR (21 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (28 downto 0) );
    end component;


    component master_fix_mac_muladd_19s_12s_29s_30_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (18 downto 0);
        din1 : IN STD_LOGIC_VECTOR (11 downto 0);
        din2 : IN STD_LOGIC_VECTOR (28 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (29 downto 0) );
    end component;


    component master_fix_mul_mul_18s_12s_30_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (17 downto 0);
        din1 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (29 downto 0) );
    end component;


    component master_fix_mac_muladd_19s_12s_31s_31_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (18 downto 0);
        din1 : IN STD_LOGIC_VECTOR (11 downto 0);
        din2 : IN STD_LOGIC_VECTOR (30 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (30 downto 0) );
    end component;


    component master_fix_mac_muladd_20s_12s_32s_32_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (19 downto 0);
        din1 : IN STD_LOGIC_VECTOR (11 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component master_fix_mac_muladd_18s_12s_32s_32_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (17 downto 0);
        din1 : IN STD_LOGIC_VECTOR (11 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component master_fix_mac_muladd_19s_12s_32s_33_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (18 downto 0);
        din1 : IN STD_LOGIC_VECTOR (11 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (32 downto 0) );
    end component;


    component master_fix_mac_muladd_18s_12s_33s_33_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (17 downto 0);
        din1 : IN STD_LOGIC_VECTOR (11 downto 0);
        din2 : IN STD_LOGIC_VECTOR (32 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (32 downto 0) );
    end component;


    component master_fix_mac_muladd_19s_12s_33s_33_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (18 downto 0);
        din1 : IN STD_LOGIC_VECTOR (11 downto 0);
        din2 : IN STD_LOGIC_VECTOR (32 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (32 downto 0) );
    end component;


    component master_fix_convolution1_fix_Pipeline_VITIS_LOOP_176_1_VITIS_LOOP_177_2_VITIS_LOOP_178_3_bkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (17 downto 0) );
    end component;


    component master_fix_convolution1_fix_Pipeline_VITIS_LOOP_176_1_VITIS_LOOP_177_2_VITIS_LOOP_178_3_cud IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (21 downto 0) );
    end component;


    component master_fix_convolution1_fix_Pipeline_VITIS_LOOP_176_1_VITIS_LOOP_177_2_VITIS_LOOP_178_3_dEe IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (18 downto 0) );
    end component;


    component master_fix_convolution1_fix_Pipeline_VITIS_LOOP_176_1_VITIS_LOOP_177_2_VITIS_LOOP_178_3_eOg IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (18 downto 0) );
    end component;


    component master_fix_convolution1_fix_Pipeline_VITIS_LOOP_176_1_VITIS_LOOP_177_2_VITIS_LOOP_178_3_fYi IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (17 downto 0) );
    end component;


    component master_fix_convolution1_fix_Pipeline_VITIS_LOOP_176_1_VITIS_LOOP_177_2_VITIS_LOOP_178_3_g8j IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (19 downto 0) );
    end component;


    component master_fix_convolution1_fix_Pipeline_VITIS_LOOP_176_1_VITIS_LOOP_177_2_VITIS_LOOP_178_3_hbi IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (17 downto 0) );
    end component;


    component master_fix_convolution1_fix_Pipeline_VITIS_LOOP_176_1_VITIS_LOOP_177_2_VITIS_LOOP_178_3_ibs IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (17 downto 0) );
    end component;


    component master_fix_convolution1_fix_Pipeline_VITIS_LOOP_176_1_VITIS_LOOP_177_2_VITIS_LOOP_178_3_jbC IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (18 downto 0) );
    end component;


    component master_fix_convolution1_fix_Pipeline_VITIS_LOOP_176_1_VITIS_LOOP_177_2_VITIS_LOOP_178_3_kbM IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (17 downto 0) );
    end component;


    component master_fix_convolution1_fix_Pipeline_VITIS_LOOP_176_1_VITIS_LOOP_177_2_VITIS_LOOP_178_3_lbW IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (17 downto 0) );
    end component;


    component master_fix_convolution1_fix_Pipeline_VITIS_LOOP_176_1_VITIS_LOOP_177_2_VITIS_LOOP_178_3_mb6 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (17 downto 0) );
    end component;


    component master_fix_convolution1_fix_Pipeline_VITIS_LOOP_176_1_VITIS_LOOP_177_2_VITIS_LOOP_178_3_ncg IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (18 downto 0) );
    end component;


    component master_fix_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    firstKernel_f_V_1_1_U : component master_fix_convolution1_fix_Pipeline_VITIS_LOOP_176_1_VITIS_LOOP_177_2_VITIS_LOOP_178_3_bkb
    generic map (
        DataWidth => 18,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => firstKernel_f_V_1_1_address0,
        ce0 => firstKernel_f_V_1_1_ce0,
        q0 => firstKernel_f_V_1_1_q0);

    firstBias_f_V_U : component master_fix_convolution1_fix_Pipeline_VITIS_LOOP_176_1_VITIS_LOOP_177_2_VITIS_LOOP_178_3_cud
    generic map (
        DataWidth => 22,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => firstBias_f_V_address0,
        ce0 => firstBias_f_V_ce0,
        q0 => firstBias_f_V_q0);

    firstKernel_f_V_0_1_U : component master_fix_convolution1_fix_Pipeline_VITIS_LOOP_176_1_VITIS_LOOP_177_2_VITIS_LOOP_178_3_dEe
    generic map (
        DataWidth => 19,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => firstKernel_f_V_0_1_address0,
        ce0 => firstKernel_f_V_0_1_ce0,
        q0 => firstKernel_f_V_0_1_q0);

    firstKernel_f_V_0_0_U : component master_fix_convolution1_fix_Pipeline_VITIS_LOOP_176_1_VITIS_LOOP_177_2_VITIS_LOOP_178_3_eOg
    generic map (
        DataWidth => 19,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => firstKernel_f_V_0_0_address0,
        ce0 => firstKernel_f_V_0_0_ce0,
        q0 => firstKernel_f_V_0_0_q0);

    firstKernel_f_V_1_0_U : component master_fix_convolution1_fix_Pipeline_VITIS_LOOP_176_1_VITIS_LOOP_177_2_VITIS_LOOP_178_3_fYi
    generic map (
        DataWidth => 18,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => firstKernel_f_V_1_0_address0,
        ce0 => firstKernel_f_V_1_0_ce0,
        q0 => firstKernel_f_V_1_0_q0);

    firstKernel_f_V_0_2_U : component master_fix_convolution1_fix_Pipeline_VITIS_LOOP_176_1_VITIS_LOOP_177_2_VITIS_LOOP_178_3_g8j
    generic map (
        DataWidth => 20,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => firstKernel_f_V_0_2_address0,
        ce0 => firstKernel_f_V_0_2_ce0,
        q0 => firstKernel_f_V_0_2_q0);

    firstKernel_f_V_1_2_U : component master_fix_convolution1_fix_Pipeline_VITIS_LOOP_176_1_VITIS_LOOP_177_2_VITIS_LOOP_178_3_hbi
    generic map (
        DataWidth => 18,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => firstKernel_f_V_1_2_address0,
        ce0 => firstKernel_f_V_1_2_ce0,
        q0 => firstKernel_f_V_1_2_q0);

    firstKernel_f_V_2_1_U : component master_fix_convolution1_fix_Pipeline_VITIS_LOOP_176_1_VITIS_LOOP_177_2_VITIS_LOOP_178_3_ibs
    generic map (
        DataWidth => 18,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => firstKernel_f_V_2_1_address0,
        ce0 => firstKernel_f_V_2_1_ce0,
        q0 => firstKernel_f_V_2_1_q0);

    firstKernel_f_V_3_1_U : component master_fix_convolution1_fix_Pipeline_VITIS_LOOP_176_1_VITIS_LOOP_177_2_VITIS_LOOP_178_3_jbC
    generic map (
        DataWidth => 19,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => firstKernel_f_V_3_1_address0,
        ce0 => firstKernel_f_V_3_1_ce0,
        q0 => firstKernel_f_V_3_1_q0);

    firstKernel_f_V_2_0_U : component master_fix_convolution1_fix_Pipeline_VITIS_LOOP_176_1_VITIS_LOOP_177_2_VITIS_LOOP_178_3_kbM
    generic map (
        DataWidth => 18,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => firstKernel_f_V_2_0_address0,
        ce0 => firstKernel_f_V_2_0_ce0,
        q0 => firstKernel_f_V_2_0_q0);

    firstKernel_f_V_3_0_U : component master_fix_convolution1_fix_Pipeline_VITIS_LOOP_176_1_VITIS_LOOP_177_2_VITIS_LOOP_178_3_lbW
    generic map (
        DataWidth => 18,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => firstKernel_f_V_3_0_address0,
        ce0 => firstKernel_f_V_3_0_ce0,
        q0 => firstKernel_f_V_3_0_q0);

    firstKernel_f_V_2_2_U : component master_fix_convolution1_fix_Pipeline_VITIS_LOOP_176_1_VITIS_LOOP_177_2_VITIS_LOOP_178_3_mb6
    generic map (
        DataWidth => 18,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => firstKernel_f_V_2_2_address0,
        ce0 => firstKernel_f_V_2_2_ce0,
        q0 => firstKernel_f_V_2_2_q0);

    firstKernel_f_V_3_2_U : component master_fix_convolution1_fix_Pipeline_VITIS_LOOP_176_1_VITIS_LOOP_177_2_VITIS_LOOP_178_3_ncg
    generic map (
        DataWidth => 19,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => firstKernel_f_V_3_2_address0,
        ce0 => firstKernel_f_V_3_2_ce0,
        q0 => firstKernel_f_V_3_2_q0);

    mac_muladd_18s_12s_22s_29_4_1_U1 : component master_fix_mac_muladd_18s_12s_22s_29_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 18,
        din1_WIDTH => 12,
        din2_WIDTH => 22,
        dout_WIDTH => 29)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => firstKernel_f_V_1_1_q0,
        din1 => trunc_ln1169_2_fu_734_p1,
        din2 => firstBias_f_V_load_reg_1769,
        ce => ap_const_logic_1,
        dout => grp_fu_1483_p3);

    mac_muladd_19s_12s_29s_30_4_1_U2 : component master_fix_mac_muladd_19s_12s_29s_30_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 19,
        din1_WIDTH => 12,
        din2_WIDTH => 29,
        dout_WIDTH => 30)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => firstKernel_f_V_0_1_load_reg_1774,
        din1 => trunc_ln1169_3_reg_1840,
        din2 => grp_fu_1483_p3,
        ce => ap_const_logic_1,
        dout => grp_fu_1492_p3);

    mul_mul_18s_12s_30_4_1_U3 : component master_fix_mul_mul_18s_12s_30_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 18,
        din1_WIDTH => 12,
        dout_WIDTH => 30)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => firstKernel_f_V_1_0_load_reg_1784,
        din1 => trunc_ln1169_5_fu_832_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_1501_p2);

    mac_muladd_19s_12s_31s_31_4_1_U4 : component master_fix_mac_muladd_19s_12s_31s_31_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 19,
        din1_WIDTH => 12,
        din2_WIDTH => 31,
        dout_WIDTH => 31)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => firstKernel_f_V_0_0_load_reg_1779,
        din1 => trunc_ln1169_4_reg_1874,
        din2 => grp_fu_1509_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1509_p3);

    mul_mul_18s_12s_30_4_1_U5 : component master_fix_mul_mul_18s_12s_30_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 18,
        din1_WIDTH => 12,
        dout_WIDTH => 30)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => firstKernel_f_V_1_2_load_reg_1794,
        din1 => trunc_ln1169_7_fu_1152_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_1518_p2);

    mac_muladd_20s_12s_32s_32_4_1_U6 : component master_fix_mac_muladd_20s_12s_32s_32_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 20,
        din1_WIDTH => 12,
        din2_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => firstKernel_f_V_0_2_load_reg_1789,
        din1 => trunc_ln1169_6_reg_1966,
        din2 => grp_fu_1525_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1525_p3);

    mac_muladd_18s_12s_32s_32_4_1_U7 : component master_fix_mac_muladd_18s_12s_32s_32_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 18,
        din1_WIDTH => 12,
        din2_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => firstKernel_f_V_2_1_load_reg_1799,
        din1 => trunc_ln1169_8_reg_2018,
        din2 => grp_fu_1534_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1534_p3);

    mul_mul_18s_12s_30_4_1_U8 : component master_fix_mul_mul_18s_12s_30_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 18,
        din1_WIDTH => 12,
        dout_WIDTH => 30)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => firstKernel_f_V_2_0_load_reg_1809,
        din1 => trunc_ln1169_10_fu_1253_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_1543_p2);

    mac_muladd_19s_12s_32s_33_4_1_U9 : component master_fix_mac_muladd_19s_12s_32s_33_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 19,
        din1_WIDTH => 12,
        din2_WIDTH => 32,
        dout_WIDTH => 33)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => firstKernel_f_V_3_1_load_reg_1804,
        din1 => trunc_ln1169_9_reg_2023,
        din2 => grp_fu_1534_p3,
        ce => ap_const_logic_1,
        dout => grp_fu_1549_p3);

    mul_mul_18s_12s_30_4_1_U10 : component master_fix_mul_mul_18s_12s_30_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 18,
        din1_WIDTH => 12,
        dout_WIDTH => 30)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => firstKernel_f_V_2_2_load_reg_1814,
        din1 => trunc_ln1169_12_fu_1292_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_1557_p2);

    mac_muladd_18s_12s_33s_33_4_1_U11 : component master_fix_mac_muladd_18s_12s_33s_33_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 18,
        din1_WIDTH => 12,
        din2_WIDTH => 33,
        dout_WIDTH => 33)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => firstKernel_f_V_3_0_load_reg_2129,
        din1 => trunc_ln1169_11_reg_2074,
        din2 => num_V_11_reg_2177,
        ce => ap_const_logic_1,
        dout => grp_fu_1563_p3);

    mac_muladd_19s_12s_33s_33_4_1_U12 : component master_fix_mac_muladd_19s_12s_33s_33_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 19,
        din1_WIDTH => 12,
        din2_WIDTH => 33,
        dout_WIDTH => 33)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => firstKernel_f_V_3_2_load_reg_2134,
        din1 => trunc_ln1169_13_reg_2124,
        din2 => num_V_13_reg_2193,
        ce => ap_const_logic_1,
        dout => grp_fu_1571_p3);

    flow_control_loop_pipe_sequential_init_U : component master_fix_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage5,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage5)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage5_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage5_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_loop_exit_ready_pp0_iter1_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage3) and (ap_idle_pp0_0to0 = ap_const_logic_1))) then 
                ap_loop_exit_ready_pp0_iter1_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
            end if; 
        end if;
    end process;

    d_fu_122_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_loop_init = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                d_fu_122 <= ap_const_lv4_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln176_fu_458_p2 = ap_const_lv1_0))) then 
                d_fu_122 <= select_ln176_2_fu_499_p3;
            end if; 
        end if;
    end process;

    i_fu_114_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_loop_init = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                i_fu_114 <= ap_const_lv8_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln176_fu_458_p2 = ap_const_lv1_0))) then 
                i_fu_114 <= i_cast5_mid2_fu_572_p3;
            end if; 
        end if;
    end process;

    indvar_flatten63_fu_126_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_loop_init = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                indvar_flatten63_fu_126 <= ap_const_lv12_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln176_fu_458_p2 = ap_const_lv1_0))) then 
                indvar_flatten63_fu_126 <= add_ln176_1_fu_464_p2;
            end if; 
        end if;
    end process;

    indvar_flatten_fu_118_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_loop_init = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                indvar_flatten_fu_118 <= ap_const_lv10_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln176_fu_458_p2 = ap_const_lv1_0))) then 
                indvar_flatten_fu_118 <= indvar_flatten_next_fu_702_p3;
            end if; 
        end if;
    end process;

    j_fu_110_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_loop_init = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                j_fu_110 <= ap_const_lv2_0;
            elsif (((icmp_ln176_reg_1621 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                j_fu_110 <= add_ln185_fu_840_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln176_reg_1621 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (p_mid210_reg_1946 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then
                add_ln1169_15_reg_2003 <= add_ln1169_15_fu_1195_p2;
                trunc_ln1169_8_reg_2018 <= trunc_ln1169_8_fu_1206_p1;
                trunc_ln1169_9_reg_2023 <= trunc_ln1169_9_fu_1210_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln176_reg_1621 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (p_mid210_reg_1946 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_const_lv1_0 = and_ln197_1_reg_1976))) then
                add_ln1169_16_reg_2008 <= add_ln1169_16_fu_1199_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln176_fu_458_p2 = ap_const_lv1_0))) then
                add_ln202_reg_1759 <= add_ln202_fu_690_p2;
                and_ln176_1_reg_1707 <= and_ln176_1_fu_546_p2;
                cmp25_mid1_reg_1737 <= cmp25_mid1_fu_642_p2;
                empty_69_reg_1725 <= empty_69_fu_602_p1;
                exitcond_flatten59_reg_1625 <= exitcond_flatten59_fu_485_p2;
                j_mid2_reg_1718 <= j_mid2_fu_564_p3;
                select_ln176_reg_1635 <= select_ln176_fu_491_p3;
                sub_ln1169_1_reg_1731 <= sub_ln1169_1_fu_636_p2;
                xor_ln176_reg_1702 <= xor_ln176_fu_534_p2;
                    zext_ln1169_9_reg_1743(1 downto 0) <= zext_ln1169_9_fu_648_p1(1 downto 0);
                    zext_ln176_reg_1641(3 downto 0) <= zext_ln176_fu_507_p1(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                add_ln202_reg_1759_pp0_iter1_reg <= add_ln202_reg_1759;
                add_ln202_reg_1759_pp0_iter2_reg <= add_ln202_reg_1759_pp0_iter1_reg;
                i_6_reg_1614 <= i_fu_114;
                icmp_ln176_reg_1621 <= icmp_ln176_fu_458_p2;
                icmp_ln176_reg_1621_pp0_iter1_reg <= icmp_ln176_reg_1621;
                mul_ln712_5_reg_2104 <= grp_fu_1518_p2;
                sext_ln174_2_reg_2099 <= sext_ln174_2_fu_1276_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln176_reg_1621 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then
                and_ln188_reg_1908 <= and_ln188_fu_875_p2;
                cmp25_mid2_reg_1855 <= cmp25_mid2_fu_802_p3;
                icmp_ln184_reg_1861 <= icmp_ln184_fu_820_p2;
                icmp_ln185_reg_1900 <= icmp_ln185_fu_869_p2;
                trunc_ln1169_4_reg_1874 <= trunc_ln1169_4_fu_828_p1;
                    zext_ln1169_19_reg_1884(1 downto 0) <= zext_ln1169_19_fu_845_p1(1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln176_reg_1621 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then
                and_ln197_1_reg_1976 <= and_ln197_1_fu_1165_p2;
                cmp112_mid2_reg_1934 <= cmp112_mid2_fu_1030_p3;
                p_mid210_reg_1946 <= p_mid210_fu_1118_p3;
                sub_ln1169_2_reg_1928 <= sub_ln1169_2_fu_1010_p2;
                sub_ln1169_3_reg_1940 <= sub_ln1169_3_fu_1065_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then
                and_ln197_1_reg_1976_pp0_iter1_reg <= and_ln197_1_reg_1976;
                cmp112_mid2_reg_1934_pp0_iter1_reg <= cmp112_mid2_reg_1934;
                p_mid210_reg_1946_pp0_iter1_reg <= p_mid210_reg_1946;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln176_reg_1621 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                firstBias_f_V_load_reg_1769 <= firstBias_f_V_q0;
                firstKernel_f_V_0_0_load_reg_1779 <= firstKernel_f_V_0_0_q0;
                firstKernel_f_V_0_1_load_reg_1774 <= firstKernel_f_V_0_1_q0;
                firstKernel_f_V_0_2_load_reg_1789 <= firstKernel_f_V_0_2_q0;
                firstKernel_f_V_1_0_load_reg_1784 <= firstKernel_f_V_1_0_q0;
                firstKernel_f_V_1_2_load_reg_1794 <= firstKernel_f_V_1_2_q0;
                firstKernel_f_V_2_0_load_reg_1809 <= firstKernel_f_V_2_0_q0;
                firstKernel_f_V_2_1_load_reg_1799 <= firstKernel_f_V_2_1_q0;
                firstKernel_f_V_2_2_load_reg_1814 <= firstKernel_f_V_2_2_q0;
                firstKernel_f_V_3_1_load_reg_1804 <= firstKernel_f_V_3_1_q0;
                sext_ln1169_4_reg_1824 <= sext_ln1169_4_fu_747_p1;
                trunc_ln1169_3_reg_1840 <= trunc_ln1169_3_fu_771_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (p_mid210_reg_1946 = ap_const_lv1_1) and (icmp_ln184_reg_1861 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                firstKernel_f_V_3_0_load_reg_2129 <= firstKernel_f_V_3_0_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (p_mid210_reg_1946 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_lv1_0 = and_ln197_1_reg_1976))) then
                firstKernel_f_V_3_2_load_reg_2134 <= firstKernel_f_V_3_2_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then
                icmp_ln184_reg_1861_pp0_iter1_reg <= icmp_ln184_reg_1861;
                icmp_ln185_reg_1900_pp0_iter1_reg <= icmp_ln185_reg_1900;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (p_mid210_reg_1946 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then
                mul_ln712_10_reg_2183 <= grp_fu_1557_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (p_mid210_reg_1946 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then
                mul_ln712_8_reg_2166 <= grp_fu_1543_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                num_V_10_reg_2144 <= num_V_10_fu_1351_p3;
                num_V_10_reg_2144_pp0_iter2_reg <= num_V_10_reg_2144;
                xor_ln185_reg_2139 <= xor_ln185_fu_1341_p2;
                xor_ln185_reg_2139_pp0_iter2_reg <= xor_ln185_reg_2139;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (p_mid210_reg_1946 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then
                num_V_11_reg_2177 <= grp_fu_1549_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (p_mid210_reg_1946_pp0_iter1_reg = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                num_V_13_reg_2193 <= num_V_13_fu_1381_p3;
                num_V_18_reg_2204 <= num_V_18_fu_1395_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (p_mid210_reg_1946 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then
                num_V_14_reg_2155 <= grp_fu_1534_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln176_reg_1621 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                num_V_5_reg_2058 <= num_V_5_fu_1244_p3;
                sext_ln174_1_reg_2038 <= sext_ln174_1_fu_1220_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln176_reg_1621 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then
                sext_ln174_reg_1986 <= sext_ln174_fu_1174_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln176_reg_1621 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (p_mid210_reg_1946 = ap_const_lv1_1) and (icmp_ln184_reg_1861 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                trunc_ln1169_11_reg_2074 <= trunc_ln1169_11_fu_1261_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (p_mid210_reg_1946 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_lv1_0 = and_ln197_1_reg_1976))) then
                trunc_ln1169_13_reg_2124 <= trunc_ln1169_13_fu_1300_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln176_reg_1621 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_lv1_0 = and_ln188_reg_1908))) then
                trunc_ln1169_6_reg_1966 <= trunc_ln1169_6_fu_1148_p1;
            end if;
        end if;
    end process;
    zext_ln176_reg_1641(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    zext_ln1169_9_reg_1743(8 downto 2) <= "0000000";
    zext_ln1169_19_reg_1884(8 downto 2) <= "0000000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage5_subdone, ap_block_pp0_stage3_subdone, ap_condition_exit_pp0_iter1_stage3, ap_idle_pp0_0to0, ap_block_pp0_stage0_subdone, ap_idle_pp0_1to2, ap_block_pp0_stage1_subdone, ap_block_pp0_stage2_subdone, ap_block_pp0_stage4_subdone, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_start_int = ap_const_logic_0) and (ap_idle_pp0_1to2 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if (((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage3) and (ap_idle_pp0_0to0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when ap_ST_fsm_pp0_stage4 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage4_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                end if;
            when ap_ST_fsm_pp0_stage5 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage5_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;
    add_ln1169_10_fu_761_p2 <= std_logic_vector(unsigned(empty_69_reg_1725) + unsigned(sext_ln1169_4_fu_747_p1));
    add_ln1169_11_fu_1177_p2 <= std_logic_vector(unsigned(sub_ln1169_3_reg_1940) + unsigned(sext_ln1169_4_reg_1824));
    add_ln1169_12_fu_1186_p2 <= std_logic_vector(unsigned(sub_ln1169_2_reg_1928) + unsigned(sext_ln1169_4_reg_1824));
    add_ln1169_13_fu_849_p2 <= std_logic_vector(unsigned(sub_ln1169_1_reg_1731) + unsigned(zext_ln1169_19_fu_845_p1));
    add_ln1169_14_fu_859_p2 <= std_logic_vector(unsigned(empty_69_reg_1725) + unsigned(zext_ln1169_19_fu_845_p1));
    add_ln1169_15_fu_1195_p2 <= std_logic_vector(unsigned(sub_ln1169_3_reg_1940) + unsigned(zext_ln1169_19_reg_1884));
    add_ln1169_16_fu_1199_p2 <= std_logic_vector(unsigned(sub_ln1169_2_reg_1928) + unsigned(zext_ln1169_19_reg_1884));
    add_ln1169_6_fu_667_p2 <= std_logic_vector(unsigned(sub_ln1169_1_fu_636_p2) + unsigned(zext_ln1169_9_fu_648_p1));
    add_ln1169_7_fu_1125_p2 <= std_logic_vector(unsigned(sub_ln1169_3_fu_1065_p2) + unsigned(zext_ln1169_9_reg_1743));
    add_ln1169_8_fu_1135_p2 <= std_logic_vector(unsigned(sub_ln1169_2_fu_1010_p2) + unsigned(zext_ln1169_9_reg_1743));
    add_ln1169_9_fu_751_p2 <= std_logic_vector(unsigned(sub_ln1169_1_reg_1731) + unsigned(sext_ln1169_4_fu_747_p1));
    add_ln1169_fu_656_p2 <= std_logic_vector(unsigned(sub_ln1169_fu_596_p2) + unsigned(zext_ln1169_10_fu_652_p1));
    add_ln176_1_fu_464_p2 <= std_logic_vector(unsigned(indvar_flatten63_fu_126) + unsigned(ap_const_lv12_1));
    add_ln176_fu_479_p2 <= std_logic_vector(unsigned(d_fu_122) + unsigned(ap_const_lv4_1));
    add_ln184_fu_742_p2 <= std_logic_vector(unsigned(j_mid2_reg_1718) + unsigned(ap_const_lv2_3));
    add_ln185_fu_840_p2 <= std_logic_vector(unsigned(j_mid2_reg_1718) + unsigned(ap_const_lv2_1));
    add_ln202_fu_690_p2 <= std_logic_vector(unsigned(tmp_32_cast_fu_682_p3) + unsigned(select_ln176_1_v_cast_fu_522_p1));
    and_ln176_1_fu_546_p2 <= (xor_ln176_fu_534_p2 and icmp_ln178_fu_540_p2);
    and_ln176_fu_792_p2 <= (xor_ln176_reg_1702 and cmp25_fu_775_p2);
    and_ln185_1_fu_1346_p2 <= (xor_ln185_fu_1341_p2 and cmp25_mid2_reg_1855);
    and_ln185_fu_1323_p2 <= (icmp_ln185_reg_1900 and cmp25_mid2_reg_1855);
    and_ln188_fu_875_p2 <= (sel_tmp2_mid2_fu_813_p3 and icmp_ln185_fu_869_p2);
    and_ln193_1_fu_1444_p2 <= (xor_ln185_reg_2139_pp0_iter2_reg and cmp112_mid2_reg_1934_pp0_iter1_reg);
    and_ln193_fu_1425_p2 <= (icmp_ln185_reg_1900_pp0_iter1_reg and cmp112_mid2_reg_1934_pp0_iter1_reg);
    and_ln197_1_fu_1165_p2 <= (cmp188_mid2_fu_1085_p3 and and_ln197_fu_1160_p2);
    and_ln197_fu_1160_p2 <= (sel_tmp12_mid2_fu_1092_p2 and icmp_ln185_reg_1900);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(3);
    ap_CS_fsm_pp0_stage4 <= ap_CS_fsm(4);
    ap_CS_fsm_pp0_stage5 <= ap_CS_fsm(5);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage3_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage4_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage5_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage1_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage2_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage3_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage4_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage5_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage2_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage5_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5_subdone, icmp_ln176_reg_1621)
    begin
        if (((icmp_ln176_reg_1621 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage5_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
            ap_condition_exit_pp0_iter0_stage5 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage5 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_exit_pp0_iter1_stage3_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln176_reg_1621_pp0_iter1_reg, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (icmp_ln176_reg_1621_pp0_iter1_reg = ap_const_lv1_1))) then 
            ap_condition_exit_pp0_iter1_stage3 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter1_stage3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg, ap_start_int)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start_int;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_start_int = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to0_assign_proc : process(ap_enable_reg_pp0_iter0)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_0)) then 
            ap_idle_pp0_0to0 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to2_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0_1to2 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to2 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage5;

    ap_ready_int_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage5_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;

    cmp112_mid2_fu_1030_p3 <= 
        rev49_fu_1024_p2 when (and_ln176_1_reg_1707(0) = '1') else 
        or_ln176_fu_960_p2;
    cmp188_mid2_fu_1085_p3 <= 
        rev52_fu_1079_p2 when (and_ln176_1_reg_1707(0) = '1') else 
        or_ln176_1_fu_972_p2;
    cmp25_fu_775_p2 <= "0" when (i_6_reg_1614 = ap_const_lv8_0) else "1";
    cmp25_mid1_fu_642_p2 <= "0" when (indvars_iv_next25_dup_fu_552_p2 = ap_const_lv8_0) else "1";
    cmp25_mid2_fu_802_p3 <= 
        cmp25_mid1_reg_1737 when (and_ln176_1_reg_1707(0) = '1') else 
        and_ln176_fu_792_p2;
    empty_64_fu_452_p2 <= std_logic_vector(unsigned(empty_fu_448_p1) + unsigned(ap_const_lv7_7F));
    empty_65_fu_886_p2 <= std_logic_vector(unsigned(i_6_reg_1614) + unsigned(ap_const_lv8_2));
    empty_66_fu_924_p2 <= (indvars_iv_next25_fu_905_p2 and empty_65_fu_886_p2);
    empty_68_fu_558_p2 <= (exitcond_flatten59_fu_485_p2 or and_ln176_1_fu_546_p2);
    empty_69_fu_602_p1 <= sub_ln1169_fu_596_p2(9 - 1 downto 0);
    empty_70_fu_606_p1 <= indvars_iv_next25_dup_fu_552_p2(7 - 1 downto 0);
    empty_fu_448_p1 <= i_fu_114(7 - 1 downto 0);
    exitcond_flatten59_fu_485_p2 <= "1" when (indvar_flatten_fu_118 = ap_const_lv10_180) else "0";
    firstBias_f_V_address0 <= zext_ln176_fu_507_p1(3 - 1 downto 0);

    firstBias_f_V_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            firstBias_f_V_ce0 <= ap_const_logic_1;
        else 
            firstBias_f_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    firstKernel_f_V_0_0_address0 <= zext_ln176_fu_507_p1(3 - 1 downto 0);

    firstKernel_f_V_0_0_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            firstKernel_f_V_0_0_ce0 <= ap_const_logic_1;
        else 
            firstKernel_f_V_0_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    firstKernel_f_V_0_1_address0 <= zext_ln176_fu_507_p1(3 - 1 downto 0);

    firstKernel_f_V_0_1_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            firstKernel_f_V_0_1_ce0 <= ap_const_logic_1;
        else 
            firstKernel_f_V_0_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    firstKernel_f_V_0_2_address0 <= zext_ln176_fu_507_p1(3 - 1 downto 0);

    firstKernel_f_V_0_2_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            firstKernel_f_V_0_2_ce0 <= ap_const_logic_1;
        else 
            firstKernel_f_V_0_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    firstKernel_f_V_1_0_address0 <= zext_ln176_fu_507_p1(3 - 1 downto 0);

    firstKernel_f_V_1_0_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            firstKernel_f_V_1_0_ce0 <= ap_const_logic_1;
        else 
            firstKernel_f_V_1_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    firstKernel_f_V_1_1_address0 <= zext_ln176_fu_507_p1(3 - 1 downto 0);

    firstKernel_f_V_1_1_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            firstKernel_f_V_1_1_ce0 <= ap_const_logic_1;
        else 
            firstKernel_f_V_1_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    firstKernel_f_V_1_2_address0 <= zext_ln176_fu_507_p1(3 - 1 downto 0);

    firstKernel_f_V_1_2_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            firstKernel_f_V_1_2_ce0 <= ap_const_logic_1;
        else 
            firstKernel_f_V_1_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    firstKernel_f_V_2_0_address0 <= zext_ln176_fu_507_p1(3 - 1 downto 0);

    firstKernel_f_V_2_0_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            firstKernel_f_V_2_0_ce0 <= ap_const_logic_1;
        else 
            firstKernel_f_V_2_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    firstKernel_f_V_2_1_address0 <= zext_ln176_fu_507_p1(3 - 1 downto 0);

    firstKernel_f_V_2_1_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            firstKernel_f_V_2_1_ce0 <= ap_const_logic_1;
        else 
            firstKernel_f_V_2_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    firstKernel_f_V_2_2_address0 <= zext_ln176_fu_507_p1(3 - 1 downto 0);

    firstKernel_f_V_2_2_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            firstKernel_f_V_2_2_ce0 <= ap_const_logic_1;
        else 
            firstKernel_f_V_2_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    firstKernel_f_V_3_0_address0 <= zext_ln176_reg_1641(3 - 1 downto 0);

    firstKernel_f_V_3_0_ce0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            firstKernel_f_V_3_0_ce0 <= ap_const_logic_1;
        else 
            firstKernel_f_V_3_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    firstKernel_f_V_3_1_address0 <= zext_ln176_fu_507_p1(3 - 1 downto 0);

    firstKernel_f_V_3_1_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            firstKernel_f_V_3_1_ce0 <= ap_const_logic_1;
        else 
            firstKernel_f_V_3_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    firstKernel_f_V_3_2_address0 <= zext_ln176_reg_1641(3 - 1 downto 0);

    firstKernel_f_V_3_2_ce0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            firstKernel_f_V_3_2_ce0 <= ap_const_logic_1;
        else 
            firstKernel_f_V_3_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1509_p2 <= std_logic_vector(signed(sext_ln174_1_fu_1220_p1) + signed(sext_ln712_4_fu_1223_p1));
    grp_fu_1525_p2 <= std_logic_vector(signed(sext_ln174_2_fu_1276_p1) + signed(sext_ln712_8_fu_1280_p1));
    grp_fu_1534_p2 <= 
        sext_ln174_2_reg_2099 when (and_ln185_1_fu_1346_p2(0) = '1') else 
        num_V_9_fu_1334_p3;
    i_cast5_mid2_fu_572_p3 <= 
        indvars_iv_next25_dup_fu_552_p2 when (and_ln176_1_fu_546_p2(0) = '1') else 
        select_ln176_fu_491_p3;
    icmp_ln176_fu_458_p2 <= "1" when (indvar_flatten63_fu_126 = ap_const_lv12_C00) else "0";
    icmp_ln178_fu_540_p2 <= "1" when (j_fu_110 = ap_const_lv2_3) else "0";
    icmp_ln184_fu_820_p2 <= "0" when (j_mid2_reg_1718 = ap_const_lv2_0) else "1";
    icmp_ln185_fu_869_p2 <= "0" when (add_ln185_fu_840_p2 = ap_const_lv2_3) else "1";
    indvar_flatten_next_fu_702_p3 <= 
        ap_const_lv10_1 when (exitcond_flatten59_fu_485_p2(0) = '1') else 
        indvar_flatten_op_fu_696_p2;
    indvar_flatten_op_fu_696_p2 <= std_logic_vector(unsigned(indvar_flatten_fu_118) + unsigned(ap_const_lv10_1));
    indvars_iv_next25_cast8_mid2_fu_1042_p3 <= 
        indvars_iv_next25_mid1_fu_1037_p2 when (and_ln176_1_reg_1707(0) = '1') else 
        select_ln176_5_fu_965_p3;
    indvars_iv_next25_dup_fu_552_p2 <= std_logic_vector(unsigned(select_ln176_fu_491_p3) + unsigned(ap_const_lv8_1));
    indvars_iv_next25_fu_905_p2 <= std_logic_vector(unsigned(i_6_reg_1614) + unsigned(ap_const_lv8_1));
    indvars_iv_next25_mid1_fu_1037_p2 <= std_logic_vector(unsigned(select_ln176_reg_1635) + unsigned(ap_const_lv8_2));

    input_r_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage5, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage1, zext_ln1169_12_fu_673_p1, ap_block_pp0_stage2, zext_ln1169_16_fu_766_p1, ap_block_pp0_stage3, zext_ln1169_21_fu_864_p1, ap_block_pp0_stage4, zext_ln1169_14_fu_1140_p1, ap_block_pp0_stage5, zext_ln1169_18_fu_1190_p1, ap_block_pp0_stage0, zext_ln1169_23_fu_1236_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            input_r_address0 <= zext_ln1169_23_fu_1236_p1(9 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage5) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
            input_r_address0 <= zext_ln1169_18_fu_1190_p1(9 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
            input_r_address0 <= zext_ln1169_14_fu_1140_p1(9 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            input_r_address0 <= zext_ln1169_21_fu_864_p1(9 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            input_r_address0 <= zext_ln1169_16_fu_766_p1(9 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            input_r_address0 <= zext_ln1169_12_fu_673_p1(9 - 1 downto 0);
        else 
            input_r_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    input_r_address1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage5, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage1, zext_ln1169_11_fu_662_p1, zext_ln1169_15_fu_756_p1, ap_block_pp0_stage2, zext_ln1169_20_fu_854_p1, ap_block_pp0_stage3, zext_ln1169_13_fu_1130_p1, ap_block_pp0_stage4, zext_ln1169_17_fu_1181_p1, ap_block_pp0_stage5, zext_ln1169_22_fu_1232_p1, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            input_r_address1 <= zext_ln1169_22_fu_1232_p1(9 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage5) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
            input_r_address1 <= zext_ln1169_17_fu_1181_p1(9 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
            input_r_address1 <= zext_ln1169_13_fu_1130_p1(9 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            input_r_address1 <= zext_ln1169_20_fu_854_p1(9 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            input_r_address1 <= zext_ln1169_15_fu_756_p1(9 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            input_r_address1 <= zext_ln1169_11_fu_662_p1(9 - 1 downto 0);
        else 
            input_r_address1 <= "XXXXXXXXX";
        end if; 
    end process;


    input_r_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage5, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_block_pp0_stage5_11001, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            input_r_ce0 <= ap_const_logic_1;
        else 
            input_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    input_r_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage5, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_block_pp0_stage5_11001, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            input_r_ce1 <= ap_const_logic_1;
        else 
            input_r_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    j_mid2_fu_564_p3 <= 
        ap_const_lv2_0 when (empty_68_fu_558_p2(0) = '1') else 
        j_fu_110;
    num_V_10_fu_1351_p3 <= 
        sext_ln174_2_reg_2099 when (and_ln185_1_fu_1346_p2(0) = '1') else 
        num_V_9_fu_1334_p3;
    num_V_12_fu_1376_p2 <= std_logic_vector(signed(grp_fu_1563_p3) + signed(sext_ln1169_2_fu_1373_p1));
    num_V_13_fu_1381_p3 <= 
        num_V_12_fu_1376_p2 when (icmp_ln184_reg_1861_pp0_iter1_reg(0) = '1') else 
        num_V_11_reg_2177;
    num_V_15_fu_1411_p2 <= std_logic_vector(signed(grp_fu_1571_p3) + signed(sext_ln1169_3_fu_1408_p1));
    num_V_16_fu_1390_p2 <= std_logic_vector(signed(sext_ln1169_1_fu_1370_p1) + signed(num_V_14_reg_2155));
    num_V_17_fu_1455_p3 <= 
        num_V_22_fu_1448_p3 when (p_mid210_reg_1946_pp0_iter1_reg(0) = '1') else 
        sext_ln174_6_fu_1405_p1;
    num_V_18_fu_1395_p3 <= 
        num_V_16_fu_1390_p2 when (icmp_ln184_reg_1861_pp0_iter1_reg(0) = '1') else 
        num_V_14_reg_2155;
    num_V_19_fu_1419_p2 <= std_logic_vector(signed(sext_ln1169_3_fu_1408_p1) + signed(sext_ln174_7_fu_1416_p1));
    num_V_20_fu_1429_p3 <= 
        num_V_15_fu_1411_p2 when (and_ln193_fu_1425_p2(0) = '1') else 
        sext_ln174_7_fu_1416_p1;
    num_V_21_fu_1437_p3 <= 
        num_V_19_fu_1419_p2 when (and_ln197_1_reg_1976_pp0_iter1_reg(0) = '1') else 
        num_V_20_fu_1429_p3;
    num_V_22_fu_1448_p3 <= 
        num_V_13_reg_2193 when (and_ln193_1_fu_1444_p2(0) = '1') else 
        num_V_21_fu_1437_p3;
    num_V_3_fu_1271_p3 <= 
        grp_fu_1509_p3 when (icmp_ln184_reg_1861(0) = '1') else 
        sext_ln174_1_reg_2038;
    num_V_4_fu_1240_p2 <= std_logic_vector(signed(grp_fu_1501_p2) + signed(sext_ln174_reg_1986));
    num_V_5_fu_1244_p3 <= 
        num_V_4_fu_1240_p2 when (icmp_ln184_reg_1861(0) = '1') else 
        sext_ln174_reg_1986;
    num_V_7_fu_1313_p2 <= std_logic_vector(signed(sext_ln712_7_fu_1310_p1) + signed(sext_ln174_4_fu_1307_p1));
    num_V_8_fu_1327_p3 <= 
        grp_fu_1525_p3 when (and_ln185_fu_1323_p2(0) = '1') else 
        sext_ln174_3_fu_1304_p1;
    num_V_9_fu_1334_p3 <= 
        sext_ln174_5_fu_1319_p1 when (and_ln188_reg_1908(0) = '1') else 
        num_V_8_fu_1327_p3;
    or_ln176_1_fu_972_p2 <= (rev43_fu_918_p2 or exitcond_flatten59_reg_1625);
    or_ln176_2_fu_797_p2 <= (sel_tmp2_fu_780_p2 or exitcond_flatten59_reg_1625);
    or_ln176_3_fu_977_p2 <= (rev46_fu_938_p2 or exitcond_flatten59_reg_1625);
    or_ln176_fu_960_p2 <= (rev_fu_899_p2 or exitcond_flatten59_reg_1625);
    p_cast6_mid2_fu_616_p3 <= 
        p_mid1_fu_610_p2 when (and_ln176_1_fu_546_p2(0) = '1') else 
        select_ln176_3_fu_526_p3;
    p_cast7_mid2_fu_987_p3 <= 
        p_mid15_fu_982_p2 when (and_ln176_1_reg_1707(0) = '1') else 
        select_ln176_4_fu_953_p3;
    p_mid15_fu_982_p2 <= std_logic_vector(unsigned(select_ln176_reg_1635) + unsigned(ap_const_lv8_3));
    p_mid17_fu_1098_p2 <= (p_mid15_fu_982_p2 and indvars_iv_next25_mid1_fu_1037_p2);
    p_mid1_fu_610_p2 <= std_logic_vector(unsigned(empty_70_fu_606_p1) + unsigned(ap_const_lv7_7F));
    p_mid210_fu_1118_p3 <= 
        rev55_fu_1112_p2 when (and_ln176_1_reg_1707(0) = '1') else 
        or_ln176_3_fu_977_p2;
    p_shl3_cast_fu_1002_p3 <= (trunc_ln1169_fu_998_p1 & ap_const_lv2_0);
    p_shl4_cast_fu_628_p3 <= (p_cast6_mid2_fu_616_p3 & ap_const_lv2_0);
    p_shl_cast_fu_1057_p3 <= (trunc_ln1169_1_fu_1053_p1 & ap_const_lv2_0);
    rev43_fu_918_p2 <= (tmp_19_fu_910_p3 xor ap_const_lv1_1);
    rev46_fu_938_p2 <= (tmp_20_fu_930_p3 xor ap_const_lv1_1);
    rev49_fu_1024_p2 <= (tmp_22_fu_1016_p3 xor ap_const_lv1_1);
    rev52_fu_1079_p2 <= (tmp_23_fu_1071_p3 xor ap_const_lv1_1);
    rev55_fu_1112_p2 <= (tmp_24_fu_1104_p3 xor ap_const_lv1_1);
    rev_fu_899_p2 <= (tmp_fu_891_p3 xor ap_const_lv1_1);
    sel_tmp12_mid2_fu_1092_p2 <= (cmp112_mid2_fu_1030_p3 xor ap_const_lv1_1);
    sel_tmp2_fu_780_p2 <= (cmp25_fu_775_p2 xor ap_const_lv1_1);
    sel_tmp2_mid1_fu_808_p2 <= (cmp25_mid1_reg_1737 xor ap_const_lv1_1);
    sel_tmp2_mid2_fu_813_p3 <= 
        sel_tmp2_mid1_fu_808_p2 when (and_ln176_1_reg_1707(0) = '1') else 
        or_ln176_2_fu_797_p2;
    select_ln176_1_v_cast_fu_522_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln176_2_fu_499_p3),12));
    select_ln176_2_fu_499_p3 <= 
        add_ln176_fu_479_p2 when (exitcond_flatten59_fu_485_p2(0) = '1') else 
        d_fu_122;
    select_ln176_3_fu_526_p3 <= 
        ap_const_lv7_7F when (exitcond_flatten59_fu_485_p2(0) = '1') else 
        empty_64_fu_452_p2;
    select_ln176_4_fu_953_p3 <= 
        ap_const_lv8_2 when (exitcond_flatten59_reg_1625(0) = '1') else 
        empty_65_fu_886_p2;
    select_ln176_5_fu_965_p3 <= 
        ap_const_lv8_1 when (exitcond_flatten59_reg_1625(0) = '1') else 
        indvars_iv_next25_fu_905_p2;
    select_ln176_fu_491_p3 <= 
        ap_const_lv8_0 when (exitcond_flatten59_fu_485_p2(0) = '1') else 
        i_fu_114;
        sext_ln1169_1_fu_1370_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mul_ln712_8_reg_2166),32));

        sext_ln1169_2_fu_1373_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mul_ln712_8_reg_2166),33));

        sext_ln1169_3_fu_1408_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mul_ln712_10_reg_2183),33));

        sext_ln1169_4_fu_747_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln184_fu_742_p2),9));

        sext_ln174_1_fu_1220_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_1492_p3),31));

        sext_ln174_2_fu_1276_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(num_V_3_fu_1271_p3),32));

        sext_ln174_3_fu_1304_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(num_V_5_reg_2058),32));

        sext_ln174_4_fu_1307_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(num_V_5_reg_2058),31));

        sext_ln174_5_fu_1319_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(num_V_7_fu_1313_p2),32));

        sext_ln174_6_fu_1405_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(num_V_10_reg_2144_pp0_iter2_reg),33));

        sext_ln174_7_fu_1416_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(num_V_18_reg_2204),33));

        sext_ln174_fu_1174_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_1483_p3),30));

        sext_ln712_4_fu_1223_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_1501_p2),31));

        sext_ln712_7_fu_1310_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mul_ln712_5_reg_2104),31));

        sext_ln712_8_fu_1280_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_1518_p2),32));

    sub_ln1169_1_fu_636_p2 <= std_logic_vector(unsigned(p_shl4_cast_fu_628_p3) - unsigned(zext_ln1169_6_fu_624_p1));
    sub_ln1169_2_fu_1010_p2 <= std_logic_vector(unsigned(p_shl3_cast_fu_1002_p3) - unsigned(zext_ln1169_7_fu_994_p1));
    sub_ln1169_3_fu_1065_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_1057_p3) - unsigned(zext_ln1169_8_fu_1049_p1));
    sub_ln1169_fu_596_p2 <= std_logic_vector(unsigned(zext_ln1169_5_fu_592_p1) - unsigned(zext_ln1169_fu_580_p1));
    tmp_19_fu_910_p3 <= indvars_iv_next25_fu_905_p2(7 downto 7);
    tmp_20_fu_930_p3 <= empty_66_fu_924_p2(7 downto 7);
    tmp_21_fu_584_p3 <= (i_cast5_mid2_fu_572_p3 & ap_const_lv2_0);
    tmp_22_fu_1016_p3 <= p_mid15_fu_982_p2(7 downto 7);
    tmp_23_fu_1071_p3 <= indvars_iv_next25_mid1_fu_1037_p2(7 downto 7);
    tmp_24_fu_1104_p3 <= p_mid17_fu_1098_p2(7 downto 7);
    tmp_25_fu_1466_p3 <= num_V_17_fu_1455_p3(32 downto 32);
    tmp_32_cast_fu_682_p3 <= (trunc_ln202_fu_678_p1 & ap_const_lv3_0);
    tmp_V_address0 <= zext_ln202_fu_1401_p1(12 - 1 downto 0);

    tmp_V_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            tmp_V_ce0 <= ap_const_logic_1;
        else 
            tmp_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_V_d0 <= 
        ap_const_lv32_0 when (tmp_25_fu_1466_p3(0) = '1') else 
        trunc_ln174_fu_1462_p1;

    tmp_V_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            tmp_V_we0 <= ap_const_logic_1;
        else 
            tmp_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_fu_891_p3 <= empty_65_fu_886_p2(7 downto 7);
    trunc_ln1169_10_fu_1253_p1 <= input_r_q1(12 - 1 downto 0);
    trunc_ln1169_11_fu_1261_p1 <= input_r_q0(12 - 1 downto 0);
    trunc_ln1169_12_fu_1292_p1 <= input_r_q1(12 - 1 downto 0);
    trunc_ln1169_13_fu_1300_p1 <= input_r_q0(12 - 1 downto 0);
    trunc_ln1169_1_fu_1053_p1 <= indvars_iv_next25_cast8_mid2_fu_1042_p3(7 - 1 downto 0);
    trunc_ln1169_2_fu_734_p1 <= input_r_q1(12 - 1 downto 0);
    trunc_ln1169_3_fu_771_p1 <= input_r_q0(12 - 1 downto 0);
    trunc_ln1169_4_fu_828_p1 <= input_r_q1(12 - 1 downto 0);
    trunc_ln1169_5_fu_832_p1 <= input_r_q0(12 - 1 downto 0);
    trunc_ln1169_6_fu_1148_p1 <= input_r_q1(12 - 1 downto 0);
    trunc_ln1169_7_fu_1152_p1 <= input_r_q0(12 - 1 downto 0);
    trunc_ln1169_8_fu_1206_p1 <= input_r_q1(12 - 1 downto 0);
    trunc_ln1169_9_fu_1210_p1 <= input_r_q0(12 - 1 downto 0);
    trunc_ln1169_fu_998_p1 <= p_cast7_mid2_fu_987_p3(7 - 1 downto 0);
    trunc_ln174_fu_1462_p1 <= num_V_17_fu_1455_p3(32 - 1 downto 0);
    trunc_ln202_fu_678_p1 <= add_ln1169_fu_656_p2(9 - 1 downto 0);
    xor_ln176_fu_534_p2 <= (exitcond_flatten59_fu_485_p2 xor ap_const_lv1_1);
    xor_ln185_fu_1341_p2 <= (icmp_ln185_reg_1900 xor ap_const_lv1_1);
    zext_ln1169_10_fu_652_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_mid2_fu_564_p3),61));
    zext_ln1169_11_fu_662_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1169_fu_656_p2),64));
    zext_ln1169_12_fu_673_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1169_6_fu_667_p2),64));
    zext_ln1169_13_fu_1130_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1169_7_fu_1125_p2),64));
    zext_ln1169_14_fu_1140_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1169_8_fu_1135_p2),64));
    zext_ln1169_15_fu_756_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1169_9_fu_751_p2),64));
    zext_ln1169_16_fu_766_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1169_10_fu_761_p2),64));
    zext_ln1169_17_fu_1181_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1169_11_fu_1177_p2),64));
    zext_ln1169_18_fu_1190_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1169_12_fu_1186_p2),64));
    zext_ln1169_19_fu_845_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln185_fu_840_p2),9));
    zext_ln1169_20_fu_854_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1169_13_fu_849_p2),64));
    zext_ln1169_21_fu_864_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1169_14_fu_859_p2),64));
    zext_ln1169_22_fu_1232_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1169_15_reg_2003),64));
    zext_ln1169_23_fu_1236_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1169_16_reg_2008),64));
    zext_ln1169_5_fu_592_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_21_fu_584_p3),61));
    zext_ln1169_6_fu_624_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_cast6_mid2_fu_616_p3),9));
    zext_ln1169_7_fu_994_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_cast7_mid2_fu_987_p3),9));
    zext_ln1169_8_fu_1049_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(indvars_iv_next25_cast8_mid2_fu_1042_p3),9));
    zext_ln1169_9_fu_648_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_mid2_fu_564_p3),9));
    zext_ln1169_fu_580_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_cast5_mid2_fu_572_p3),61));
    zext_ln176_fu_507_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln176_2_fu_499_p3),64));
    zext_ln202_fu_1401_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln202_reg_1759_pp0_iter2_reg),64));
end behav;
