-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
-- Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity master_fix_convolution2_fix_secondKernel_f_V_2 is 
    generic(
             DataWidth     : integer := 21; 
             AddressWidth     : integer := 7; 
             AddressRange    : integer := 128
    ); 
    port (
          address0      : in std_logic_vector(AddressWidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DataWidth-1 downto 0);
          reset     : in std_logic;
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of master_fix_convolution2_fix_secondKernel_f_V_2 is 

signal address0_tmp : std_logic_vector(AddressWidth-1 downto 0); 
type mem_array is array (0 to AddressRange-1) of std_logic_vector (DataWidth-1 downto 0); 
signal mem : mem_array := (
    0 => "000000101010000000111", 1 => "000001011000111010011", 
    2 => "111110100001010111011", 3 => "000000100111111110000", 
    4 => "111111001101110100101", 5 => "111101000101000110000", 
    6 => "111100101000110111100", 7 => "000011110000001000100", 
    8 => "111110100010010001011", 9 => "111111001010111110010", 
    10 => "111110011001101000000", 11 => "111111011011111111111", 
    12 => "111111101001011100110", 13 => "000000001100000010101", 
    14 => "000000101010001011010", 15 => "111110011110000011001", 
    16 => "111111010010000110110", 17 => "111111110011101000110", 
    18 => "111101101010011100010", 19 => "111011000001110011000", 
    20 => "111110001110011011111", 21 => "000000001110000010000", 
    22 => "111111100001110001001", 23 => "000000100111100000001", 
    24 => "111110010010110110111", 25 => "000011111001000111101", 
    26 => "000001011001011101111", 27 => "111100100100001000010", 
    28 => "111100110110101010001", 29 => "110101011010110100101", 
    30 => "110101110001000000011", 31 => "000000111100011010010", 
    32 => "111101101110110100110", 33 => "000001000011111111010", 
    34 => "111110000100101001001", 35 => "111111100011101001100", 
    36 => "111110111100101011101", 37 => "111110100111000001011", 
    38 => "111100110010100110100", 39 => "000011000111011000110", 
    40 => "000010011010011100100", 41 => "000000101010011111000", 
    42 => "000010011010010110101", 43 => "111110010111010001011", 
    44 => "000100110010110110001", 45 => "111100011100001010111", 
    46 => "111011011111010111001", 47 => "111010100010000000001", 
    48 => "111111000100110111011", 49 => "111110000110100101110", 
    50 => "111111010101111011000", 51 => "111110100110001000100", 
    52 => "111111101010100011010", 53 => "111011111010110001011", 
    54 => "111111001001101001010", 55 => "111101111100111101110", 
    56 => "000000000111011011011", 57 => "000000010100010110110", 
    58 => "111101100010010101111", 59 => "111101000101111000000", 
    60 => "111111010001101111110", 61 => "000001000000110100010", 
    62 => "111111101001101000001", 63 => "111011001010110100101", 
    64 => "000011100111100011001", 65 => "111111110110110100010", 
    66 => "111111101010100001101", 67 => "111111000011010110010", 
    68 => "000101101000011111101", 69 => "111110010110001000101", 
    70 => "111011110010010010010", 71 => "111001001101001100110", 
    72 => "000010011101100011000", 73 => "000110000100010001011", 
    74 => "111001111111000101001", 75 => "111111111100001100100", 
    76 => "000001101111001000001", 77 => "111110000000110001111", 
    78 => "111110000100110011001", 79 => "111111110111100001110", 
    80 => "111111110111101111111", 81 => "111111001111011010101", 
    82 => "111100101101000110010", 83 => "111110011100000000001", 
    84 => "111110100010110100100", 85 => "111110011011101000110", 
    86 => "111101111010101010110", 87 => "000111100101000111111", 
    88 => "111110011110010100010", 89 => "111011110000101000111", 
    90 => "000000101111100111010", 91 => "111101101100101011100", 
    92 => "111100101010111011101", 93 => "000010001110000000111", 
    94 => "000010101110010011010", 95 => "111110001010110010110", 
    96 => "111111011100110001010", 97 => "111101000010111011010", 
    98 => "000010100011011101100", 99 => "000000010011001000011", 
    100 => "111000010110101110001", 101 => "111100010011100101100", 
    102 => "111110000100111000100", 103 => "111111101010000101100", 
    104 => "000010110011000111011", 105 => "000011001111111111011", 
    106 => "000000101110110111110", 107 => "111110010010101100000", 
    108 => "110101111100101110110", 109 => "111110000110010000111", 
    110 => "111010111001111111010", 111 => "111111101000100101111", 
    112 => "000000001001010101010", 113 => "101110111001101111110", 
    114 => "000000110111011010001", 115 => "000011110001001100100", 
    116 => "111111110111111010111", 117 => "111101011000110000111", 
    118 => "111111110011001001011", 119 => "000000010011101111000", 
    120 => "111101110000010001110", 121 => "111110101010001001101", 
    122 => "111111001000111100000", 123 => "111111011001100001000", 
    124 => "000000000010000010101", 125 => "000000001001101001010", 
    126 => "111111111001000101101", 127 => "000001100001101011101" );


begin 


memory_access_guard_0: process (address0) 
begin
      address0_tmp <= address0;
--synthesis translate_off
      if (CONV_INTEGER(address0) > AddressRange-1) then
           address0_tmp <= (others => '0');
      else 
           address0_tmp <= address0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(address0_tmp)); 
        end if;
    end if;
end process;

end rtl;

