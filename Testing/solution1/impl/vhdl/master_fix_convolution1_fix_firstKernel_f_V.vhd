-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
-- Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity master_fix_convolution1_fix_firstKernel_f_V is 
    generic(
             DataWidth     : integer := 20; 
             AddressWidth     : integer := 7; 
             AddressRange    : integer := 96
    ); 
    port (
          address0      : in std_logic_vector(AddressWidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DataWidth-1 downto 0);
          reset     : in std_logic;
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of master_fix_convolution1_fix_firstKernel_f_V is 

signal address0_tmp : std_logic_vector(AddressWidth-1 downto 0); 
type mem_array is array (0 to AddressRange-1) of std_logic_vector (DataWidth-1 downto 0); 
signal mem : mem_array := (
    0 => "11110000100110010110", 1 => "11111111010000110010", 
    2 => "00011000110111100010", 3 => "11111110101100011110", 
    4 => "11110101111001011111", 5 => "00001010110111011110", 
    6 => "11111100010111101101", 7 => "00000010100101101110", 
    8 => "00000101010101010010", 9 => "00001001001010100111", 
    10 => "11110101000100100000", 11 => "11110010010111110001", 
    12 => "00000011111101000110", 13 => "11101011011011000111", 
    14 => "10111110101000010111", 15 => "00001111001101111111", 
    16 => "11101100010101101110", 17 => "11111000010110001001", 
    18 => "11100100011111110101", 19 => "00011001001011100001", 
    20 => "00000101100010111010", 21 => "11101001010100111111", 
    22 => "11100100110101000011", 23 => "11010001111111011011", 
    24 => "00010100000110110100", 25 => "11111000101011111100", 
    26 => "00010000111101111001", 27 => "00001010101001001110", 
    28 => "00000000101100100101", 29 => "00001100001001011101", 
    30 => "00010001101111110101", 31 => "11101101101000000100", 
    32 => "11111011111000011100", 33 => "00001000111111100000", 
    34 => "11110011111111101010", 35 => "11100110010000111011", 
    36 => "00001101110111111000", 37 => "00011100001000110110", 
    38 => "11101000110011011011", 39 => "00010101000100010101", 
    40 => "11110101101010101110", 41 => "11100011010011101110", 
    42 => "00001010010010000100", 43 => "11101111110011101000", 
    44 => "11110101000010001111", 45 => "00011000010111111001", 
    46 => "11110101010101111001", 47 => "11011001101101100110", 
    48 => "11011111010100000000", 49 => "11101100111101101101", 
    50 => "00100001001101111001", 51 => "11110010010101001010", 
    52 => "11111010000110011110", 53 => "00011001000110001010", 
    54 => "00010000100100001001", 55 => "11111100011001011100", 
    56 => "11101010100100101001", 57 => "11111110000001001111", 
    58 => "00000111001000100101", 59 => "11001100101100001110", 
    60 => "11111010001110101110", 61 => "11011101111111011001", 
    62 => "11110111011111001000", 63 => "11110100100111100101", 
    64 => "11111000100101001111", 65 => "00000100100110010101", 
    66 => "00000010111010011111", 67 => "11110100110011010000", 
    68 => "11101100000001111100", 69 => "00000011011000110100", 
    70 => "11100111101110110101", 71 => "11111001100010001101", 
    72 => "00001010000101000001", 73 => "00000110011010111000", 
    74 => "11110011110011001101", 75 => "00001011000101001010", 
    76 => "11101111100011000001", 77 => "00000100100110101011", 
    78 => "00010000111101001101", 79 => "11110110000111010101", 
    80 => "11101001111010000010", 81 => "11111110011111110111", 
    82 => "11011011001101011001", 83 => "00001111101110010000", 
    84 => "11110110111101111110", 85 => "11110110000110110110", 
    86 => "11010010000110110000", 87 => "00000100111001001010", 
    88 => "11111010011111110000", 89 => "11111110110010000110", 
    90 => "00001110010111100101", 91 => "00000100011101000000", 
    92 => "00010100010010100011", 93 => "11111111111111110110", 
    94 => "00010000000100001011", 95 => "00100101111111010111" );


begin 


memory_access_guard_0: process (address0) 
begin
      address0_tmp <= address0;
--synthesis translate_off
      if (CONV_INTEGER(address0) > AddressRange-1) then
           address0_tmp <= (others => '0');
      else 
           address0_tmp <= address0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(address0_tmp)); 
        end if;
    end if;
end process;

end rtl;

