-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
-- Version: 2021.1
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity master_fix_dense2_fix is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_0_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_0_ce0 : OUT STD_LOGIC;
    m_0_q0 : IN STD_LOGIC_VECTOR (34 downto 0);
    m_0_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_0_ce1 : OUT STD_LOGIC;
    m_0_q1 : IN STD_LOGIC_VECTOR (34 downto 0);
    ap_return_0 : OUT STD_LOGIC_VECTOR (35 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (35 downto 0);
    ap_return_2 : OUT STD_LOGIC_VECTOR (35 downto 0);
    ap_return_3 : OUT STD_LOGIC_VECTOR (35 downto 0) );
end;


architecture behav of master_fix_dense2_fix is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (10 downto 0) := "00000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (10 downto 0) := "00000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (10 downto 0) := "00000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (10 downto 0) := "00000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (10 downto 0) := "00000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (10 downto 0) := "00001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (10 downto 0) := "00010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (10 downto 0) := "00100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (10 downto 0) := "01000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (10 downto 0) := "10000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv64_4 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100";
    constant ap_const_lv64_5 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000101";
    constant ap_const_lv64_6 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000110";
    constant ap_const_lv64_7 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000111";
    constant ap_const_lv64_8 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001000";
    constant ap_const_lv64_9 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001001";
    constant ap_const_lv64_A : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001010";
    constant ap_const_lv64_B : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001011";
    constant ap_const_lv64_C : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001100";
    constant ap_const_lv64_D : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001101";
    constant ap_const_lv64_E : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001110";
    constant ap_const_lv64_F : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001111";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal m_0_load_reg_303 : STD_LOGIC_VECTOR (34 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal m_0_load_1_reg_308 : STD_LOGIC_VECTOR (34 downto 0);
    signal m_0_load_2_reg_323 : STD_LOGIC_VECTOR (34 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal m_0_load_3_reg_328 : STD_LOGIC_VECTOR (34 downto 0);
    signal m_0_load_4_reg_343 : STD_LOGIC_VECTOR (34 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal m_0_load_5_reg_348 : STD_LOGIC_VECTOR (34 downto 0);
    signal m_0_load_6_reg_363 : STD_LOGIC_VECTOR (34 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal m_0_load_7_reg_368 : STD_LOGIC_VECTOR (34 downto 0);
    signal m_0_load_8_reg_383 : STD_LOGIC_VECTOR (34 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal m_0_load_9_reg_388 : STD_LOGIC_VECTOR (34 downto 0);
    signal m_0_load_10_reg_403 : STD_LOGIC_VECTOR (34 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal m_0_load_11_reg_408 : STD_LOGIC_VECTOR (34 downto 0);
    signal m_0_load_12_reg_423 : STD_LOGIC_VECTOR (34 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal m_0_load_13_reg_428 : STD_LOGIC_VECTOR (34 downto 0);
    signal m_0_load_14_reg_443 : STD_LOGIC_VECTOR (34 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal m_0_load_15_reg_448 : STD_LOGIC_VECTOR (34 downto 0);
    signal grp_dense2_fix_Pipeline_Dense2_Loop_fu_207_ap_start : STD_LOGIC;
    signal grp_dense2_fix_Pipeline_Dense2_Loop_fu_207_ap_done : STD_LOGIC;
    signal grp_dense2_fix_Pipeline_Dense2_Loop_fu_207_ap_idle : STD_LOGIC;
    signal grp_dense2_fix_Pipeline_Dense2_Loop_fu_207_ap_ready : STD_LOGIC;
    signal grp_dense2_fix_Pipeline_Dense2_Loop_fu_207_out_016_07_out : STD_LOGIC_VECTOR (35 downto 0);
    signal grp_dense2_fix_Pipeline_Dense2_Loop_fu_207_out_016_07_out_ap_vld : STD_LOGIC;
    signal grp_dense2_fix_Pipeline_Dense2_Loop_fu_207_out_0_06_out : STD_LOGIC_VECTOR (35 downto 0);
    signal grp_dense2_fix_Pipeline_Dense2_Loop_fu_207_out_0_06_out_ap_vld : STD_LOGIC;
    signal grp_dense2_fix_Pipeline_Dense2_Loop_fu_207_out_02_05_out : STD_LOGIC_VECTOR (35 downto 0);
    signal grp_dense2_fix_Pipeline_Dense2_Loop_fu_207_out_02_05_out_ap_vld : STD_LOGIC;
    signal grp_dense2_fix_Pipeline_Dense2_Loop_fu_207_out_03_04_out : STD_LOGIC_VECTOR (35 downto 0);
    signal grp_dense2_fix_Pipeline_Dense2_Loop_fu_207_out_03_04_out_ap_vld : STD_LOGIC;
    signal grp_dense2_fix_Pipeline_Dense2_Loop_fu_207_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component master_fix_dense2_fix_Pipeline_Dense2_Loop IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        r_V_cast : IN STD_LOGIC_VECTOR (34 downto 0);
        r_V_2_cast : IN STD_LOGIC_VECTOR (34 downto 0);
        r_V_4_cast : IN STD_LOGIC_VECTOR (34 downto 0);
        r_V_6_cast : IN STD_LOGIC_VECTOR (34 downto 0);
        r_V_8_cast : IN STD_LOGIC_VECTOR (34 downto 0);
        r_V_10_cast : IN STD_LOGIC_VECTOR (34 downto 0);
        r_V_12_cast : IN STD_LOGIC_VECTOR (34 downto 0);
        r_V_14_cast : IN STD_LOGIC_VECTOR (34 downto 0);
        r_V_16_cast : IN STD_LOGIC_VECTOR (34 downto 0);
        r_V_18_cast : IN STD_LOGIC_VECTOR (34 downto 0);
        r_V_20_cast : IN STD_LOGIC_VECTOR (34 downto 0);
        r_V_22_cast : IN STD_LOGIC_VECTOR (34 downto 0);
        r_V_24_cast : IN STD_LOGIC_VECTOR (34 downto 0);
        r_V_26_cast : IN STD_LOGIC_VECTOR (34 downto 0);
        r_V_28_cast : IN STD_LOGIC_VECTOR (34 downto 0);
        zext_ln306 : IN STD_LOGIC_VECTOR (34 downto 0);
        out_016_07_out : OUT STD_LOGIC_VECTOR (35 downto 0);
        out_016_07_out_ap_vld : OUT STD_LOGIC;
        out_0_06_out : OUT STD_LOGIC_VECTOR (35 downto 0);
        out_0_06_out_ap_vld : OUT STD_LOGIC;
        out_02_05_out : OUT STD_LOGIC_VECTOR (35 downto 0);
        out_02_05_out_ap_vld : OUT STD_LOGIC;
        out_03_04_out : OUT STD_LOGIC_VECTOR (35 downto 0);
        out_03_04_out_ap_vld : OUT STD_LOGIC );
    end component;



begin
    grp_dense2_fix_Pipeline_Dense2_Loop_fu_207 : component master_fix_dense2_fix_Pipeline_Dense2_Loop
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_dense2_fix_Pipeline_Dense2_Loop_fu_207_ap_start,
        ap_done => grp_dense2_fix_Pipeline_Dense2_Loop_fu_207_ap_done,
        ap_idle => grp_dense2_fix_Pipeline_Dense2_Loop_fu_207_ap_idle,
        ap_ready => grp_dense2_fix_Pipeline_Dense2_Loop_fu_207_ap_ready,
        r_V_cast => m_0_load_reg_303,
        r_V_2_cast => m_0_load_1_reg_308,
        r_V_4_cast => m_0_load_2_reg_323,
        r_V_6_cast => m_0_load_3_reg_328,
        r_V_8_cast => m_0_load_4_reg_343,
        r_V_10_cast => m_0_load_5_reg_348,
        r_V_12_cast => m_0_load_6_reg_363,
        r_V_14_cast => m_0_load_7_reg_368,
        r_V_16_cast => m_0_load_8_reg_383,
        r_V_18_cast => m_0_load_9_reg_388,
        r_V_20_cast => m_0_load_10_reg_403,
        r_V_22_cast => m_0_load_11_reg_408,
        r_V_24_cast => m_0_load_12_reg_423,
        r_V_26_cast => m_0_load_13_reg_428,
        r_V_28_cast => m_0_load_14_reg_443,
        zext_ln306 => m_0_load_15_reg_448,
        out_016_07_out => grp_dense2_fix_Pipeline_Dense2_Loop_fu_207_out_016_07_out,
        out_016_07_out_ap_vld => grp_dense2_fix_Pipeline_Dense2_Loop_fu_207_out_016_07_out_ap_vld,
        out_0_06_out => grp_dense2_fix_Pipeline_Dense2_Loop_fu_207_out_0_06_out,
        out_0_06_out_ap_vld => grp_dense2_fix_Pipeline_Dense2_Loop_fu_207_out_0_06_out_ap_vld,
        out_02_05_out => grp_dense2_fix_Pipeline_Dense2_Loop_fu_207_out_02_05_out,
        out_02_05_out_ap_vld => grp_dense2_fix_Pipeline_Dense2_Loop_fu_207_out_02_05_out_ap_vld,
        out_03_04_out => grp_dense2_fix_Pipeline_Dense2_Loop_fu_207_out_03_04_out,
        out_03_04_out_ap_vld => grp_dense2_fix_Pipeline_Dense2_Loop_fu_207_out_03_04_out_ap_vld);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_dense2_fix_Pipeline_Dense2_Loop_fu_207_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_dense2_fix_Pipeline_Dense2_Loop_fu_207_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                    grp_dense2_fix_Pipeline_Dense2_Loop_fu_207_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_dense2_fix_Pipeline_Dense2_Loop_fu_207_ap_ready = ap_const_logic_1)) then 
                    grp_dense2_fix_Pipeline_Dense2_Loop_fu_207_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                m_0_load_10_reg_403 <= m_0_q1;
                m_0_load_11_reg_408 <= m_0_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                m_0_load_12_reg_423 <= m_0_q1;
                m_0_load_13_reg_428 <= m_0_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                m_0_load_14_reg_443 <= m_0_q1;
                m_0_load_15_reg_448 <= m_0_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                m_0_load_1_reg_308 <= m_0_q0;
                m_0_load_reg_303 <= m_0_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                m_0_load_2_reg_323 <= m_0_q1;
                m_0_load_3_reg_328 <= m_0_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                m_0_load_4_reg_343 <= m_0_q1;
                m_0_load_5_reg_348 <= m_0_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                m_0_load_6_reg_363 <= m_0_q1;
                m_0_load_7_reg_368 <= m_0_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                m_0_load_8_reg_383 <= m_0_q1;
                m_0_load_9_reg_388 <= m_0_q0;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, grp_dense2_fix_Pipeline_Dense2_Loop_fu_207_ap_done, ap_CS_fsm_state10)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state10) and (grp_dense2_fix_Pipeline_Dense2_Loop_fu_207_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_ST_fsm_state10_blk_assign_proc : process(grp_dense2_fix_Pipeline_Dense2_Loop_fu_207_ap_done)
    begin
        if ((grp_dense2_fix_Pipeline_Dense2_Loop_fu_207_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state10_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state10_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state11_blk <= ap_const_logic_0;

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;
    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return_0 <= grp_dense2_fix_Pipeline_Dense2_Loop_fu_207_out_0_06_out;
    ap_return_1 <= grp_dense2_fix_Pipeline_Dense2_Loop_fu_207_out_016_07_out;
    ap_return_2 <= grp_dense2_fix_Pipeline_Dense2_Loop_fu_207_out_02_05_out;
    ap_return_3 <= grp_dense2_fix_Pipeline_Dense2_Loop_fu_207_out_03_04_out;
    grp_dense2_fix_Pipeline_Dense2_Loop_fu_207_ap_start <= grp_dense2_fix_Pipeline_Dense2_Loop_fu_207_ap_start_reg;

    m_0_address0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            m_0_address0 <= ap_const_lv64_F(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            m_0_address0 <= ap_const_lv64_D(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            m_0_address0 <= ap_const_lv64_B(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            m_0_address0 <= ap_const_lv64_9(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            m_0_address0 <= ap_const_lv64_7(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            m_0_address0 <= ap_const_lv64_5(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            m_0_address0 <= ap_const_lv64_3(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            m_0_address0 <= ap_const_lv64_1(4 - 1 downto 0);
        else 
            m_0_address0 <= "XXXX";
        end if; 
    end process;


    m_0_address1_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            m_0_address1 <= ap_const_lv64_E(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            m_0_address1 <= ap_const_lv64_C(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            m_0_address1 <= ap_const_lv64_A(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            m_0_address1 <= ap_const_lv64_8(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            m_0_address1 <= ap_const_lv64_6(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            m_0_address1 <= ap_const_lv64_4(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            m_0_address1 <= ap_const_lv64_2(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            m_0_address1 <= ap_const_lv64_0(4 - 1 downto 0);
        else 
            m_0_address1 <= "XXXX";
        end if; 
    end process;


    m_0_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)))) then 
            m_0_ce0 <= ap_const_logic_1;
        else 
            m_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    m_0_ce1_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)))) then 
            m_0_ce1 <= ap_const_logic_1;
        else 
            m_0_ce1 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
