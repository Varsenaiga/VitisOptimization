-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
-- Version: 2021.1
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity master_fix_convolution2_fix_Pipeline_VITIS_LOOP_247_2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    parc_V_0_21_reload : IN STD_LOGIC_VECTOR (35 downto 0);
    parc_V_1_23_reload : IN STD_LOGIC_VECTOR (35 downto 0);
    parc_V_2_24_reload : IN STD_LOGIC_VECTOR (35 downto 0);
    parc_V_3_25_reload : IN STD_LOGIC_VECTOR (35 downto 0);
    parc_V_4_26_reload : IN STD_LOGIC_VECTOR (35 downto 0);
    parc_V_5_27_reload : IN STD_LOGIC_VECTOR (35 downto 0);
    parc_V_6_28_reload : IN STD_LOGIC_VECTOR (35 downto 0);
    parc_V_7_29_reload : IN STD_LOGIC_VECTOR (35 downto 0);
    parc_V_8_210_reload : IN STD_LOGIC_VECTOR (35 downto 0);
    parc_V_9_211_reload : IN STD_LOGIC_VECTOR (35 downto 0);
    parc_V_10_212_reload : IN STD_LOGIC_VECTOR (35 downto 0);
    parc_V_11_213_reload : IN STD_LOGIC_VECTOR (35 downto 0);
    parc_V_12_214_reload : IN STD_LOGIC_VECTOR (35 downto 0);
    parc_V_13_215_reload : IN STD_LOGIC_VECTOR (35 downto 0);
    parc_V_14_216_reload : IN STD_LOGIC_VECTOR (35 downto 0);
    parc_V_15_217_reload : IN STD_LOGIC_VECTOR (35 downto 0);
    out_0_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    out_0_ce0 : OUT STD_LOGIC;
    out_0_we0 : OUT STD_LOGIC;
    out_0_d0 : OUT STD_LOGIC_VECTOR (34 downto 0) );
end;


architecture behav of master_fix_convolution2_fix_Pipeline_VITIS_LOOP_247_2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv35_0 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal icmp_ln247_fu_191_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal r_1_cast_fu_203_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal r_fu_70 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_r_1 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln247_fu_197_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_fu_212_p17 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_fu_212_p18 : STD_LOGIC_VECTOR (35 downto 0);
    signal tmp_50_fu_254_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln1548_1_fu_250_p1 : STD_LOGIC_VECTOR (34 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component master_fix_mux_164_36_1_1_x IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        din9_WIDTH : INTEGER;
        din10_WIDTH : INTEGER;
        din11_WIDTH : INTEGER;
        din12_WIDTH : INTEGER;
        din13_WIDTH : INTEGER;
        din14_WIDTH : INTEGER;
        din15_WIDTH : INTEGER;
        din16_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (35 downto 0);
        din1 : IN STD_LOGIC_VECTOR (35 downto 0);
        din2 : IN STD_LOGIC_VECTOR (35 downto 0);
        din3 : IN STD_LOGIC_VECTOR (35 downto 0);
        din4 : IN STD_LOGIC_VECTOR (35 downto 0);
        din5 : IN STD_LOGIC_VECTOR (35 downto 0);
        din6 : IN STD_LOGIC_VECTOR (35 downto 0);
        din7 : IN STD_LOGIC_VECTOR (35 downto 0);
        din8 : IN STD_LOGIC_VECTOR (35 downto 0);
        din9 : IN STD_LOGIC_VECTOR (35 downto 0);
        din10 : IN STD_LOGIC_VECTOR (35 downto 0);
        din11 : IN STD_LOGIC_VECTOR (35 downto 0);
        din12 : IN STD_LOGIC_VECTOR (35 downto 0);
        din13 : IN STD_LOGIC_VECTOR (35 downto 0);
        din14 : IN STD_LOGIC_VECTOR (35 downto 0);
        din15 : IN STD_LOGIC_VECTOR (35 downto 0);
        din16 : IN STD_LOGIC_VECTOR (3 downto 0);
        dout : OUT STD_LOGIC_VECTOR (35 downto 0) );
    end component;


    component master_fix_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mux_164_36_1_1_x_U337 : component master_fix_mux_164_36_1_1_x
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 36,
        din1_WIDTH => 36,
        din2_WIDTH => 36,
        din3_WIDTH => 36,
        din4_WIDTH => 36,
        din5_WIDTH => 36,
        din6_WIDTH => 36,
        din7_WIDTH => 36,
        din8_WIDTH => 36,
        din9_WIDTH => 36,
        din10_WIDTH => 36,
        din11_WIDTH => 36,
        din12_WIDTH => 36,
        din13_WIDTH => 36,
        din14_WIDTH => 36,
        din15_WIDTH => 36,
        din16_WIDTH => 4,
        dout_WIDTH => 36)
    port map (
        din0 => parc_V_0_21_reload,
        din1 => parc_V_1_23_reload,
        din2 => parc_V_2_24_reload,
        din3 => parc_V_3_25_reload,
        din4 => parc_V_4_26_reload,
        din5 => parc_V_5_27_reload,
        din6 => parc_V_6_28_reload,
        din7 => parc_V_7_29_reload,
        din8 => parc_V_8_210_reload,
        din9 => parc_V_9_211_reload,
        din10 => parc_V_10_212_reload,
        din11 => parc_V_11_213_reload,
        din12 => parc_V_12_214_reload,
        din13 => parc_V_13_215_reload,
        din14 => parc_V_14_216_reload,
        din15 => parc_V_15_217_reload,
        din16 => tmp_fu_212_p17,
        dout => tmp_fu_212_p18);

    flow_control_loop_pipe_sequential_init_U : component master_fix_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start_int = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    r_fu_70_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start_int = ap_const_logic_1))) then
                if ((icmp_ln247_fu_191_p2 = ap_const_lv1_0)) then 
                    r_fu_70 <= add_ln247_fu_197_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    r_fu_70 <= ap_const_lv5_0;
                end if;
            end if; 
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_CS_fsm_state1, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln247_fu_197_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_r_1) + unsigned(ap_const_lv5_1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start_int)
    begin
        if ((ap_start_int = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_start_int)
    begin
                ap_block_state1_pp0_stage0_iter0 <= (ap_start_int = ap_const_logic_0);
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_state1, icmp_ln247_fu_191_p2, ap_start_int)
    begin
        if (((icmp_ln247_fu_191_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start_int = ap_const_logic_1))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_state1, ap_loop_exit_ready, ap_done_reg, ap_start_int)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start_int = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_state1, ap_start_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start_int = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_state1, ap_start_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start_int = ap_const_logic_1))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_r_1_assign_proc : process(ap_CS_fsm_state1, r_fu_70, ap_loop_init)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_sig_allocacmp_r_1 <= ap_const_lv5_0;
        else 
            ap_sig_allocacmp_r_1 <= r_fu_70;
        end if; 
    end process;

    icmp_ln247_fu_191_p2 <= "1" when (ap_sig_allocacmp_r_1 = ap_const_lv5_10) else "0";
    out_0_address0 <= r_1_cast_fu_203_p1(4 - 1 downto 0);

    out_0_ce0_assign_proc : process(ap_CS_fsm_state1, ap_start_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start_int = ap_const_logic_1))) then 
            out_0_ce0 <= ap_const_logic_1;
        else 
            out_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_0_d0 <= 
        ap_const_lv35_0 when (tmp_50_fu_254_p3(0) = '1') else 
        trunc_ln1548_1_fu_250_p1;

    out_0_we0_assign_proc : process(ap_CS_fsm_state1, icmp_ln247_fu_191_p2, ap_start_int)
    begin
        if (((icmp_ln247_fu_191_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start_int = ap_const_logic_1))) then 
            out_0_we0 <= ap_const_logic_1;
        else 
            out_0_we0 <= ap_const_logic_0;
        end if; 
    end process;

    r_1_cast_fu_203_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_r_1),64));
    tmp_50_fu_254_p3 <= tmp_fu_212_p18(35 downto 35);
    tmp_fu_212_p17 <= ap_sig_allocacmp_r_1(4 - 1 downto 0);
    trunc_ln1548_1_fu_250_p1 <= tmp_fu_212_p18(35 - 1 downto 0);
end behav;
