-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
-- Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity master_fix_secondKernel_f_V_0 is 
    generic(
             DataWidth     : integer := 16; 
             AddressWidth     : integer := 7; 
             AddressRange    : integer := 128
    ); 
    port (
          address0      : in std_logic_vector(AddressWidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DataWidth-1 downto 0);
          reset     : in std_logic;
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of master_fix_secondKernel_f_V_0 is 

signal address0_tmp : std_logic_vector(AddressWidth-1 downto 0); 
type mem_array is array (0 to AddressRange-1) of std_logic_vector (DataWidth-1 downto 0); 
signal mem : mem_array := (
    0 => "1011011111000011", 1 => "1100110011000100", 2 => "1011000100111100", 
    3 => "1011101100100100", 4 => "1101010000001010", 5 => "1100010010110110", 
    6 => "1110000111111101", 7 => "0000000001100000", 8 => "0000011100100011", 
    9 => "0000110101100110", 10 => "1111101000101010", 11 => "0000011010011001", 
    12 => "1111000001111010", 13 => "1111100111100010", 14 => "1111110011111100", 
    15 => "0000111100111001", 16 => "1111000011111000", 17 => "1111001011100100", 
    18 => "1101101111110010", 19 => "1111001001111010", 20 => "1110111100011011", 
    21 => "1111010000000100", 22 => "1111111101010111", 23 => "1111011100001110", 
    24 => "0000100010010110", 25 => "0011101001001000", 26 => "1111011000011100", 
    27 => "1110101010011010", 28 => "0000101111110111", 29 => "1111100101011111", 
    30 => "1110101001101010", 31 => "1111110010011011", 32 => "1111000101010001", 
    33 => "0000010101100100", 34 => "1111111110010101", 35 => "1110101101101101", 
    36 => "1111111111001000", 37 => "0110010110100011", 38 => "0001011100000101", 
    39 => "1110001000111111", 40 => "1110100001101000", 41 => "1101101100000000", 
    42 => "1111111101101001", 43 => "1110011000110000", 44 => "1111011010111110", 
    45 => "1101101010011101", 46 => "1101111001010101", 47 => "0001110110101011", 
    48 => "0000111000110001", 49 => "0000101101011111", 50 => "0000010110110101", 
    51 => "0011011110101011", 52 => "0000110000010111", 53 => "1110001000001110", 
    54 => "1110100110101011", 55 => "0001010001111001", 56 => "1110110111010001", 
    57 => "0001100000101100", 58 => "1111000001010101", 59 => "1111100001110001", 
    60 => "1111010100001110", 61 => "1111110001111111", 62 => "0010011101011001", 
    63 => "1110011100011101", 64 => "1111000011111101", 65 => "1111010011001111", 
    66 => "1110010000101010", 67 => "0000001011001001", 68 => "1110111100011011", 
    69 => "1110101100101001", 70 => "0001010011111111", 71 => "0010100100100110", 
    72 => "1110101111001100", 73 => "1110001000110010", 74 => "1011010100101101", 
    75 => "1011111101000101", 76 => "1101010100110000", 77 => "1110101001001101", 
    78 => "1110011100000000", 79 => "1101101001101101", 80 => "1111111111111110", 
    81 => "1101011000010111", 82 => "0000101001010010", 83 => "1101001101011110", 
    84 => "0011000010001100", 85 => "0000010101000011", 86 => "0000101110110000", 
    87 => "1111000010011001", 88 => "0000011011011000", 89 => "1110111100010001", 
    90 => "0010111010111111", 91 => "1111011110010011", 92 => "0001010100100111", 
    93 => "0000110001110001", 94 => "0000000001000011", 95 => "0000001110100011", 
    96 => "0000010000001110", 97 => "1111011110011111", 98 => "0001101011000100", 
    99 => "1111111011011111", 100 => "1001111010110100", 101 => "1110011101110110", 
    102 => "1110111010011100", 103 => "1111111011100001", 104 => "0101000101100101", 
    105 => "0000010001111010", 106 => "1110101011011100", 107 => "1101101100100010", 
    108 => "0000101101100010", 109 => "0000001001110111", 110 => "1111110000001001", 
    111 => "0001000010101111", 112 => "0010011101100001", 113 => "0001111011110011", 
    114 => "1101111011100011", 115 => "1101100011100110", 116 => "1111000011101011", 
    117 => "0001011000110100", 118 => "0000011001001110", 119 => "0001101110001100", 
    120 => "1111100001010001", 121 => "0000001110110011", 122 => "0000011000101010", 
    123 => "1111111110001011", 124 => "0001101000010110", 125 => "1111010101011010", 
    126 => "1111010000011001", 127 => "1111010101101110" );


begin 


memory_access_guard_0: process (address0) 
begin
      address0_tmp <= address0;
--synthesis translate_off
      if (CONV_INTEGER(address0) > AddressRange-1) then
           address0_tmp <= (others => '0');
      else 
           address0_tmp <= address0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(address0_tmp)); 
        end if;
    end if;
end process;

end rtl;

