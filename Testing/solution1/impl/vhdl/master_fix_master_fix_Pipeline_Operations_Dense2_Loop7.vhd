-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
-- Version: 2021.1
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity master_fix_master_fix_Pipeline_Operations_Dense2_Loop7 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    den1_0_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    den1_0_ce0 : OUT STD_LOGIC;
    den1_0_q0 : IN STD_LOGIC_VECTOR (34 downto 0);
    den2_V_0_2_out : OUT STD_LOGIC_VECTOR (35 downto 0);
    den2_V_0_2_out_ap_vld : OUT STD_LOGIC;
    grp_fu_1505_p_din0 : OUT STD_LOGIC_VECTOR (18 downto 0);
    grp_fu_1505_p_din1 : OUT STD_LOGIC_VECTOR (34 downto 0);
    grp_fu_1505_p_dout0 : IN STD_LOGIC_VECTOR (53 downto 0);
    grp_fu_1505_p_ce : OUT STD_LOGIC );
end;


architecture behav of master_fix_master_fix_Pipeline_Operations_Dense2_Loop7 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv36_FFFF657C5 : STD_LOGIC_VECTOR (35 downto 0) := "111111111111111101100101011111000101";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv19_0 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000000";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_36 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110110";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv18_0 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln310_fu_108_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal secondDense_f_V_2_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal secondDense_f_V_2_ce0 : STD_LOGIC;
    signal secondDense_f_V_2_q0 : STD_LOGIC_VECTOR (18 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln310_reg_243 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln310_reg_243_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln310_reg_243_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal aux1_V_reg_257 : STD_LOGIC_VECTOR (34 downto 0);
    signal aux2_V_reg_262 : STD_LOGIC_VECTOR (18 downto 0);
    signal zext_ln1168_fu_131_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal sext_ln1171_fu_134_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal r_V_reg_277 : STD_LOGIC_VECTOR (53 downto 0);
    signal trunc_ln727_fu_143_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal trunc_ln727_reg_283 : STD_LOGIC_VECTOR (17 downto 0);
    signal zext_ln315_fu_120_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal lhs_fu_54 : STD_LOGIC_VECTOR (35 downto 0);
    signal num_V_fu_213_p2 : STD_LOGIC_VECTOR (35 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal i_fu_58 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_sig_allocacmp_i_3 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln310_fu_114_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal lhs_2_fu_150_p3 : STD_LOGIC_VECTOR (54 downto 0);
    signal sext_ln1245_fu_158_p1 : STD_LOGIC_VECTOR (54 downto 0);
    signal ret_V_fu_161_p2 : STD_LOGIC_VECTOR (54 downto 0);
    signal p_Result_s_fu_177_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_fu_192_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln412_fu_197_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_2_fu_185_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln412_fu_203_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal num_V_2_fu_167_p4 : STD_LOGIC_VECTOR (35 downto 0);
    signal zext_ln415_fu_209_p1 : STD_LOGIC_VECTOR (35 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component master_fix_mul_19s_35ns_54_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (18 downto 0);
        din1 : IN STD_LOGIC_VECTOR (34 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (53 downto 0) );
    end component;


    component master_fix_master_fix_Pipeline_Operations_Dense2_Loop7_secondDense_f_V_2 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (18 downto 0) );
    end component;


    component master_fix_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    secondDense_f_V_2_U : component master_fix_master_fix_Pipeline_Operations_Dense2_Loop7_secondDense_f_V_2
    generic map (
        DataWidth => 19,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => secondDense_f_V_2_address0,
        ce0 => secondDense_f_V_2_ce0,
        q0 => secondDense_f_V_2_q0);

    flow_control_loop_pipe_sequential_init_U : component master_fix_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter3_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    i_fu_58_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln310_fu_108_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    i_fu_58 <= add_ln310_fu_114_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_58 <= ap_const_lv5_0;
                end if;
            end if; 
        end if;
    end process;

    lhs_fu_54_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                    lhs_fu_54 <= ap_const_lv36_FFFF657C5;
                elsif ((ap_enable_reg_pp0_iter4 = ap_const_logic_1)) then 
                    lhs_fu_54 <= num_V_fu_213_p2;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                aux1_V_reg_257 <= den1_0_q0;
                aux2_V_reg_262 <= secondDense_f_V_2_q0;
                icmp_ln310_reg_243 <= icmp_ln310_fu_108_p2;
                icmp_ln310_reg_243_pp0_iter1_reg <= icmp_ln310_reg_243;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                icmp_ln310_reg_243_pp0_iter2_reg <= icmp_ln310_reg_243_pp0_iter1_reg;
                r_V_reg_277 <= grp_fu_1505_p_dout0;
                trunc_ln727_reg_283 <= trunc_ln727_fu_143_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln310_fu_114_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_3) + unsigned(ap_const_lv5_1));
    and_ln412_fu_203_p2 <= (p_Result_2_fu_185_p3 and or_ln412_fu_197_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln310_fu_108_p2)
    begin
        if (((icmp_ln310_fu_108_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter3_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter3_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_3_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, i_fu_58)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_i_3 <= ap_const_lv5_0;
        else 
            ap_sig_allocacmp_i_3 <= i_fu_58;
        end if; 
    end process;

    den1_0_address0 <= zext_ln315_fu_120_p1(4 - 1 downto 0);

    den1_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            den1_0_ce0 <= ap_const_logic_1;
        else 
            den1_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    den2_V_0_2_out <= lhs_fu_54;

    den2_V_0_2_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln310_reg_243_pp0_iter2_reg)
    begin
        if (((icmp_ln310_reg_243_pp0_iter2_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            den2_V_0_2_out_ap_vld <= ap_const_logic_1;
        else 
            den2_V_0_2_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1505_p_ce <= ap_const_logic_1;
    grp_fu_1505_p_din0 <= sext_ln1171_fu_134_p1(19 - 1 downto 0);
    grp_fu_1505_p_din1 <= zext_ln1168_fu_131_p1(35 - 1 downto 0);
    icmp_ln310_fu_108_p2 <= "1" when (ap_sig_allocacmp_i_3 = ap_const_lv5_10) else "0";
    lhs_2_fu_150_p3 <= (lhs_fu_54 & ap_const_lv19_0);
    num_V_2_fu_167_p4 <= ret_V_fu_161_p2(54 downto 19);
    num_V_fu_213_p2 <= std_logic_vector(unsigned(num_V_2_fu_167_p4) + unsigned(zext_ln415_fu_209_p1));
    or_ln412_fu_197_p2 <= (r_fu_192_p2 or p_Result_s_fu_177_p3);
    p_Result_2_fu_185_p3 <= r_V_reg_277(18 downto 18);
    p_Result_s_fu_177_p3 <= ret_V_fu_161_p2(19 downto 19);
    r_fu_192_p2 <= "0" when (trunc_ln727_reg_283 = ap_const_lv18_0) else "1";
    ret_V_fu_161_p2 <= std_logic_vector(unsigned(lhs_2_fu_150_p3) + unsigned(sext_ln1245_fu_158_p1));
    secondDense_f_V_2_address0 <= zext_ln315_fu_120_p1(4 - 1 downto 0);

    secondDense_f_V_2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            secondDense_f_V_2_ce0 <= ap_const_logic_1;
        else 
            secondDense_f_V_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

        sext_ln1171_fu_134_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(aux2_V_reg_262),54));

        sext_ln1245_fu_158_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_reg_277),55));

    trunc_ln727_fu_143_p1 <= grp_fu_1505_p_dout0(18 - 1 downto 0);
    zext_ln1168_fu_131_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(aux1_V_reg_257),54));
    zext_ln315_fu_120_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_i_3),64));
    zext_ln415_fu_209_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln412_fu_203_p2),36));
end behav;
