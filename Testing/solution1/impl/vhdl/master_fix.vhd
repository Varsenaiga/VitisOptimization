-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
-- Version: 2021.1
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity master_fix is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_r_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    input_r_ce0 : OUT STD_LOGIC;
    input_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    out_r_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    out_r_ce0 : OUT STD_LOGIC;
    out_r_we0 : OUT STD_LOGIC;
    out_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of master_fix is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "master_fix_master_fix,hls_ip_2021_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu7ev-ffvf1517-3-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.182600,HLS_SYN_LAT=8217,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=181,HLS_SYN_LUT=266,HLS_VERSION=2021_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv19_0 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000000";
    constant ap_const_lv8_80 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv12_3 : STD_LOGIC_VECTOR (11 downto 0) := "000000000011";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal firstKernel_f_V_1_1_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal firstKernel_f_V_1_1_ce0 : STD_LOGIC;
    signal firstKernel_f_V_1_1_q0 : STD_LOGIC_VECTOR (17 downto 0);
    signal firstBias_f_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal firstBias_f_V_ce0 : STD_LOGIC;
    signal firstBias_f_V_q0 : STD_LOGIC_VECTOR (21 downto 0);
    signal zext_ln36_1_fu_167_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln36_1_reg_319 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal add_ln36_fu_177_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln36_reg_327 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln36_fu_171_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln1245_fu_183_p1 : STD_LOGIC_VECTOR (48 downto 0);
    signal sext_ln1245_reg_342 : STD_LOGIC_VECTOR (48 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal sext_ln38_fu_195_p1 : STD_LOGIC_VECTOR (48 downto 0);
    signal sext_ln38_reg_347 : STD_LOGIC_VECTOR (48 downto 0);
    signal sext_ln38_1_fu_221_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln38_1_reg_352 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal add_ln38_fu_231_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln38_reg_360 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal out_addr_reg_370 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln40_fu_277_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln40_reg_378 : STD_LOGIC_VECTOR (1 downto 0);
    signal i_reg_131 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln40_fu_271_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_reg_142 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln38_fu_225_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal zext_ln36_fu_161_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln1169_fu_250_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln42_fu_266_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal d_fu_76 : STD_LOGIC_VECTOR (3 downto 0);
    signal rhs_1_fu_187_p3 : STD_LOGIC_VECTOR (40 downto 0);
    signal tmp_fu_203_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln1169_1_fu_211_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln1169_fu_199_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln1169_fu_215_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln1169_2_fu_241_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln1169_fu_245_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal shl_ln42_fu_255_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln42_fu_261_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln1245_fu_287_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln1245_fu_287_p2 : STD_LOGIC_VECTOR (48 downto 0);
    signal ret_V_fu_292_p2 : STD_LOGIC_VECTOR (48 downto 0);
    signal trunc_ln_fu_297_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component master_fix_mul_32s_18s_49_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (17 downto 0);
        dout : OUT STD_LOGIC_VECTOR (48 downto 0) );
    end component;


    component master_fix_firstKernel_f_V_1_1 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (17 downto 0) );
    end component;


    component master_fix_firstBias_f_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (21 downto 0) );
    end component;



begin
    firstKernel_f_V_1_1_U : component master_fix_firstKernel_f_V_1_1
    generic map (
        DataWidth => 18,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => firstKernel_f_V_1_1_address0,
        ce0 => firstKernel_f_V_1_1_ce0,
        q0 => firstKernel_f_V_1_1_q0);

    firstBias_f_V_U : component master_fix_firstBias_f_V
    generic map (
        DataWidth => 22,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => firstBias_f_V_address0,
        ce0 => firstBias_f_V_ce0,
        q0 => firstBias_f_V_q0);

    mul_32s_18s_49_1_1_U1 : component master_fix_mul_32s_18s_49_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 18,
        dout_WIDTH => 49)
    port map (
        din0 => input_r_q0,
        din1 => mul_ln1245_fu_287_p1,
        dout => mul_ln1245_fu_287_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    d_fu_76_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                d_fu_76 <= ap_const_lv4_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln38_fu_225_p2 = ap_const_lv1_1))) then 
                d_fu_76 <= add_ln36_reg_327;
            end if; 
        end if;
    end process;

    i_reg_131_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                i_reg_131 <= ap_const_lv8_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln40_fu_271_p2 = ap_const_lv1_1))) then 
                i_reg_131 <= add_ln38_reg_360;
            end if; 
        end if;
    end process;

    j_reg_142_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                j_reg_142 <= add_ln40_reg_378;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln38_fu_225_p2 = ap_const_lv1_0))) then 
                j_reg_142 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                add_ln36_reg_327 <= add_ln36_fu_177_p2;
                    zext_ln36_1_reg_319(3 downto 0) <= zext_ln36_1_fu_167_p1(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                add_ln38_reg_360 <= add_ln38_fu_231_p2;
                sext_ln38_1_reg_352 <= sext_ln38_1_fu_221_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                add_ln40_reg_378 <= add_ln40_fu_277_p2;
                out_addr_reg_370 <= zext_ln42_fu_266_p1(12 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                sext_ln1245_reg_342 <= sext_ln1245_fu_183_p1;
                    sext_ln38_reg_347(48 downto 19) <= sext_ln38_fu_195_p1(48 downto 19);
            end if;
        end if;
    end process;
    zext_ln36_1_reg_319(11 downto 4) <= "00000000";
    sext_ln38_reg_347(18 downto 0) <= "0000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln36_fu_171_p2, ap_CS_fsm_state4, ap_CS_fsm_state5, icmp_ln40_fu_271_p2, icmp_ln38_fu_225_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln36_fu_171_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln38_fu_225_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln40_fu_271_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;
    add_ln1169_fu_245_p2 <= std_logic_vector(signed(sext_ln38_1_reg_352) + signed(zext_ln1169_2_fu_241_p1));
    add_ln36_fu_177_p2 <= std_logic_vector(unsigned(d_fu_76) + unsigned(ap_const_lv4_1));
    add_ln38_fu_231_p2 <= std_logic_vector(unsigned(i_reg_131) + unsigned(ap_const_lv8_1));
    add_ln40_fu_277_p2 <= std_logic_vector(unsigned(j_reg_142) + unsigned(ap_const_lv2_1));
    add_ln42_fu_261_p2 <= std_logic_vector(unsigned(shl_ln42_fu_255_p2) + unsigned(zext_ln36_1_reg_319));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;

    ap_done_assign_proc : process(ap_CS_fsm_state2, icmp_ln36_fu_171_p2)
    begin
        if (((icmp_ln36_fu_171_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln36_fu_171_p2)
    begin
        if (((icmp_ln36_fu_171_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    firstBias_f_V_address0 <= zext_ln36_fu_161_p1(3 - 1 downto 0);

    firstBias_f_V_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            firstBias_f_V_ce0 <= ap_const_logic_1;
        else 
            firstBias_f_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    firstKernel_f_V_1_1_address0 <= zext_ln36_fu_161_p1(3 - 1 downto 0);

    firstKernel_f_V_1_1_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            firstKernel_f_V_1_1_ce0 <= ap_const_logic_1;
        else 
            firstKernel_f_V_1_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln36_fu_171_p2 <= "1" when (d_fu_76 = ap_const_lv4_8) else "0";
    icmp_ln38_fu_225_p2 <= "1" when (i_reg_131 = ap_const_lv8_80) else "0";
    icmp_ln40_fu_271_p2 <= "1" when (j_reg_142 = ap_const_lv2_3) else "0";
    input_r_address0 <= sext_ln1169_fu_250_p1(9 - 1 downto 0);

    input_r_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            input_r_ce0 <= ap_const_logic_1;
        else 
            input_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    mul_ln1245_fu_287_p1 <= sext_ln1245_reg_342(18 - 1 downto 0);
    out_r_address0 <= out_addr_reg_370;

    out_r_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            out_r_ce0 <= ap_const_logic_1;
        else 
            out_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

        out_r_d0 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln_fu_297_p4),32));


    out_r_we0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            out_r_we0 <= ap_const_logic_1;
        else 
            out_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

    ret_V_fu_292_p2 <= std_logic_vector(signed(sext_ln38_reg_347) + signed(mul_ln1245_fu_287_p2));
    rhs_1_fu_187_p3 <= (firstBias_f_V_q0 & ap_const_lv19_0);
        sext_ln1169_fu_250_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln1169_fu_245_p2),64));

        sext_ln1245_fu_183_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(firstKernel_f_V_1_1_q0),49));

        sext_ln38_1_fu_221_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln1169_fu_215_p2),12));

        sext_ln38_fu_195_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(rhs_1_fu_187_p3),49));

    shl_ln42_fu_255_p2 <= std_logic_vector(shift_left(unsigned(add_ln1169_fu_245_p2),to_integer(unsigned('0' & ap_const_lv12_3(12-1 downto 0)))));
    sub_ln1169_fu_215_p2 <= std_logic_vector(unsigned(zext_ln1169_1_fu_211_p1) - unsigned(zext_ln1169_fu_199_p1));
    tmp_fu_203_p3 <= (i_reg_131 & ap_const_lv2_0);
    trunc_ln_fu_297_p4 <= ret_V_fu_292_p2(48 downto 19);
    zext_ln1169_1_fu_211_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_203_p3),11));
    zext_ln1169_2_fu_241_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_142),12));
    zext_ln1169_fu_199_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_131),11));
    zext_ln36_1_fu_167_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(d_fu_76),12));
    zext_ln36_fu_161_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(d_fu_76),64));
    zext_ln42_fu_266_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln42_fu_261_p2),64));
end behav;
