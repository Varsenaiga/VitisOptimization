-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
-- Version: 2021.1
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity master_fix_master_fix_Pipeline_MaxPool_Loop1_MaxPool_Loop2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    conv1_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    conv1_ce0 : OUT STD_LOGIC;
    conv1_q0 : IN STD_LOGIC_VECTOR (34 downto 0);
    conv1_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
    conv1_ce1 : OUT STD_LOGIC;
    conv1_q1 : IN STD_LOGIC_VECTOR (34 downto 0);
    conv1_address2 : OUT STD_LOGIC_VECTOR (11 downto 0);
    conv1_ce2 : OUT STD_LOGIC;
    conv1_q2 : IN STD_LOGIC_VECTOR (34 downto 0);
    max1_V_0_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    max1_V_0_ce0 : OUT STD_LOGIC;
    max1_V_0_we0 : OUT STD_LOGIC;
    max1_V_0_d0 : OUT STD_LOGIC_VECTOR (34 downto 0) );
end;


architecture behav of master_fix_master_fix_Pipeline_MaxPool_Loop1_MaxPool_Loop2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv10_3F0 : STD_LOGIC_VECTOR (9 downto 0) := "1111110000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv7_7E : STD_LOGIC_VECTOR (6 downto 0) := "1111110";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv7_3 : STD_LOGIC_VECTOR (6 downto 0) := "0000011";
    constant ap_const_lv15_AB : STD_LOGIC_VECTOR (14 downto 0) := "000000010101011";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv12_8 : STD_LOGIC_VECTOR (11 downto 0) := "000000001000";
    constant ap_const_lv12_10 : STD_LOGIC_VECTOR (11 downto 0) := "000000010000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv35_0 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000000000000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter12 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter13 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln235_fu_154_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal select_ln235_fu_184_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln235_1_fu_192_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln235_1_reg_433 : STD_LOGIC_VECTOR (3 downto 0);
    signal sub_ln243_fu_220_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln243_reg_439 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_reg_446 : STD_LOGIC_VECTOR (5 downto 0);
    signal empty_32_fu_328_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal empty_32_reg_466 : STD_LOGIC_VECTOR (8 downto 0);
    signal empty_32_reg_466_pp0_iter2_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal empty_32_reg_466_pp0_iter3_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal empty_32_reg_466_pp0_iter4_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal empty_32_reg_466_pp0_iter5_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal empty_32_reg_466_pp0_iter6_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal empty_32_reg_466_pp0_iter7_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal empty_32_reg_466_pp0_iter8_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal empty_32_reg_466_pp0_iter9_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal empty_32_reg_466_pp0_iter10_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal empty_32_reg_466_pp0_iter11_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal empty_32_reg_466_pp0_iter12_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal conv1_load_reg_471 : STD_LOGIC_VECTOR (34 downto 0);
    signal conv1_load_reg_471_pp0_iter3_reg : STD_LOGIC_VECTOR (34 downto 0);
    signal conv1_load_reg_471_pp0_iter4_reg : STD_LOGIC_VECTOR (34 downto 0);
    signal conv1_load_reg_471_pp0_iter5_reg : STD_LOGIC_VECTOR (34 downto 0);
    signal conv1_load_reg_471_pp0_iter6_reg : STD_LOGIC_VECTOR (34 downto 0);
    signal conv1_load_reg_471_pp0_iter7_reg : STD_LOGIC_VECTOR (34 downto 0);
    signal conv1_load_reg_471_pp0_iter8_reg : STD_LOGIC_VECTOR (34 downto 0);
    signal conv1_load_reg_471_pp0_iter9_reg : STD_LOGIC_VECTOR (34 downto 0);
    signal conv1_load_reg_471_pp0_iter10_reg : STD_LOGIC_VECTOR (34 downto 0);
    signal conv1_load_1_reg_477 : STD_LOGIC_VECTOR (34 downto 0);
    signal conv1_load_1_reg_477_pp0_iter3_reg : STD_LOGIC_VECTOR (34 downto 0);
    signal conv1_load_1_reg_477_pp0_iter4_reg : STD_LOGIC_VECTOR (34 downto 0);
    signal conv1_load_1_reg_477_pp0_iter5_reg : STD_LOGIC_VECTOR (34 downto 0);
    signal conv1_load_1_reg_477_pp0_iter6_reg : STD_LOGIC_VECTOR (34 downto 0);
    signal conv1_load_1_reg_477_pp0_iter7_reg : STD_LOGIC_VECTOR (34 downto 0);
    signal conv1_load_1_reg_477_pp0_iter8_reg : STD_LOGIC_VECTOR (34 downto 0);
    signal conv1_load_1_reg_477_pp0_iter9_reg : STD_LOGIC_VECTOR (34 downto 0);
    signal conv1_load_1_reg_477_pp0_iter10_reg : STD_LOGIC_VECTOR (34 downto 0);
    signal conv1_load_1_reg_477_pp0_iter11_reg : STD_LOGIC_VECTOR (34 downto 0);
    signal conv1_load_2_reg_483 : STD_LOGIC_VECTOR (34 downto 0);
    signal conv1_load_2_reg_483_pp0_iter3_reg : STD_LOGIC_VECTOR (34 downto 0);
    signal conv1_load_2_reg_483_pp0_iter4_reg : STD_LOGIC_VECTOR (34 downto 0);
    signal conv1_load_2_reg_483_pp0_iter5_reg : STD_LOGIC_VECTOR (34 downto 0);
    signal conv1_load_2_reg_483_pp0_iter6_reg : STD_LOGIC_VECTOR (34 downto 0);
    signal conv1_load_2_reg_483_pp0_iter7_reg : STD_LOGIC_VECTOR (34 downto 0);
    signal conv1_load_2_reg_483_pp0_iter8_reg : STD_LOGIC_VECTOR (34 downto 0);
    signal conv1_load_2_reg_483_pp0_iter9_reg : STD_LOGIC_VECTOR (34 downto 0);
    signal conv1_load_2_reg_483_pp0_iter10_reg : STD_LOGIC_VECTOR (34 downto 0);
    signal conv1_load_2_reg_483_pp0_iter11_reg : STD_LOGIC_VECTOR (34 downto 0);
    signal icmp_ln238_fu_338_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln238_reg_489 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln244_fu_359_p3 : STD_LOGIC_VECTOR (34 downto 0);
    signal select_ln244_reg_494 : STD_LOGIC_VECTOR (34 downto 0);
    signal select_ln244_2_fu_381_p3 : STD_LOGIC_VECTOR (34 downto 0);
    signal select_ln244_2_reg_500 : STD_LOGIC_VECTOR (34 downto 0);
    signal zext_ln243_1_fu_284_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln243_2_fu_300_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln243_3_fu_316_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast_fu_393_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal empty_fu_70 : STD_LOGIC_VECTOR (34 downto 0);
    signal ap_sig_allocacmp_p_load : STD_LOGIC_VECTOR (34 downto 0);
    signal i_fu_74 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_i_load : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln237_fu_252_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal d_fu_78 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_sig_allocacmp_d_load : STD_LOGIC_VECTOR (3 downto 0);
    signal indvar_flatten_fu_82 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_sig_allocacmp_indvar_flatten_load : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln235_1_fu_160_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln237_fu_178_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln235_fu_172_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_s_fu_208_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_2_fu_200_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln243_fu_216_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_226_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal mul_fu_236_p0 : STD_LOGIC_VECTOR (6 downto 0);
    signal mul_fu_236_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_fu_236_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal select_ln235_1_cast_fu_276_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln243_fu_279_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln243_1_fu_289_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln243_2_fu_294_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln243_3_fu_305_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln243_4_fu_310_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_24_cast_fu_321_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln235_1_cast1_fu_273_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_226_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln238_fu_334_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln238_fu_347_p3 : STD_LOGIC_VECTOR (34 downto 0);
    signal icmp_ln1548_fu_354_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1548_1_fu_366_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln244_1_fu_370_p3 : STD_LOGIC_VECTOR (34 downto 0);
    signal icmp_ln1548_2_fu_376_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter7_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter8_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter9_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter10_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter11_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter12_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal mul_fu_236_p00 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component master_fix_urem_7ns_3ns_2_11_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (6 downto 0);
        din1 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (1 downto 0) );
    end component;


    component master_fix_mul_7ns_9ns_15_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (6 downto 0);
        din1 : IN STD_LOGIC_VECTOR (8 downto 0);
        dout : OUT STD_LOGIC_VECTOR (14 downto 0) );
    end component;


    component master_fix_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    urem_7ns_3ns_2_11_1_U91 : component master_fix_urem_7ns_3ns_2_11_1
    generic map (
        ID => 1,
        NUM_STAGE => 11,
        din0_WIDTH => 7,
        din1_WIDTH => 3,
        dout_WIDTH => 2)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => select_ln235_fu_184_p3,
        din1 => grp_fu_226_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_226_p2);

    mul_7ns_9ns_15_1_1_U92 : component master_fix_mul_7ns_9ns_15_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 7,
        din1_WIDTH => 9,
        dout_WIDTH => 15)
    port map (
        din0 => mul_fu_236_p0,
        din1 => mul_fu_236_p1,
        dout => mul_fu_236_p2);

    flow_control_loop_pipe_sequential_init_U : component master_fix_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter12_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    d_fu_78_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln235_fu_154_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    d_fu_78 <= select_ln235_1_fu_192_p3;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    d_fu_78 <= ap_const_lv4_0;
                end if;
            end if; 
        end if;
    end process;

    i_fu_74_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln235_fu_154_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    i_fu_74 <= add_ln237_fu_252_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_74 <= ap_const_lv7_0;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten_fu_82_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln235_fu_154_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    indvar_flatten_fu_82 <= add_ln235_1_fu_160_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten_fu_82 <= ap_const_lv10_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
                ap_loop_exit_ready_pp0_iter11_reg <= ap_loop_exit_ready_pp0_iter10_reg;
                ap_loop_exit_ready_pp0_iter12_reg <= ap_loop_exit_ready_pp0_iter11_reg;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
                ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
                ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
                ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
                conv1_load_1_reg_477_pp0_iter10_reg <= conv1_load_1_reg_477_pp0_iter9_reg;
                conv1_load_1_reg_477_pp0_iter11_reg <= conv1_load_1_reg_477_pp0_iter10_reg;
                conv1_load_1_reg_477_pp0_iter3_reg <= conv1_load_1_reg_477;
                conv1_load_1_reg_477_pp0_iter4_reg <= conv1_load_1_reg_477_pp0_iter3_reg;
                conv1_load_1_reg_477_pp0_iter5_reg <= conv1_load_1_reg_477_pp0_iter4_reg;
                conv1_load_1_reg_477_pp0_iter6_reg <= conv1_load_1_reg_477_pp0_iter5_reg;
                conv1_load_1_reg_477_pp0_iter7_reg <= conv1_load_1_reg_477_pp0_iter6_reg;
                conv1_load_1_reg_477_pp0_iter8_reg <= conv1_load_1_reg_477_pp0_iter7_reg;
                conv1_load_1_reg_477_pp0_iter9_reg <= conv1_load_1_reg_477_pp0_iter8_reg;
                conv1_load_2_reg_483_pp0_iter10_reg <= conv1_load_2_reg_483_pp0_iter9_reg;
                conv1_load_2_reg_483_pp0_iter11_reg <= conv1_load_2_reg_483_pp0_iter10_reg;
                conv1_load_2_reg_483_pp0_iter3_reg <= conv1_load_2_reg_483;
                conv1_load_2_reg_483_pp0_iter4_reg <= conv1_load_2_reg_483_pp0_iter3_reg;
                conv1_load_2_reg_483_pp0_iter5_reg <= conv1_load_2_reg_483_pp0_iter4_reg;
                conv1_load_2_reg_483_pp0_iter6_reg <= conv1_load_2_reg_483_pp0_iter5_reg;
                conv1_load_2_reg_483_pp0_iter7_reg <= conv1_load_2_reg_483_pp0_iter6_reg;
                conv1_load_2_reg_483_pp0_iter8_reg <= conv1_load_2_reg_483_pp0_iter7_reg;
                conv1_load_2_reg_483_pp0_iter9_reg <= conv1_load_2_reg_483_pp0_iter8_reg;
                conv1_load_reg_471_pp0_iter10_reg <= conv1_load_reg_471_pp0_iter9_reg;
                conv1_load_reg_471_pp0_iter3_reg <= conv1_load_reg_471;
                conv1_load_reg_471_pp0_iter4_reg <= conv1_load_reg_471_pp0_iter3_reg;
                conv1_load_reg_471_pp0_iter5_reg <= conv1_load_reg_471_pp0_iter4_reg;
                conv1_load_reg_471_pp0_iter6_reg <= conv1_load_reg_471_pp0_iter5_reg;
                conv1_load_reg_471_pp0_iter7_reg <= conv1_load_reg_471_pp0_iter6_reg;
                conv1_load_reg_471_pp0_iter8_reg <= conv1_load_reg_471_pp0_iter7_reg;
                conv1_load_reg_471_pp0_iter9_reg <= conv1_load_reg_471_pp0_iter8_reg;
                empty_32_reg_466_pp0_iter10_reg <= empty_32_reg_466_pp0_iter9_reg;
                empty_32_reg_466_pp0_iter11_reg <= empty_32_reg_466_pp0_iter10_reg;
                empty_32_reg_466_pp0_iter12_reg <= empty_32_reg_466_pp0_iter11_reg;
                empty_32_reg_466_pp0_iter2_reg <= empty_32_reg_466;
                empty_32_reg_466_pp0_iter3_reg <= empty_32_reg_466_pp0_iter2_reg;
                empty_32_reg_466_pp0_iter4_reg <= empty_32_reg_466_pp0_iter3_reg;
                empty_32_reg_466_pp0_iter5_reg <= empty_32_reg_466_pp0_iter4_reg;
                empty_32_reg_466_pp0_iter6_reg <= empty_32_reg_466_pp0_iter5_reg;
                empty_32_reg_466_pp0_iter7_reg <= empty_32_reg_466_pp0_iter6_reg;
                empty_32_reg_466_pp0_iter8_reg <= empty_32_reg_466_pp0_iter7_reg;
                empty_32_reg_466_pp0_iter9_reg <= empty_32_reg_466_pp0_iter8_reg;
                icmp_ln238_reg_489 <= icmp_ln238_fu_338_p2;
                select_ln244_2_reg_500 <= select_ln244_2_fu_381_p3;
                select_ln244_reg_494 <= select_ln244_fu_359_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                empty_32_reg_466 <= empty_32_fu_328_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then
                conv1_load_1_reg_477 <= conv1_q1;
                conv1_load_2_reg_483 <= conv1_q0;
                conv1_load_reg_471 <= conv1_q2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter12 = ap_const_logic_1))) then
                empty_fu_70 <= select_ln244_2_fu_381_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln235_fu_154_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                select_ln235_1_reg_433 <= select_ln235_1_fu_192_p3;
                    sub_ln243_reg_439(11 downto 3) <= sub_ln243_fu_220_p2(11 downto 3);
                tmp_reg_446 <= mul_fu_236_p2(14 downto 9);
            end if;
        end if;
    end process;
    sub_ln243_reg_439(2 downto 0) <= "000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln235_1_fu_160_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten_load) + unsigned(ap_const_lv10_1));
    add_ln235_fu_172_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_d_load) + unsigned(ap_const_lv4_1));
    add_ln237_fu_252_p2 <= std_logic_vector(unsigned(select_ln235_fu_184_p3) + unsigned(ap_const_lv7_1));
    add_ln243_1_fu_289_p2 <= std_logic_vector(unsigned(sub_ln243_reg_439) + unsigned(ap_const_lv12_8));
    add_ln243_2_fu_294_p2 <= std_logic_vector(unsigned(add_ln243_1_fu_289_p2) + unsigned(select_ln235_1_cast_fu_276_p1));
    add_ln243_3_fu_305_p2 <= std_logic_vector(unsigned(sub_ln243_reg_439) + unsigned(ap_const_lv12_10));
    add_ln243_4_fu_310_p2 <= std_logic_vector(unsigned(add_ln243_3_fu_305_p2) + unsigned(select_ln235_1_cast_fu_276_p1));
    add_ln243_fu_279_p2 <= std_logic_vector(unsigned(sub_ln243_reg_439) + unsigned(select_ln235_1_cast_fu_276_p1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage0_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln235_fu_154_p2)
    begin
        if (((icmp_ln235_fu_154_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter12_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter12_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13)
    begin
        if (((ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_d_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, d_fu_78)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_d_load <= ap_const_lv4_0;
        else 
            ap_sig_allocacmp_d_load <= d_fu_78;
        end if; 
    end process;


    ap_sig_allocacmp_i_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, i_fu_74, ap_loop_init)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_i_load <= ap_const_lv7_0;
        else 
            ap_sig_allocacmp_i_load <= i_fu_74;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, indvar_flatten_fu_82)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_indvar_flatten_load <= ap_const_lv10_0;
        else 
            ap_sig_allocacmp_indvar_flatten_load <= indvar_flatten_fu_82;
        end if; 
    end process;


    ap_sig_allocacmp_p_load_assign_proc : process(ap_enable_reg_pp0_iter12, select_ln244_2_fu_381_p3, ap_block_pp0_stage0, empty_fu_70)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_1))) then 
            ap_sig_allocacmp_p_load <= select_ln244_2_fu_381_p3;
        else 
            ap_sig_allocacmp_p_load <= empty_fu_70;
        end if; 
    end process;

    conv1_address0 <= zext_ln243_3_fu_316_p1(12 - 1 downto 0);
    conv1_address1 <= zext_ln243_2_fu_300_p1(12 - 1 downto 0);
    conv1_address2 <= zext_ln243_1_fu_284_p1(12 - 1 downto 0);

    conv1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            conv1_ce0 <= ap_const_logic_1;
        else 
            conv1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    conv1_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            conv1_ce1 <= ap_const_logic_1;
        else 
            conv1_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    conv1_ce2_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            conv1_ce2 <= ap_const_logic_1;
        else 
            conv1_ce2 <= ap_const_logic_0;
        end if; 
    end process;

    empty_32_fu_328_p2 <= std_logic_vector(unsigned(tmp_24_cast_fu_321_p3) + unsigned(select_ln235_1_cast1_fu_273_p1));
    grp_fu_226_p1 <= ap_const_lv7_3(3 - 1 downto 0);
    icmp_ln1548_1_fu_366_p2 <= "1" when (unsigned(select_ln244_reg_494) < unsigned(conv1_load_1_reg_477_pp0_iter11_reg)) else "0";
    icmp_ln1548_2_fu_376_p2 <= "1" when (unsigned(select_ln244_1_fu_370_p3) < unsigned(conv1_load_2_reg_483_pp0_iter11_reg)) else "0";
    icmp_ln1548_fu_354_p2 <= "1" when (unsigned(select_ln238_fu_347_p3) < unsigned(conv1_load_reg_471_pp0_iter10_reg)) else "0";
    icmp_ln235_fu_154_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten_load = ap_const_lv10_3F0) else "0";
    icmp_ln237_fu_178_p2 <= "1" when (ap_sig_allocacmp_i_load = ap_const_lv7_7E) else "0";
    icmp_ln238_fu_338_p2 <= "1" when (trunc_ln238_fu_334_p1 = ap_const_lv2_0) else "0";
    max1_V_0_address0 <= p_cast_fu_393_p1(9 - 1 downto 0);

    max1_V_0_ce0_assign_proc : process(ap_enable_reg_pp0_iter13, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter13 = ap_const_logic_1))) then 
            max1_V_0_ce0 <= ap_const_logic_1;
        else 
            max1_V_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    max1_V_0_d0 <= select_ln244_2_reg_500;

    max1_V_0_we0_assign_proc : process(ap_enable_reg_pp0_iter13, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter13 = ap_const_logic_1))) then 
            max1_V_0_we0 <= ap_const_logic_1;
        else 
            max1_V_0_we0 <= ap_const_logic_0;
        end if; 
    end process;

    mul_fu_236_p0 <= mul_fu_236_p00(7 - 1 downto 0);
    mul_fu_236_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln235_fu_184_p3),15));
    mul_fu_236_p1 <= ap_const_lv15_AB(9 - 1 downto 0);
    p_cast_fu_393_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_32_reg_466_pp0_iter12_reg),64));
    select_ln235_1_cast1_fu_273_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln235_1_reg_433),9));
    select_ln235_1_cast_fu_276_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln235_1_reg_433),12));
    select_ln235_1_fu_192_p3 <= 
        add_ln235_fu_172_p2 when (icmp_ln237_fu_178_p2(0) = '1') else 
        ap_sig_allocacmp_d_load;
    select_ln235_fu_184_p3 <= 
        ap_const_lv7_0 when (icmp_ln237_fu_178_p2(0) = '1') else 
        ap_sig_allocacmp_i_load;
    select_ln238_fu_347_p3 <= 
        ap_const_lv35_0 when (icmp_ln238_reg_489(0) = '1') else 
        ap_sig_allocacmp_p_load;
    select_ln244_1_fu_370_p3 <= 
        conv1_load_1_reg_477_pp0_iter11_reg when (icmp_ln1548_1_fu_366_p2(0) = '1') else 
        select_ln244_reg_494;
    select_ln244_2_fu_381_p3 <= 
        conv1_load_2_reg_483_pp0_iter11_reg when (icmp_ln1548_2_fu_376_p2(0) = '1') else 
        select_ln244_1_fu_370_p3;
    select_ln244_fu_359_p3 <= 
        conv1_load_reg_471_pp0_iter10_reg when (icmp_ln1548_fu_354_p2(0) = '1') else 
        select_ln238_fu_347_p3;
    sub_ln243_fu_220_p2 <= std_logic_vector(unsigned(tmp_2_fu_200_p3) - unsigned(zext_ln243_fu_216_p1));
    tmp_24_cast_fu_321_p3 <= (tmp_reg_446 & ap_const_lv3_0);
    tmp_2_fu_200_p3 <= (select_ln235_fu_184_p3 & ap_const_lv5_0);
    tmp_s_fu_208_p3 <= (select_ln235_fu_184_p3 & ap_const_lv3_0);
    trunc_ln238_fu_334_p1 <= grp_fu_226_p2(2 - 1 downto 0);
    zext_ln243_1_fu_284_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln243_fu_279_p2),64));
    zext_ln243_2_fu_300_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln243_2_fu_294_p2),64));
    zext_ln243_3_fu_316_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln243_4_fu_310_p2),64));
    zext_ln243_fu_216_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_208_p3),12));
end behav;
