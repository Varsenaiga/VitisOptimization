-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
-- Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity master_fix_secondKernel_f_V_2 is 
    generic(
             DataWidth     : integer := 17; 
             AddressWidth     : integer := 7; 
             AddressRange    : integer := 128
    ); 
    port (
          address0      : in std_logic_vector(AddressWidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DataWidth-1 downto 0);
          reset     : in std_logic;
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of master_fix_secondKernel_f_V_2 is 

signal address0_tmp : std_logic_vector(AddressWidth-1 downto 0); 
type mem_array is array (0 to AddressRange-1) of std_logic_vector (DataWidth-1 downto 0); 
signal mem : mem_array := (
    0 => "00000010101000000", 1 => "00000101100011101", 
    2 => "11111010000101100", 3 => "00000010011111111", 
    4 => "11111100110111010", 5 => "11110100010100011", 
    6 => "11110010100011100", 7 => "00001111000000100", 
    8 => "11111010001001001", 9 => "11111100101011111", 
    10 => "11111001100110100", 11 => "11111101110000000", 
    12 => "11111110100101110", 13 => "00000000110000001", 
    14 => "00000010101000110", 15 => "11111001111000010", 
    16 => "11111101001000011", 17 => "11111111001110100", 
    18 => "11110110101001110", 19 => "11101100000111010", 
    20 => "11111000111001110", 21 => "00000000111000001", 
    22 => "11111110000111001", 23 => "00000010011110000", 
    24 => "11111001001011011", 25 => "00001111100100100", 
    26 => "00000101100101111", 27 => "11110010010000100", 
    28 => "11110011011010101", 29 => "11010101101011010", 
    30 => "11010111000100000", 31 => "00000011110001101", 
    32 => "11110110111011010", 33 => "00000100010000000", 
    34 => "11111000010010101", 35 => "11111110001110101", 
    36 => "11111011110010110", 37 => "11111010011100001", 
    38 => "11110011001010011", 39 => "00001100011101100", 
    40 => "00001001101001110", 41 => "00000010101010000", 
    42 => "00001001101001011", 43 => "11111001011101001", 
    44 => "00010011001011011", 45 => "11110001110000101", 
    46 => "11101101111101100", 47 => "11101010001000000", 
    48 => "11111100010011100", 49 => "11111000011010011", 
    50 => "11111101010111110", 51 => "11111010011000100", 
    52 => "11111110101010010", 53 => "11101111101011001", 
    54 => "11111100100110101", 55 => "11110111110011111", 
    56 => "00000000011101110", 57 => "00000001010001011", 
    58 => "11110110001001011", 59 => "11110100010111100", 
    60 => "11111101000111000", 61 => "00000100000011010", 
    62 => "11111110100110100", 63 => "11101100101011010", 
    64 => "00001110011110010", 65 => "11111111011011010", 
    66 => "11111110101010001", 67 => "11111100001101011", 
    68 => "00010110100010000", 69 => "11111001011000100", 
    70 => "11101111001001001", 71 => "11100100110100110", 
    72 => "00001001110110010", 73 => "00011000010001001", 
    74 => "11100111111100011", 75 => "11111111110000110", 
    76 => "00000110111100100", 77 => "11111000000011001", 
    78 => "11111000010011010", 79 => "11111111011110001", 
    80 => "11111111011111000", 81 => "11111100111101101", 
    82 => "11110010110100011", 83 => "11111001110000000", 
    84 => "11111010001011010", 85 => "11111001101110100", 
    86 => "11110111101010101", 87 => "00011110010100100", 
    88 => "11111001111001010", 89 => "11101111000010100", 
    90 => "00000010111110100", 91 => "11110110110010110", 
    92 => "11110010101011110", 93 => "00001000111000000", 
    94 => "00001010111001010", 95 => "11111000101011001", 
    96 => "11111101110011001", 97 => "11110100001011110", 
    98 => "00001010001101111", 99 => "00000001001100100", 
    100 => "11100001011010111", 101 => "11110001001110011", 
    102 => "11111000010011100", 103 => "11111110101000011", 
    104 => "00001011001100100", 105 => "00001101000000000", 
    106 => "00000010111011100", 107 => "11111001001010110", 
    108 => "11010111110010111", 109 => "11111000011001000", 
    110 => "11101011101000000", 111 => "11111110100010011", 
    112 => "00000000100101011", 113 => "10111011100111000", 
    114 => "00000011011101101", 115 => "00001111000100110", 
    116 => "11111111011111101", 117 => "11110101100011000", 
    118 => "11111111001100101", 119 => "00000001001110111", 
    120 => "11110111000001001", 121 => "11111010101000101", 
    122 => "11111100100011110", 123 => "11111101100110000", 
    124 => "00000000001000001", 125 => "00000000100110101", 
    126 => "11111111100100011", 127 => "00000110000110110" );


begin 


memory_access_guard_0: process (address0) 
begin
      address0_tmp <= address0;
--synthesis translate_off
      if (CONV_INTEGER(address0) > AddressRange-1) then
           address0_tmp <= (others => '0');
      else 
           address0_tmp <= address0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(address0_tmp)); 
        end if;
    end if;
end process;

end rtl;

