-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
-- Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity master_fix_secondKernel_f_V_3 is 
    generic(
             DataWidth     : integer := 17; 
             AddressWidth     : integer := 7; 
             AddressRange    : integer := 128
    ); 
    port (
          address0      : in std_logic_vector(AddressWidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DataWidth-1 downto 0);
          reset     : in std_logic;
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of master_fix_secondKernel_f_V_3 is 

signal address0_tmp : std_logic_vector(AddressWidth-1 downto 0); 
type mem_array is array (0 to AddressRange-1) of std_logic_vector (DataWidth-1 downto 0); 
signal mem : mem_array := (
    0 => "00000111011000111", 1 => "00000011100001111", 
    2 => "00000100111001001", 3 => "00000010000011010", 
    4 => "00000000001010100", 5 => "11111010101100000", 
    6 => "11110101000000001", 7 => "00000010000100110", 
    8 => "11111011011101100", 9 => "11111111001110101", 
    10 => "11111111001101100", 11 => "00000001111100011", 
    12 => "00001010110111110", 13 => "11111110011100100", 
    14 => "11111000000010010", 15 => "11111011110010110", 
    16 => "00100111011101011", 17 => "00000011100001101", 
    18 => "11110110100111011", 19 => "11110010111101100", 
    20 => "00001110001110110", 21 => "11111110111010101", 
    22 => "11111110111000000", 23 => "00000110101100010", 
    24 => "11110111111110110", 25 => "10011111100101110", 
    26 => "11111100000010111", 27 => "00000100000010001", 
    28 => "11110000101011011", 29 => "11010100011110010", 
    30 => "11010001001100011", 31 => "11111000110011110", 
    32 => "11111001011001110", 33 => "11011011010000110", 
    34 => "11110100011000101", 35 => "00000011100011000", 
    36 => "11100111100110001", 37 => "11110101010000001", 
    38 => "11110000100101111", 39 => "00001110001100111", 
    40 => "00000010000001000", 41 => "11111011011111010", 
    42 => "11111001100011110", 43 => "00000010000000100", 
    44 => "00001000010001000", 45 => "00010000010000001", 
    46 => "00011110100000111", 47 => "11110001011111111", 
    48 => "11111010100110110", 49 => "00000010100000001", 
    50 => "11110101101110100", 51 => "11110101011111011", 
    52 => "11110101010010100", 53 => "11110111100110111", 
    54 => "11111010011010011", 55 => "00000000000100000", 
    56 => "00000001100100111", 57 => "00000100010001000", 
    58 => "11111101110100110", 59 => "11110100001111100", 
    60 => "00000001000001101", 61 => "11111101011100011", 
    62 => "00000000011110111", 63 => "11100111100010110", 
    64 => "00000100000000110", 65 => "11110011001010011", 
    66 => "00001101100010010", 67 => "11110111000100000", 
    68 => "00011001110110010", 69 => "11101001100001110", 
    70 => "11101010001111110", 71 => "11010100110101110", 
    72 => "00000100100000010", 73 => "00001101100101001", 
    74 => "11101000001010011", 75 => "11111110110000010", 
    76 => "00000110111010010", 77 => "11111100001100000", 
    78 => "00000000011010110", 79 => "11111110000011011", 
    80 => "11111100010111001", 81 => "11100110010111010", 
    82 => "00000000110000000", 83 => "00000111100100000", 
    84 => "00000101010100111", 85 => "11110110000001010", 
    86 => "11110110101101000", 87 => "11101110110000111", 
    88 => "11111001111000010", 89 => "11110101010100100", 
    90 => "11111001001100100", 91 => "11110000110110101", 
    92 => "11110111000000011", 93 => "00001000110011000", 
    94 => "00001101111011010", 95 => "11110111001010010", 
    96 => "11111110111010110", 97 => "11101110011001111", 
    98 => "11111100000110011", 99 => "11111010010001111", 
    100 => "11110110010100110", 101 => "00001010111000011", 
    102 => "00001111000110100", 103 => "11111110100000110", 
    104 => "11111001010110100", 105 => "11010000110001100", 
    106 => "00000100001010011", 107 => "00000101111000101", 
    108 => "11000000000011001", 109 => "11000101100011011", 
    110 => "11000101100001010", 111 => "00000001001111111", 
    112 => "11111001111001101", 113 => "11000011111111001", 
    114 => "00000000011010110", 115 => "00000111011001010", 
    116 => "11111111010111001", 117 => "11101111011111111", 
    118 => "00000001101000000", 119 => "11110111100000000", 
    120 => "11111100000011101", 121 => "11110011101000001", 
    122 => "00000111000011110", 123 => "00001001001111011", 
    124 => "11111000101010011", 125 => "11111100101001111", 
    126 => "00000101100010001", 127 => "00000101001011100" );


begin 


memory_access_guard_0: process (address0) 
begin
      address0_tmp <= address0;
--synthesis translate_off
      if (CONV_INTEGER(address0) > AddressRange-1) then
           address0_tmp <= (others => '0');
      else 
           address0_tmp <= address0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(address0_tmp)); 
        end if;
    end if;
end process;

end rtl;

