-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
-- Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity master_fix_secondKernel_f_V_1 is 
    generic(
             DataWidth     : integer := 16; 
             AddressWidth     : integer := 7; 
             AddressRange    : integer := 128
    ); 
    port (
          address0      : in std_logic_vector(AddressWidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DataWidth-1 downto 0);
          reset     : in std_logic;
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of master_fix_secondKernel_f_V_1 is 

signal address0_tmp : std_logic_vector(AddressWidth-1 downto 0); 
type mem_array is array (0 to AddressRange-1) of std_logic_vector (DataWidth-1 downto 0); 
signal mem : mem_array := (
    0 => "1110010101000110", 1 => "0011101101000011", 2 => "1101111111100001", 
    3 => "0000000000101100", 4 => "0000101001101111", 5 => "1110010101010101", 
    6 => "1100100011100111", 7 => "0010111110011011", 8 => "1111110110001101", 
    9 => "0010110000000111", 10 => "1111011101111110", 11 => "0011000101101000", 
    12 => "0000001010111101", 13 => "1111101000110011", 14 => "1111101111011101", 
    15 => "1110110010000000", 16 => "0000100100110010", 17 => "1111001110111010", 
    18 => "1110000110100100", 19 => "1101010011001010", 20 => "1110101111011100", 
    21 => "1111101011111011", 22 => "0000100100001111", 23 => "0000110111010100", 
    24 => "0001010000010101", 25 => "0010010101001000", 26 => "1111111011011100", 
    27 => "0000110011110010", 28 => "1110101100000000", 29 => "1111000101110000", 
    30 => "1101111100110101", 31 => "0000111100110100", 32 => "1110111000110101", 
    33 => "0000011111011000", 34 => "1111010111011001", 35 => "1110101000110010", 
    36 => "0001000011111111", 37 => "1111010100111101", 38 => "1111000010011101", 
    39 => "1111010100111101", 40 => "0000001000101111", 41 => "0010001101011111", 
    42 => "0000100101010100", 43 => "1110011010000001", 44 => "1110000010100110", 
    45 => "1100110100101101", 46 => "1011110111111000", 47 => "0010000010101101", 
    48 => "0001100001011110", 49 => "0000010101100100", 50 => "1111111111010010", 
    51 => "1111100101100011", 52 => "0000101010100011", 53 => "1110000011010000", 
    54 => "1110000111001010", 55 => "1111101010100010", 56 => "1111000011101001", 
    57 => "0000100000100110", 58 => "0000011101001010", 59 => "1110101101001110", 
    60 => "0000101011101011", 61 => "0011000001001000", 62 => "1111100100010010", 
    63 => "1101011001101010", 64 => "0001101001101001", 65 => "0000101000001101", 
    66 => "1101110011111001", 67 => "1111001010011011", 68 => "1110001110010001", 
    69 => "1111110010011001", 70 => "0000010110111101", 71 => "1110100010000011", 
    72 => "0001010111010101", 73 => "0100000010001101", 74 => "1101110000000101", 
    75 => "0001010010011010", 76 => "1111110011110110", 77 => "1110101011010001", 
    78 => "1110001110011100", 79 => "1111101011101000", 80 => "1111110010010000", 
    81 => "1111001000111000", 82 => "1111100001010010", 83 => "1101010111010111", 
    84 => "0001100101010111", 85 => "0000100110010000", 86 => "0000010111001111", 
    87 => "0000011100111110", 88 => "0000001010110001", 89 => "1101110010111111", 
    90 => "0000011000010101", 91 => "0000010001110010", 92 => "0001101101011110", 
    93 => "1110110011100010", 94 => "1111111100111000", 95 => "1110111010001110", 
    96 => "1111100111010110", 97 => "1111100110111000", 98 => "0000001000110010", 
    99 => "0001000100000100", 100 => "1000100111100001", 101 => "1110111001111011", 
    102 => "1111111110101110", 103 => "0000000110011110", 104 => "1111010100101011", 
    105 => "0001101110000100", 106 => "1111101011011010", 107 => "1110100100100110", 
    108 => "1110101100011001", 109 => "0000000001111011", 110 => "1111101010011010", 
    111 => "0000000110001110", 112 => "0000011001110101", 113 => "0000100011010100", 
    114 => "1110001011100100", 115 => "1110000001100100", 116 => "1110001110011011", 
    117 => "1110111110110010", 118 => "1110100100111010", 119 => "0000010110110011", 
    120 => "1111000111110111", 121 => "0000001000111101", 122 => "0000101110011000", 
    123 => "0000011010000001", 124 => "0001011001010111", 125 => "0010000111001010", 
    126 => "0001000100110000", 127 => "1110111010110100" );


begin 


memory_access_guard_0: process (address0) 
begin
      address0_tmp <= address0;
--synthesis translate_off
      if (CONV_INTEGER(address0) > AddressRange-1) then
           address0_tmp <= (others => '0');
      else 
           address0_tmp <= address0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(address0_tmp)); 
        end if;
    end if;
end process;

end rtl;

