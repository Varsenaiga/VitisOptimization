-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
-- Version: 2021.1
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity master_fix_convolution1_fix_Pipeline_VITIS_LOOP_67_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_r_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    input_r_ce0 : OUT STD_LOGIC;
    input_r_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    tmp1_V_11_0_out : OUT STD_LOGIC_VECTOR (11 downto 0);
    tmp1_V_11_0_out_ap_vld : OUT STD_LOGIC;
    tmp1_V_10_0_out : OUT STD_LOGIC_VECTOR (11 downto 0);
    tmp1_V_10_0_out_ap_vld : OUT STD_LOGIC;
    tmp1_V_11_4_out : OUT STD_LOGIC_VECTOR (11 downto 0);
    tmp1_V_11_4_out_ap_vld : OUT STD_LOGIC;
    tmp1_V_11_6_out : OUT STD_LOGIC_VECTOR (11 downto 0);
    tmp1_V_11_6_out_ap_vld : OUT STD_LOGIC;
    tmp1_V_5_0_out : OUT STD_LOGIC_VECTOR (11 downto 0);
    tmp1_V_5_0_out_ap_vld : OUT STD_LOGIC;
    tmp1_V_4_0_out : OUT STD_LOGIC_VECTOR (11 downto 0);
    tmp1_V_4_0_out_ap_vld : OUT STD_LOGIC;
    tmp1_V_2_0_out : OUT STD_LOGIC_VECTOR (11 downto 0);
    tmp1_V_2_0_out_ap_vld : OUT STD_LOGIC;
    tmp1_V_1_0_out : OUT STD_LOGIC_VECTOR (11 downto 0);
    tmp1_V_1_0_out_ap_vld : OUT STD_LOGIC;
    tmp1_V_0_0_out : OUT STD_LOGIC_VECTOR (11 downto 0);
    tmp1_V_0_0_out_ap_vld : OUT STD_LOGIC;
    tmp1_V_11_9_out : OUT STD_LOGIC_VECTOR (11 downto 0);
    tmp1_V_11_9_out_ap_vld : OUT STD_LOGIC;
    tmp1_V_11_11_out : OUT STD_LOGIC_VECTOR (11 downto 0);
    tmp1_V_11_11_out_ap_vld : OUT STD_LOGIC;
    tmp2_V_11_0_out : OUT STD_LOGIC_VECTOR (11 downto 0);
    tmp2_V_11_0_out_ap_vld : OUT STD_LOGIC;
    tmp2_V_10_0_out : OUT STD_LOGIC_VECTOR (11 downto 0);
    tmp2_V_10_0_out_ap_vld : OUT STD_LOGIC;
    tmp2_V_9_0_out : OUT STD_LOGIC_VECTOR (11 downto 0);
    tmp2_V_9_0_out_ap_vld : OUT STD_LOGIC;
    tmp2_V_8_0_out : OUT STD_LOGIC_VECTOR (11 downto 0);
    tmp2_V_8_0_out_ap_vld : OUT STD_LOGIC;
    tmp2_V_7_0_out : OUT STD_LOGIC_VECTOR (11 downto 0);
    tmp2_V_7_0_out_ap_vld : OUT STD_LOGIC;
    tmp2_V_6_0_out : OUT STD_LOGIC_VECTOR (11 downto 0);
    tmp2_V_6_0_out_ap_vld : OUT STD_LOGIC;
    tmp2_V_5_0_out : OUT STD_LOGIC_VECTOR (11 downto 0);
    tmp2_V_5_0_out_ap_vld : OUT STD_LOGIC;
    tmp2_V_3_0_out : OUT STD_LOGIC_VECTOR (11 downto 0);
    tmp2_V_3_0_out_ap_vld : OUT STD_LOGIC;
    tmp2_V_2_0_out : OUT STD_LOGIC_VECTOR (11 downto 0);
    tmp2_V_2_0_out_ap_vld : OUT STD_LOGIC;
    tmp2_V_1_0_out : OUT STD_LOGIC_VECTOR (11 downto 0);
    tmp2_V_1_0_out_ap_vld : OUT STD_LOGIC;
    tmp2_V_0_0_out : OUT STD_LOGIC_VECTOR (11 downto 0);
    tmp2_V_0_0_out_ap_vld : OUT STD_LOGIC );
end;


architecture behav of master_fix_convolution1_fix_Pipeline_VITIS_LOOP_67_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv16_FFFF : STD_LOGIC_VECTOR (15 downto 0) := "1111111111111111";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv17_1 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv7_7F : STD_LOGIC_VECTOR (6 downto 0) := "1111111";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv4_6 : STD_LOGIC_VECTOR (3 downto 0) := "0110";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv12_FF9 : STD_LOGIC_VECTOR (11 downto 0) := "111111111001";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln67_fu_396_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal r_3_reg_1624 : STD_LOGIC_VECTOR (2 downto 0);
    signal r_3_reg_1624_pp0_iter1_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln67_reg_1633 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_fu_420_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal j_reg_1637 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln72_1_fu_1059_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal r_fu_116 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_r_3 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln67_fu_402_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp2_V_0_0_fu_120 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp2_V_0_1_fu_547_p18 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp2_V_1_0_fu_124 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp2_V_1_1_fu_585_p18 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp2_V_2_0_fu_128 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp2_V_2_1_fu_623_p18 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp2_V_3_0_fu_132 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp2_V_3_1_fu_661_p18 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp2_V_5_0_fu_136 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp2_V_5_1_fu_699_p18 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp2_V_6_0_fu_140 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp2_V_6_1_fu_737_p18 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp2_V_7_0_fu_144 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp2_V_7_1_fu_775_p18 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp2_V_8_0_fu_148 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp2_V_8_1_fu_813_p18 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp2_V_9_0_fu_152 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp2_V_9_1_fu_851_p18 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp2_V_10_0_fu_156 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp2_V_10_1_fu_889_p18 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp2_V_11_0_fu_160 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp2_V_11_1_fu_927_p18 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp1_V_11_2_fu_164 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp1_V_11_20_fu_1304_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp1_V_11_9_fu_168 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp1_V_11_19_fu_1296_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp1_V_0_0_fu_172 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln71_8_fu_1204_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp1_V_1_0_fu_176 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln71_7_fu_1196_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp1_V_2_0_fu_180 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln71_5_fu_1180_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp1_V_4_0_fu_184 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln71_3_fu_1164_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp1_V_5_0_fu_188 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln71_1_fu_1148_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp1_V_11_6_fu_192 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp1_V_11_18_fu_1272_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp1_V_11_4_fu_196 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp1_V_11_16_fu_1256_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp1_V_11_11_fu_200 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp1_V_11_15_fu_1240_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp1_V_11_13_fu_204 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp1_V_11_fu_1224_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal i_fu_208 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_sig_allocacmp_i_load : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln69_fu_491_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln69_fu_428_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal empty_fu_392_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln68_fu_408_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln68_fu_414_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal sext_ln69_fu_437_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln69_fu_441_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln69_fu_437_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln69_fu_445_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal trunc_ln69_fu_441_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal xor_ln69_fu_463_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_and_t_cast_fu_469_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln69_1_fu_459_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_fu_451_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln69_fu_477_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_s_fu_483_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln71_fu_537_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln72_fu_541_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln72_1_fu_1032_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_46_cast_fu_1036_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln72_fu_1028_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln72_fu_1044_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln72_fu_1050_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln72_1_fu_1053_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln71_4_fu_1117_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln71_3_fu_1112_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln71_2_fu_1107_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln71_1_fu_1102_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln71_fu_1097_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln71_fu_1122_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln71_1_fu_1128_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln71_2_fu_1142_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln71_fu_1134_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln71_2_fu_1156_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln71_4_fu_1172_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln71_6_fu_1188_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp1_V_11_21_fu_1212_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln72_fu_1216_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln72_2_fu_1232_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln72_4_fu_1248_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp1_V_11_17_fu_1264_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln72_8_fu_1280_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln72_9_fu_1288_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_condition_818 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component master_fix_mux_164_12_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        din9_WIDTH : INTEGER;
        din10_WIDTH : INTEGER;
        din11_WIDTH : INTEGER;
        din12_WIDTH : INTEGER;
        din13_WIDTH : INTEGER;
        din14_WIDTH : INTEGER;
        din15_WIDTH : INTEGER;
        din16_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (11 downto 0);
        din1 : IN STD_LOGIC_VECTOR (11 downto 0);
        din2 : IN STD_LOGIC_VECTOR (11 downto 0);
        din3 : IN STD_LOGIC_VECTOR (11 downto 0);
        din4 : IN STD_LOGIC_VECTOR (11 downto 0);
        din5 : IN STD_LOGIC_VECTOR (11 downto 0);
        din6 : IN STD_LOGIC_VECTOR (11 downto 0);
        din7 : IN STD_LOGIC_VECTOR (11 downto 0);
        din8 : IN STD_LOGIC_VECTOR (11 downto 0);
        din9 : IN STD_LOGIC_VECTOR (11 downto 0);
        din10 : IN STD_LOGIC_VECTOR (11 downto 0);
        din11 : IN STD_LOGIC_VECTOR (11 downto 0);
        din12 : IN STD_LOGIC_VECTOR (11 downto 0);
        din13 : IN STD_LOGIC_VECTOR (11 downto 0);
        din14 : IN STD_LOGIC_VECTOR (11 downto 0);
        din15 : IN STD_LOGIC_VECTOR (11 downto 0);
        din16 : IN STD_LOGIC_VECTOR (3 downto 0);
        dout : OUT STD_LOGIC_VECTOR (11 downto 0) );
    end component;


    component master_fix_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mux_164_12_1_1_U1 : component master_fix_mux_164_12_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 12,
        din1_WIDTH => 12,
        din2_WIDTH => 12,
        din3_WIDTH => 12,
        din4_WIDTH => 12,
        din5_WIDTH => 12,
        din6_WIDTH => 12,
        din7_WIDTH => 12,
        din8_WIDTH => 12,
        din9_WIDTH => 12,
        din10_WIDTH => 12,
        din11_WIDTH => 12,
        din12_WIDTH => 12,
        din13_WIDTH => 12,
        din14_WIDTH => 12,
        din15_WIDTH => 12,
        din16_WIDTH => 4,
        dout_WIDTH => 12)
    port map (
        din0 => ap_const_lv12_0,
        din1 => tmp2_V_0_0_fu_120,
        din2 => tmp2_V_0_0_fu_120,
        din3 => tmp2_V_0_0_fu_120,
        din4 => tmp2_V_0_0_fu_120,
        din5 => tmp2_V_0_0_fu_120,
        din6 => tmp2_V_0_0_fu_120,
        din7 => tmp2_V_0_0_fu_120,
        din8 => tmp2_V_0_0_fu_120,
        din9 => tmp2_V_0_0_fu_120,
        din10 => tmp2_V_0_0_fu_120,
        din11 => tmp2_V_0_0_fu_120,
        din12 => tmp2_V_0_0_fu_120,
        din13 => tmp2_V_0_0_fu_120,
        din14 => tmp2_V_0_0_fu_120,
        din15 => tmp2_V_0_0_fu_120,
        din16 => zext_ln71_fu_537_p1,
        dout => tmp2_V_0_1_fu_547_p18);

    mux_164_12_1_1_U2 : component master_fix_mux_164_12_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 12,
        din1_WIDTH => 12,
        din2_WIDTH => 12,
        din3_WIDTH => 12,
        din4_WIDTH => 12,
        din5_WIDTH => 12,
        din6_WIDTH => 12,
        din7_WIDTH => 12,
        din8_WIDTH => 12,
        din9_WIDTH => 12,
        din10_WIDTH => 12,
        din11_WIDTH => 12,
        din12_WIDTH => 12,
        din13_WIDTH => 12,
        din14_WIDTH => 12,
        din15_WIDTH => 12,
        din16_WIDTH => 4,
        dout_WIDTH => 12)
    port map (
        din0 => tmp2_V_1_0_fu_124,
        din1 => ap_const_lv12_0,
        din2 => tmp2_V_1_0_fu_124,
        din3 => tmp2_V_1_0_fu_124,
        din4 => tmp2_V_1_0_fu_124,
        din5 => tmp2_V_1_0_fu_124,
        din6 => tmp2_V_1_0_fu_124,
        din7 => tmp2_V_1_0_fu_124,
        din8 => tmp2_V_1_0_fu_124,
        din9 => tmp2_V_1_0_fu_124,
        din10 => tmp2_V_1_0_fu_124,
        din11 => tmp2_V_1_0_fu_124,
        din12 => tmp2_V_1_0_fu_124,
        din13 => tmp2_V_1_0_fu_124,
        din14 => tmp2_V_1_0_fu_124,
        din15 => tmp2_V_1_0_fu_124,
        din16 => zext_ln71_fu_537_p1,
        dout => tmp2_V_1_1_fu_585_p18);

    mux_164_12_1_1_U3 : component master_fix_mux_164_12_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 12,
        din1_WIDTH => 12,
        din2_WIDTH => 12,
        din3_WIDTH => 12,
        din4_WIDTH => 12,
        din5_WIDTH => 12,
        din6_WIDTH => 12,
        din7_WIDTH => 12,
        din8_WIDTH => 12,
        din9_WIDTH => 12,
        din10_WIDTH => 12,
        din11_WIDTH => 12,
        din12_WIDTH => 12,
        din13_WIDTH => 12,
        din14_WIDTH => 12,
        din15_WIDTH => 12,
        din16_WIDTH => 4,
        dout_WIDTH => 12)
    port map (
        din0 => tmp2_V_2_0_fu_128,
        din1 => tmp2_V_2_0_fu_128,
        din2 => ap_const_lv12_0,
        din3 => tmp2_V_2_0_fu_128,
        din4 => tmp2_V_2_0_fu_128,
        din5 => tmp2_V_2_0_fu_128,
        din6 => tmp2_V_2_0_fu_128,
        din7 => tmp2_V_2_0_fu_128,
        din8 => tmp2_V_2_0_fu_128,
        din9 => tmp2_V_2_0_fu_128,
        din10 => tmp2_V_2_0_fu_128,
        din11 => tmp2_V_2_0_fu_128,
        din12 => tmp2_V_2_0_fu_128,
        din13 => tmp2_V_2_0_fu_128,
        din14 => tmp2_V_2_0_fu_128,
        din15 => tmp2_V_2_0_fu_128,
        din16 => zext_ln71_fu_537_p1,
        dout => tmp2_V_2_1_fu_623_p18);

    mux_164_12_1_1_U4 : component master_fix_mux_164_12_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 12,
        din1_WIDTH => 12,
        din2_WIDTH => 12,
        din3_WIDTH => 12,
        din4_WIDTH => 12,
        din5_WIDTH => 12,
        din6_WIDTH => 12,
        din7_WIDTH => 12,
        din8_WIDTH => 12,
        din9_WIDTH => 12,
        din10_WIDTH => 12,
        din11_WIDTH => 12,
        din12_WIDTH => 12,
        din13_WIDTH => 12,
        din14_WIDTH => 12,
        din15_WIDTH => 12,
        din16_WIDTH => 4,
        dout_WIDTH => 12)
    port map (
        din0 => tmp2_V_3_0_fu_132,
        din1 => tmp2_V_3_0_fu_132,
        din2 => tmp2_V_3_0_fu_132,
        din3 => ap_const_lv12_0,
        din4 => tmp2_V_3_0_fu_132,
        din5 => tmp2_V_3_0_fu_132,
        din6 => tmp2_V_3_0_fu_132,
        din7 => tmp2_V_3_0_fu_132,
        din8 => tmp2_V_3_0_fu_132,
        din9 => tmp2_V_3_0_fu_132,
        din10 => tmp2_V_3_0_fu_132,
        din11 => tmp2_V_3_0_fu_132,
        din12 => tmp2_V_3_0_fu_132,
        din13 => tmp2_V_3_0_fu_132,
        din14 => tmp2_V_3_0_fu_132,
        din15 => tmp2_V_3_0_fu_132,
        din16 => zext_ln71_fu_537_p1,
        dout => tmp2_V_3_1_fu_661_p18);

    mux_164_12_1_1_U5 : component master_fix_mux_164_12_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 12,
        din1_WIDTH => 12,
        din2_WIDTH => 12,
        din3_WIDTH => 12,
        din4_WIDTH => 12,
        din5_WIDTH => 12,
        din6_WIDTH => 12,
        din7_WIDTH => 12,
        din8_WIDTH => 12,
        din9_WIDTH => 12,
        din10_WIDTH => 12,
        din11_WIDTH => 12,
        din12_WIDTH => 12,
        din13_WIDTH => 12,
        din14_WIDTH => 12,
        din15_WIDTH => 12,
        din16_WIDTH => 4,
        dout_WIDTH => 12)
    port map (
        din0 => tmp2_V_5_0_fu_136,
        din1 => tmp2_V_5_0_fu_136,
        din2 => tmp2_V_5_0_fu_136,
        din3 => tmp2_V_5_0_fu_136,
        din4 => tmp2_V_5_0_fu_136,
        din5 => ap_const_lv12_0,
        din6 => ap_const_lv12_0,
        din7 => ap_const_lv12_0,
        din8 => ap_const_lv12_0,
        din9 => ap_const_lv12_0,
        din10 => ap_const_lv12_0,
        din11 => ap_const_lv12_0,
        din12 => ap_const_lv12_0,
        din13 => ap_const_lv12_0,
        din14 => ap_const_lv12_0,
        din15 => ap_const_lv12_0,
        din16 => zext_ln71_fu_537_p1,
        dout => tmp2_V_5_1_fu_699_p18);

    mux_164_12_1_1_U6 : component master_fix_mux_164_12_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 12,
        din1_WIDTH => 12,
        din2_WIDTH => 12,
        din3_WIDTH => 12,
        din4_WIDTH => 12,
        din5_WIDTH => 12,
        din6_WIDTH => 12,
        din7_WIDTH => 12,
        din8_WIDTH => 12,
        din9_WIDTH => 12,
        din10_WIDTH => 12,
        din11_WIDTH => 12,
        din12_WIDTH => 12,
        din13_WIDTH => 12,
        din14_WIDTH => 12,
        din15_WIDTH => 12,
        din16_WIDTH => 4,
        dout_WIDTH => 12)
    port map (
        din0 => tmp2_V_6_0_fu_140,
        din1 => tmp2_V_6_0_fu_140,
        din2 => tmp2_V_6_0_fu_140,
        din3 => tmp2_V_6_0_fu_140,
        din4 => tmp2_V_6_0_fu_140,
        din5 => tmp2_V_6_0_fu_140,
        din6 => ap_const_lv12_0,
        din7 => tmp2_V_6_0_fu_140,
        din8 => tmp2_V_6_0_fu_140,
        din9 => tmp2_V_6_0_fu_140,
        din10 => tmp2_V_6_0_fu_140,
        din11 => tmp2_V_6_0_fu_140,
        din12 => tmp2_V_6_0_fu_140,
        din13 => tmp2_V_6_0_fu_140,
        din14 => tmp2_V_6_0_fu_140,
        din15 => tmp2_V_6_0_fu_140,
        din16 => add_ln72_fu_541_p2,
        dout => tmp2_V_6_1_fu_737_p18);

    mux_164_12_1_1_U7 : component master_fix_mux_164_12_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 12,
        din1_WIDTH => 12,
        din2_WIDTH => 12,
        din3_WIDTH => 12,
        din4_WIDTH => 12,
        din5_WIDTH => 12,
        din6_WIDTH => 12,
        din7_WIDTH => 12,
        din8_WIDTH => 12,
        din9_WIDTH => 12,
        din10_WIDTH => 12,
        din11_WIDTH => 12,
        din12_WIDTH => 12,
        din13_WIDTH => 12,
        din14_WIDTH => 12,
        din15_WIDTH => 12,
        din16_WIDTH => 4,
        dout_WIDTH => 12)
    port map (
        din0 => tmp2_V_7_0_fu_144,
        din1 => tmp2_V_7_0_fu_144,
        din2 => tmp2_V_7_0_fu_144,
        din3 => tmp2_V_7_0_fu_144,
        din4 => tmp2_V_7_0_fu_144,
        din5 => tmp2_V_7_0_fu_144,
        din6 => tmp2_V_7_0_fu_144,
        din7 => ap_const_lv12_0,
        din8 => tmp2_V_7_0_fu_144,
        din9 => tmp2_V_7_0_fu_144,
        din10 => tmp2_V_7_0_fu_144,
        din11 => tmp2_V_7_0_fu_144,
        din12 => tmp2_V_7_0_fu_144,
        din13 => tmp2_V_7_0_fu_144,
        din14 => tmp2_V_7_0_fu_144,
        din15 => tmp2_V_7_0_fu_144,
        din16 => add_ln72_fu_541_p2,
        dout => tmp2_V_7_1_fu_775_p18);

    mux_164_12_1_1_U8 : component master_fix_mux_164_12_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 12,
        din1_WIDTH => 12,
        din2_WIDTH => 12,
        din3_WIDTH => 12,
        din4_WIDTH => 12,
        din5_WIDTH => 12,
        din6_WIDTH => 12,
        din7_WIDTH => 12,
        din8_WIDTH => 12,
        din9_WIDTH => 12,
        din10_WIDTH => 12,
        din11_WIDTH => 12,
        din12_WIDTH => 12,
        din13_WIDTH => 12,
        din14_WIDTH => 12,
        din15_WIDTH => 12,
        din16_WIDTH => 4,
        dout_WIDTH => 12)
    port map (
        din0 => tmp2_V_8_0_fu_148,
        din1 => tmp2_V_8_0_fu_148,
        din2 => tmp2_V_8_0_fu_148,
        din3 => tmp2_V_8_0_fu_148,
        din4 => tmp2_V_8_0_fu_148,
        din5 => tmp2_V_8_0_fu_148,
        din6 => tmp2_V_8_0_fu_148,
        din7 => tmp2_V_8_0_fu_148,
        din8 => ap_const_lv12_0,
        din9 => tmp2_V_8_0_fu_148,
        din10 => tmp2_V_8_0_fu_148,
        din11 => tmp2_V_8_0_fu_148,
        din12 => tmp2_V_8_0_fu_148,
        din13 => tmp2_V_8_0_fu_148,
        din14 => tmp2_V_8_0_fu_148,
        din15 => tmp2_V_8_0_fu_148,
        din16 => add_ln72_fu_541_p2,
        dout => tmp2_V_8_1_fu_813_p18);

    mux_164_12_1_1_U9 : component master_fix_mux_164_12_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 12,
        din1_WIDTH => 12,
        din2_WIDTH => 12,
        din3_WIDTH => 12,
        din4_WIDTH => 12,
        din5_WIDTH => 12,
        din6_WIDTH => 12,
        din7_WIDTH => 12,
        din8_WIDTH => 12,
        din9_WIDTH => 12,
        din10_WIDTH => 12,
        din11_WIDTH => 12,
        din12_WIDTH => 12,
        din13_WIDTH => 12,
        din14_WIDTH => 12,
        din15_WIDTH => 12,
        din16_WIDTH => 4,
        dout_WIDTH => 12)
    port map (
        din0 => tmp2_V_9_0_fu_152,
        din1 => tmp2_V_9_0_fu_152,
        din2 => tmp2_V_9_0_fu_152,
        din3 => tmp2_V_9_0_fu_152,
        din4 => tmp2_V_9_0_fu_152,
        din5 => tmp2_V_9_0_fu_152,
        din6 => tmp2_V_9_0_fu_152,
        din7 => tmp2_V_9_0_fu_152,
        din8 => tmp2_V_9_0_fu_152,
        din9 => ap_const_lv12_0,
        din10 => tmp2_V_9_0_fu_152,
        din11 => tmp2_V_9_0_fu_152,
        din12 => tmp2_V_9_0_fu_152,
        din13 => tmp2_V_9_0_fu_152,
        din14 => tmp2_V_9_0_fu_152,
        din15 => tmp2_V_9_0_fu_152,
        din16 => add_ln72_fu_541_p2,
        dout => tmp2_V_9_1_fu_851_p18);

    mux_164_12_1_1_U10 : component master_fix_mux_164_12_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 12,
        din1_WIDTH => 12,
        din2_WIDTH => 12,
        din3_WIDTH => 12,
        din4_WIDTH => 12,
        din5_WIDTH => 12,
        din6_WIDTH => 12,
        din7_WIDTH => 12,
        din8_WIDTH => 12,
        din9_WIDTH => 12,
        din10_WIDTH => 12,
        din11_WIDTH => 12,
        din12_WIDTH => 12,
        din13_WIDTH => 12,
        din14_WIDTH => 12,
        din15_WIDTH => 12,
        din16_WIDTH => 4,
        dout_WIDTH => 12)
    port map (
        din0 => tmp2_V_10_0_fu_156,
        din1 => tmp2_V_10_0_fu_156,
        din2 => tmp2_V_10_0_fu_156,
        din3 => tmp2_V_10_0_fu_156,
        din4 => tmp2_V_10_0_fu_156,
        din5 => tmp2_V_10_0_fu_156,
        din6 => tmp2_V_10_0_fu_156,
        din7 => tmp2_V_10_0_fu_156,
        din8 => tmp2_V_10_0_fu_156,
        din9 => tmp2_V_10_0_fu_156,
        din10 => ap_const_lv12_0,
        din11 => tmp2_V_10_0_fu_156,
        din12 => tmp2_V_10_0_fu_156,
        din13 => tmp2_V_10_0_fu_156,
        din14 => tmp2_V_10_0_fu_156,
        din15 => tmp2_V_10_0_fu_156,
        din16 => add_ln72_fu_541_p2,
        dout => tmp2_V_10_1_fu_889_p18);

    mux_164_12_1_1_U11 : component master_fix_mux_164_12_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 12,
        din1_WIDTH => 12,
        din2_WIDTH => 12,
        din3_WIDTH => 12,
        din4_WIDTH => 12,
        din5_WIDTH => 12,
        din6_WIDTH => 12,
        din7_WIDTH => 12,
        din8_WIDTH => 12,
        din9_WIDTH => 12,
        din10_WIDTH => 12,
        din11_WIDTH => 12,
        din12_WIDTH => 12,
        din13_WIDTH => 12,
        din14_WIDTH => 12,
        din15_WIDTH => 12,
        din16_WIDTH => 4,
        dout_WIDTH => 12)
    port map (
        din0 => ap_const_lv12_0,
        din1 => ap_const_lv12_0,
        din2 => ap_const_lv12_0,
        din3 => ap_const_lv12_0,
        din4 => ap_const_lv12_0,
        din5 => ap_const_lv12_0,
        din6 => tmp2_V_11_0_fu_160,
        din7 => tmp2_V_11_0_fu_160,
        din8 => tmp2_V_11_0_fu_160,
        din9 => tmp2_V_11_0_fu_160,
        din10 => tmp2_V_11_0_fu_160,
        din11 => ap_const_lv12_0,
        din12 => ap_const_lv12_0,
        din13 => ap_const_lv12_0,
        din14 => ap_const_lv12_0,
        din15 => ap_const_lv12_0,
        din16 => add_ln72_fu_541_p2,
        dout => tmp2_V_11_1_fu_927_p18);

    flow_control_loop_pipe_sequential_init_U : component master_fix_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    i_fu_208_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_const_boolean_1 = ap_condition_818)) then 
                    i_fu_208 <= select_ln69_fu_491_p3;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_208 <= ap_const_lv16_FFFF;
                end if;
            end if; 
        end if;
    end process;

    r_fu_116_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln67_fu_396_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    r_fu_116 <= add_ln67_fu_402_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    r_fu_116 <= ap_const_lv3_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                icmp_ln67_reg_1633 <= icmp_ln67_fu_396_p2;
                r_3_reg_1624 <= ap_sig_allocacmp_r_3;
                r_3_reg_1624_pp0_iter1_reg <= r_3_reg_1624;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln67_fu_396_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                j_reg_1637 <= j_fu_420_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then
                tmp1_V_0_0_fu_172 <= select_ln71_8_fu_1204_p3;
                tmp1_V_11_11_fu_200 <= tmp1_V_11_15_fu_1240_p3;
                tmp1_V_11_13_fu_204 <= tmp1_V_11_fu_1224_p3;
                tmp1_V_11_2_fu_164 <= tmp1_V_11_20_fu_1304_p3;
                tmp1_V_11_4_fu_196 <= tmp1_V_11_16_fu_1256_p3;
                tmp1_V_11_6_fu_192 <= tmp1_V_11_18_fu_1272_p3;
                tmp1_V_11_9_fu_168 <= tmp1_V_11_19_fu_1296_p3;
                tmp1_V_1_0_fu_176 <= select_ln71_7_fu_1196_p3;
                tmp1_V_2_0_fu_180 <= select_ln71_5_fu_1180_p3;
                tmp1_V_4_0_fu_184 <= select_ln71_3_fu_1164_p3;
                tmp1_V_5_0_fu_188 <= select_ln71_1_fu_1148_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln67_fu_396_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                tmp2_V_0_0_fu_120 <= tmp2_V_0_1_fu_547_p18;
                tmp2_V_10_0_fu_156 <= tmp2_V_10_1_fu_889_p18;
                tmp2_V_11_0_fu_160 <= tmp2_V_11_1_fu_927_p18;
                tmp2_V_1_0_fu_124 <= tmp2_V_1_1_fu_585_p18;
                tmp2_V_2_0_fu_128 <= tmp2_V_2_1_fu_623_p18;
                tmp2_V_3_0_fu_132 <= tmp2_V_3_1_fu_661_p18;
                tmp2_V_5_0_fu_136 <= tmp2_V_5_1_fu_699_p18;
                tmp2_V_6_0_fu_140 <= tmp2_V_6_1_fu_737_p18;
                tmp2_V_7_0_fu_144 <= tmp2_V_7_1_fu_775_p18;
                tmp2_V_8_0_fu_148 <= tmp2_V_8_1_fu_813_p18;
                tmp2_V_9_0_fu_152 <= tmp2_V_9_1_fu_851_p18;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln67_fu_402_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_r_3) + unsigned(ap_const_lv3_1));
    add_ln68_fu_414_p2 <= std_logic_vector(unsigned(empty_fu_392_p1) + unsigned(ap_const_lv2_1));
    add_ln69_fu_445_p2 <= std_logic_vector(signed(sext_ln69_fu_437_p1) + signed(ap_const_lv17_1));
    add_ln72_1_fu_1053_p2 <= std_logic_vector(unsigned(sub_ln72_fu_1044_p2) + unsigned(zext_ln72_fu_1050_p1));
    add_ln72_fu_541_p2 <= std_logic_vector(unsigned(zext_ln71_fu_537_p1) + unsigned(ap_const_lv4_6));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_818_assign_proc : process(ap_enable_reg_pp0_iter0, icmp_ln67_fu_396_p2, icmp_ln69_fu_428_p2)
    begin
                ap_condition_818 <= ((icmp_ln67_fu_396_p2 = ap_const_lv1_0) and (icmp_ln69_fu_428_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln67_fu_396_p2)
    begin
        if (((icmp_ln67_fu_396_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter1_reg)
    begin
        if (((ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, i_fu_208)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_i_load <= ap_const_lv16_FFFF;
        else 
            ap_sig_allocacmp_i_load <= i_fu_208;
        end if; 
    end process;


    ap_sig_allocacmp_r_3_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, r_fu_116, ap_loop_init)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_r_3 <= ap_const_lv3_0;
        else 
            ap_sig_allocacmp_r_3 <= r_fu_116;
        end if; 
    end process;

    empty_fu_392_p1 <= ap_sig_allocacmp_r_3(2 - 1 downto 0);
    icmp_ln67_fu_396_p2 <= "1" when (ap_sig_allocacmp_r_3 = ap_const_lv3_6) else "0";
    icmp_ln68_fu_408_p2 <= "1" when (unsigned(ap_sig_allocacmp_r_3) < unsigned(ap_const_lv3_3)) else "0";
    icmp_ln69_fu_428_p2 <= "1" when (j_fu_420_p3 = ap_const_lv2_0) else "0";
    icmp_ln71_1_fu_1102_p2 <= "1" when (r_3_reg_1624_pp0_iter1_reg = ap_const_lv3_3) else "0";
    icmp_ln71_2_fu_1107_p2 <= "1" when (r_3_reg_1624_pp0_iter1_reg = ap_const_lv3_2) else "0";
    icmp_ln71_3_fu_1112_p2 <= "1" when (r_3_reg_1624_pp0_iter1_reg = ap_const_lv3_1) else "0";
    icmp_ln71_4_fu_1117_p2 <= "1" when (r_3_reg_1624_pp0_iter1_reg = ap_const_lv3_0) else "0";
    icmp_ln71_fu_1097_p2 <= "1" when (r_3_reg_1624_pp0_iter1_reg = ap_const_lv3_4) else "0";
    input_r_address0 <= zext_ln72_1_fu_1059_p1(9 - 1 downto 0);

    input_r_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            input_r_ce0 <= ap_const_logic_1;
        else 
            input_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    j_fu_420_p3 <= 
        empty_fu_392_p1 when (icmp_ln68_fu_408_p2(0) = '1') else 
        add_ln68_fu_414_p2;
    or_ln71_1_fu_1128_p2 <= (icmp_ln71_2_fu_1107_p2 or icmp_ln71_1_fu_1102_p2);
    or_ln71_2_fu_1142_p2 <= (or_ln71_fu_1122_p2 or or_ln71_1_fu_1128_p2);
    or_ln71_fu_1122_p2 <= (icmp_ln71_4_fu_1117_p2 or icmp_ln71_3_fu_1112_p2);
    p_and_t_cast_fu_469_p3 <= (ap_const_lv9_0 & xor_ln69_fu_463_p2);
    select_ln69_fu_491_p3 <= 
        sub_ln69_fu_477_p2 when (tmp_fu_451_p3(0) = '1') else 
        tmp_s_fu_483_p3;
    select_ln71_1_fu_1148_p3 <= 
        tmp1_V_5_0_fu_188 when (or_ln71_2_fu_1142_p2(0) = '1') else 
        select_ln71_fu_1134_p3;
    select_ln71_2_fu_1156_p3 <= 
        ap_const_lv12_FF9 when (icmp_ln71_fu_1097_p2(0) = '1') else 
        tmp1_V_4_0_fu_184;
    select_ln71_3_fu_1164_p3 <= 
        tmp1_V_4_0_fu_184 when (or_ln71_2_fu_1142_p2(0) = '1') else 
        select_ln71_2_fu_1156_p3;
    select_ln71_4_fu_1172_p3 <= 
        ap_const_lv12_FF9 when (icmp_ln71_2_fu_1107_p2(0) = '1') else 
        tmp1_V_2_0_fu_180;
    select_ln71_5_fu_1180_p3 <= 
        tmp1_V_2_0_fu_180 when (or_ln71_fu_1122_p2(0) = '1') else 
        select_ln71_4_fu_1172_p3;
    select_ln71_6_fu_1188_p3 <= 
        ap_const_lv12_FF9 when (icmp_ln71_3_fu_1112_p2(0) = '1') else 
        tmp1_V_1_0_fu_176;
    select_ln71_7_fu_1196_p3 <= 
        tmp1_V_1_0_fu_176 when (icmp_ln71_4_fu_1117_p2(0) = '1') else 
        select_ln71_6_fu_1188_p3;
    select_ln71_8_fu_1204_p3 <= 
        ap_const_lv12_FF9 when (icmp_ln71_4_fu_1117_p2(0) = '1') else 
        tmp1_V_0_0_fu_172;
    select_ln71_fu_1134_p3 <= 
        tmp1_V_5_0_fu_188 when (icmp_ln71_fu_1097_p2(0) = '1') else 
        ap_const_lv12_FF9;
    select_ln72_2_fu_1232_p3 <= 
        tmp1_V_11_21_fu_1212_p1 when (icmp_ln71_fu_1097_p2(0) = '1') else 
        tmp1_V_11_11_fu_200;
    select_ln72_4_fu_1248_p3 <= 
        tmp1_V_11_21_fu_1212_p1 when (icmp_ln71_2_fu_1107_p2(0) = '1') else 
        tmp1_V_11_4_fu_196;
    select_ln72_8_fu_1280_p3 <= 
        tmp1_V_11_9_fu_168 when (icmp_ln71_2_fu_1107_p2(0) = '1') else 
        tmp1_V_11_21_fu_1212_p1;
    select_ln72_9_fu_1288_p3 <= 
        tmp1_V_11_9_fu_168 when (or_ln71_fu_1122_p2(0) = '1') else 
        select_ln72_8_fu_1280_p3;
    select_ln72_fu_1216_p3 <= 
        tmp1_V_11_13_fu_204 when (icmp_ln71_fu_1097_p2(0) = '1') else 
        tmp1_V_11_21_fu_1212_p1;
    sext_ln69_fu_437_p0 <= ap_sig_allocacmp_i_load;
        sext_ln69_fu_437_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln69_fu_437_p0),17));

    sub_ln69_fu_477_p2 <= std_logic_vector(unsigned(ap_const_lv16_0) - unsigned(p_and_t_cast_fu_469_p3));
    sub_ln72_fu_1044_p2 <= std_logic_vector(unsigned(tmp_46_cast_fu_1036_p3) - unsigned(trunc_ln72_fu_1028_p1));
    tmp1_V_0_0_out <= tmp1_V_0_0_fu_172;

    tmp1_V_0_0_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, icmp_ln67_reg_1633)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln67_reg_1633 = ap_const_lv1_1))) then 
            tmp1_V_0_0_out_ap_vld <= ap_const_logic_1;
        else 
            tmp1_V_0_0_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    tmp1_V_10_0_out <= tmp1_V_11_11_fu_200;

    tmp1_V_10_0_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, icmp_ln67_reg_1633)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln67_reg_1633 = ap_const_lv1_1))) then 
            tmp1_V_10_0_out_ap_vld <= ap_const_logic_1;
        else 
            tmp1_V_10_0_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    tmp1_V_11_0_out <= tmp1_V_11_13_fu_204;

    tmp1_V_11_0_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, icmp_ln67_reg_1633)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln67_reg_1633 = ap_const_lv1_1))) then 
            tmp1_V_11_0_out_ap_vld <= ap_const_logic_1;
        else 
            tmp1_V_11_0_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    tmp1_V_11_11_out <= tmp1_V_11_2_fu_164;

    tmp1_V_11_11_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, icmp_ln67_reg_1633)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln67_reg_1633 = ap_const_lv1_1))) then 
            tmp1_V_11_11_out_ap_vld <= ap_const_logic_1;
        else 
            tmp1_V_11_11_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    tmp1_V_11_15_fu_1240_p3 <= 
        tmp1_V_11_11_fu_200 when (or_ln71_2_fu_1142_p2(0) = '1') else 
        select_ln72_2_fu_1232_p3;
    tmp1_V_11_16_fu_1256_p3 <= 
        tmp1_V_11_4_fu_196 when (or_ln71_fu_1122_p2(0) = '1') else 
        select_ln72_4_fu_1248_p3;
    tmp1_V_11_17_fu_1264_p3 <= 
        tmp1_V_11_21_fu_1212_p1 when (icmp_ln71_3_fu_1112_p2(0) = '1') else 
        tmp1_V_11_6_fu_192;
    tmp1_V_11_18_fu_1272_p3 <= 
        tmp1_V_11_6_fu_192 when (icmp_ln71_4_fu_1117_p2(0) = '1') else 
        tmp1_V_11_17_fu_1264_p3;
    tmp1_V_11_19_fu_1296_p3 <= 
        select_ln72_9_fu_1288_p3 when (or_ln71_2_fu_1142_p2(0) = '1') else 
        tmp1_V_11_9_fu_168;
    tmp1_V_11_20_fu_1304_p3 <= 
        tmp1_V_11_21_fu_1212_p1 when (icmp_ln71_4_fu_1117_p2(0) = '1') else 
        tmp1_V_11_2_fu_164;
    tmp1_V_11_21_fu_1212_p1 <= input_r_q0(12 - 1 downto 0);
    tmp1_V_11_4_out <= tmp1_V_11_4_fu_196;

    tmp1_V_11_4_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, icmp_ln67_reg_1633)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln67_reg_1633 = ap_const_lv1_1))) then 
            tmp1_V_11_4_out_ap_vld <= ap_const_logic_1;
        else 
            tmp1_V_11_4_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    tmp1_V_11_6_out <= tmp1_V_11_6_fu_192;

    tmp1_V_11_6_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, icmp_ln67_reg_1633)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln67_reg_1633 = ap_const_lv1_1))) then 
            tmp1_V_11_6_out_ap_vld <= ap_const_logic_1;
        else 
            tmp1_V_11_6_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    tmp1_V_11_9_out <= tmp1_V_11_9_fu_168;

    tmp1_V_11_9_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, icmp_ln67_reg_1633)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln67_reg_1633 = ap_const_lv1_1))) then 
            tmp1_V_11_9_out_ap_vld <= ap_const_logic_1;
        else 
            tmp1_V_11_9_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    tmp1_V_11_fu_1224_p3 <= 
        tmp1_V_11_13_fu_204 when (or_ln71_2_fu_1142_p2(0) = '1') else 
        select_ln72_fu_1216_p3;
    tmp1_V_1_0_out <= tmp1_V_1_0_fu_176;

    tmp1_V_1_0_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, icmp_ln67_reg_1633)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln67_reg_1633 = ap_const_lv1_1))) then 
            tmp1_V_1_0_out_ap_vld <= ap_const_logic_1;
        else 
            tmp1_V_1_0_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    tmp1_V_2_0_out <= tmp1_V_2_0_fu_180;

    tmp1_V_2_0_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, icmp_ln67_reg_1633)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln67_reg_1633 = ap_const_lv1_1))) then 
            tmp1_V_2_0_out_ap_vld <= ap_const_logic_1;
        else 
            tmp1_V_2_0_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    tmp1_V_4_0_out <= tmp1_V_4_0_fu_184;

    tmp1_V_4_0_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, icmp_ln67_reg_1633)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln67_reg_1633 = ap_const_lv1_1))) then 
            tmp1_V_4_0_out_ap_vld <= ap_const_logic_1;
        else 
            tmp1_V_4_0_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    tmp1_V_5_0_out <= tmp1_V_5_0_fu_188;

    tmp1_V_5_0_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, icmp_ln67_reg_1633)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln67_reg_1633 = ap_const_lv1_1))) then 
            tmp1_V_5_0_out_ap_vld <= ap_const_logic_1;
        else 
            tmp1_V_5_0_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    tmp2_V_0_0_out <= tmp2_V_0_0_fu_120;

    tmp2_V_0_0_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, icmp_ln67_reg_1633)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln67_reg_1633 = ap_const_lv1_1))) then 
            tmp2_V_0_0_out_ap_vld <= ap_const_logic_1;
        else 
            tmp2_V_0_0_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    tmp2_V_10_0_out <= tmp2_V_10_0_fu_156;

    tmp2_V_10_0_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, icmp_ln67_reg_1633)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln67_reg_1633 = ap_const_lv1_1))) then 
            tmp2_V_10_0_out_ap_vld <= ap_const_logic_1;
        else 
            tmp2_V_10_0_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    tmp2_V_11_0_out <= tmp2_V_11_0_fu_160;

    tmp2_V_11_0_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, icmp_ln67_reg_1633)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln67_reg_1633 = ap_const_lv1_1))) then 
            tmp2_V_11_0_out_ap_vld <= ap_const_logic_1;
        else 
            tmp2_V_11_0_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    tmp2_V_1_0_out <= tmp2_V_1_0_fu_124;

    tmp2_V_1_0_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, icmp_ln67_reg_1633)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln67_reg_1633 = ap_const_lv1_1))) then 
            tmp2_V_1_0_out_ap_vld <= ap_const_logic_1;
        else 
            tmp2_V_1_0_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    tmp2_V_2_0_out <= tmp2_V_2_0_fu_128;

    tmp2_V_2_0_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, icmp_ln67_reg_1633)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln67_reg_1633 = ap_const_lv1_1))) then 
            tmp2_V_2_0_out_ap_vld <= ap_const_logic_1;
        else 
            tmp2_V_2_0_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    tmp2_V_3_0_out <= tmp2_V_3_0_fu_132;

    tmp2_V_3_0_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, icmp_ln67_reg_1633)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln67_reg_1633 = ap_const_lv1_1))) then 
            tmp2_V_3_0_out_ap_vld <= ap_const_logic_1;
        else 
            tmp2_V_3_0_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    tmp2_V_5_0_out <= tmp2_V_5_0_fu_136;

    tmp2_V_5_0_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, icmp_ln67_reg_1633)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln67_reg_1633 = ap_const_lv1_1))) then 
            tmp2_V_5_0_out_ap_vld <= ap_const_logic_1;
        else 
            tmp2_V_5_0_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    tmp2_V_6_0_out <= tmp2_V_6_0_fu_140;

    tmp2_V_6_0_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, icmp_ln67_reg_1633)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln67_reg_1633 = ap_const_lv1_1))) then 
            tmp2_V_6_0_out_ap_vld <= ap_const_logic_1;
        else 
            tmp2_V_6_0_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    tmp2_V_7_0_out <= tmp2_V_7_0_fu_144;

    tmp2_V_7_0_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, icmp_ln67_reg_1633)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln67_reg_1633 = ap_const_lv1_1))) then 
            tmp2_V_7_0_out_ap_vld <= ap_const_logic_1;
        else 
            tmp2_V_7_0_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    tmp2_V_8_0_out <= tmp2_V_8_0_fu_148;

    tmp2_V_8_0_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, icmp_ln67_reg_1633)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln67_reg_1633 = ap_const_lv1_1))) then 
            tmp2_V_8_0_out_ap_vld <= ap_const_logic_1;
        else 
            tmp2_V_8_0_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    tmp2_V_9_0_out <= tmp2_V_9_0_fu_152;

    tmp2_V_9_0_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, icmp_ln67_reg_1633)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln67_reg_1633 = ap_const_lv1_1))) then 
            tmp2_V_9_0_out_ap_vld <= ap_const_logic_1;
        else 
            tmp2_V_9_0_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    tmp_46_cast_fu_1036_p3 <= (trunc_ln72_1_fu_1032_p1 & ap_const_lv2_0);
    tmp_fu_451_p3 <= add_ln69_fu_445_p2(16 downto 16);
    tmp_s_fu_483_p3 <= (ap_const_lv9_0 & trunc_ln69_1_fu_459_p1);
    trunc_ln69_1_fu_459_p1 <= add_ln69_fu_445_p2(7 - 1 downto 0);
    trunc_ln69_fu_441_p0 <= ap_sig_allocacmp_i_load;
    trunc_ln69_fu_441_p1 <= trunc_ln69_fu_441_p0(7 - 1 downto 0);
    trunc_ln72_1_fu_1032_p1 <= i_fu_208(7 - 1 downto 0);
    trunc_ln72_fu_1028_p1 <= i_fu_208(9 - 1 downto 0);
    xor_ln69_fu_463_p2 <= (trunc_ln69_fu_441_p1 xor ap_const_lv7_7F);
    zext_ln71_fu_537_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_r_3),4));
    zext_ln72_1_fu_1059_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln72_1_fu_1053_p2),64));
    zext_ln72_fu_1050_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_1637),9));
end behav;
