// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
// Version: 2021.1
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module master_fix_master_fix_Pipeline_VITIS_LOOP_306_2_VITIS_LOOP_307_3 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        sext_ln300,
        sub_ln309,
        max2_V_0_address0,
        max2_V_0_ce0,
        max2_V_0_q0,
        num_V_7_out,
        num_V_7_out_ap_vld,
        grp_fu_1114_p_din0,
        grp_fu_1114_p_din1,
        grp_fu_1114_p_dout0,
        grp_fu_1114_p_ce
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [20:0] sext_ln300;
input  [9:0] sub_ln309;
output  [7:0] max2_V_0_address0;
output   max2_V_0_ce0;
input  [34:0] max2_V_0_q0;
output  [35:0] num_V_7_out;
output   num_V_7_out_ap_vld;
output  [20:0] grp_fu_1114_p_din0;
output  [34:0] grp_fu_1114_p_din1;
input  [54:0] grp_fu_1114_p_dout0;
output   grp_fu_1114_p_ce;

reg ap_idle;
reg max2_V_0_ce0;
reg num_V_7_out_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_state5_pp0_stage0_iter4;
wire    ap_block_state6_pp0_stage0_iter5;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln306_fu_166_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire   [11:0] firstDense_f_V_address0;
reg    firstDense_f_V_ce0;
wire   [20:0] firstDense_f_V_q0;
wire    ap_block_pp0_stage0_11001;
wire   [7:0] trunc_ln309_fu_139_p1;
reg   [7:0] trunc_ln309_reg_407;
reg   [0:0] icmp_ln306_reg_412;
reg   [0:0] icmp_ln306_reg_412_pp0_iter1_reg;
reg   [0:0] icmp_ln306_reg_412_pp0_iter2_reg;
reg   [0:0] icmp_ln306_reg_412_pp0_iter3_reg;
wire   [4:0] select_ln306_fu_196_p3;
reg   [4:0] select_ln306_reg_416;
wire   [3:0] select_ln306_1_fu_204_p3;
reg   [3:0] select_ln306_1_reg_422;
reg   [34:0] aux1_V_reg_438;
reg   [20:0] aux2_V_reg_443;
wire   [54:0] zext_ln1168_fu_284_p1;
wire  signed [54:0] sext_ln1171_fu_287_p1;
reg   [54:0] r_V_reg_458;
wire   [17:0] trunc_ln727_fu_296_p1;
reg   [17:0] trunc_ln727_reg_463;
wire   [63:0] zext_ln309_3_fu_268_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln308_fu_279_p1;
reg   [35:0] lhs_fu_74;
wire   [35:0] num_V_fu_363_p2;
wire  signed [35:0] sext_ln300_cast_fu_135_p1;
wire    ap_loop_init;
reg   [4:0] h_fu_78;
reg   [4:0] ap_sig_allocacmp_h_load;
wire   [4:0] add_ln307_fu_212_p2;
reg   [3:0] i_2_fu_82;
reg   [3:0] ap_sig_allocacmp_i_2_load;
reg   [7:0] indvar_flatten17_fu_86;
reg   [7:0] ap_sig_allocacmp_indvar_flatten17_load;
wire   [7:0] add_ln306_1_fu_172_p2;
wire    ap_block_pp0_stage0_01001;
wire   [0:0] icmp_ln307_fu_190_p2;
wire   [3:0] add_ln306_fu_184_p2;
wire   [7:0] zext_ln309_fu_233_p1;
wire   [7:0] add_ln309_fu_236_p2;
wire   [11:0] tmp_19_cast_fu_241_p3;
wire   [11:0] zext_ln309_2_fu_259_p1;
wire   [11:0] add_ln309_1_fu_262_p2;
wire   [7:0] tmp_s_fu_249_p3;
wire   [7:0] zext_ln309_1_fu_256_p1;
wire   [7:0] add_ln308_fu_273_p2;
wire   [54:0] lhs_1_fu_303_p3;
wire   [54:0] ret_V_fu_311_p2;
wire   [0:0] p_Result_s_fu_326_p3;
wire   [0:0] r_fu_342_p2;
wire   [0:0] or_ln412_fu_347_p2;
wire   [0:0] p_Result_9_fu_334_p3;
wire   [0:0] and_ln412_fu_353_p2;
wire   [35:0] num_V_2_fu_316_p4;
wire   [35:0] zext_ln415_fu_359_p1;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_done_reg = 1'b0;
end

master_fix_master_fix_Pipeline_VITIS_LOOP_306_2_VITIS_LOOP_307_3_firstDense_f_V #(
    .DataWidth( 21 ),
    .AddressRange( 3584 ),
    .AddressWidth( 12 ))
firstDense_f_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(firstDense_f_V_address0),
    .ce0(firstDense_f_V_ce0),
    .q0(firstDense_f_V_q0)
);

master_fix_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter4_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln306_fu_166_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            h_fu_78 <= add_ln307_fu_212_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            h_fu_78 <= 5'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln306_fu_166_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_2_fu_82 <= select_ln306_1_fu_204_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            i_2_fu_82 <= 4'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln306_fu_166_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            indvar_flatten17_fu_86 <= add_ln306_1_fu_172_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten17_fu_86 <= 8'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
            lhs_fu_74 <= sext_ln300_cast_fu_135_p1;
        end else if ((ap_enable_reg_pp0_iter5 == 1'b1)) begin
            lhs_fu_74 <= num_V_fu_363_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        icmp_ln306_reg_412 <= icmp_ln306_fu_166_p2;
        icmp_ln306_reg_412_pp0_iter1_reg <= icmp_ln306_reg_412;
        trunc_ln309_reg_407 <= trunc_ln309_fu_139_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        aux1_V_reg_438 <= max2_V_0_q0;
        aux2_V_reg_443 <= firstDense_f_V_q0;
        icmp_ln306_reg_412_pp0_iter2_reg <= icmp_ln306_reg_412_pp0_iter1_reg;
        icmp_ln306_reg_412_pp0_iter3_reg <= icmp_ln306_reg_412_pp0_iter2_reg;
        r_V_reg_458 <= grp_fu_1114_p_dout0;
        trunc_ln727_reg_463 <= trunc_ln727_fu_296_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln306_fu_166_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        select_ln306_1_reg_422 <= select_ln306_1_fu_204_p3;
        select_ln306_reg_416 <= select_ln306_fu_196_p3;
    end
end

always @ (*) begin
    if (((icmp_ln306_fu_166_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter4_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_h_load = 5'd0;
    end else begin
        ap_sig_allocacmp_h_load = h_fu_78;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i_2_load = 4'd0;
    end else begin
        ap_sig_allocacmp_i_2_load = i_2_fu_82;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten17_load = 8'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten17_load = indvar_flatten17_fu_86;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        firstDense_f_V_ce0 = 1'b1;
    end else begin
        firstDense_f_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        max2_V_0_ce0 = 1'b1;
    end else begin
        max2_V_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln306_reg_412_pp0_iter3_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        num_V_7_out_ap_vld = 1'b1;
    end else begin
        num_V_7_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln306_1_fu_172_p2 = (ap_sig_allocacmp_indvar_flatten17_load + 8'd1);

assign add_ln306_fu_184_p2 = (ap_sig_allocacmp_i_2_load + 4'd1);

assign add_ln307_fu_212_p2 = (select_ln306_fu_196_p3 + 5'd1);

assign add_ln308_fu_273_p2 = (tmp_s_fu_249_p3 + zext_ln309_1_fu_256_p1);

assign add_ln309_1_fu_262_p2 = (tmp_19_cast_fu_241_p3 + zext_ln309_2_fu_259_p1);

assign add_ln309_fu_236_p2 = (trunc_ln309_reg_407 + zext_ln309_fu_233_p1);

assign and_ln412_fu_353_p2 = (p_Result_9_fu_334_p3 & or_ln412_fu_347_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign firstDense_f_V_address0 = zext_ln309_3_fu_268_p1;

assign grp_fu_1114_p_ce = 1'b1;

assign grp_fu_1114_p_din0 = sext_ln1171_fu_287_p1;

assign grp_fu_1114_p_din1 = zext_ln1168_fu_284_p1;

assign icmp_ln306_fu_166_p2 = ((ap_sig_allocacmp_indvar_flatten17_load == 8'd224) ? 1'b1 : 1'b0);

assign icmp_ln307_fu_190_p2 = ((ap_sig_allocacmp_h_load == 5'd16) ? 1'b1 : 1'b0);

assign lhs_1_fu_303_p3 = {{lhs_fu_74}, {19'd0}};

assign max2_V_0_address0 = zext_ln308_fu_279_p1;

assign num_V_2_fu_316_p4 = {{ret_V_fu_311_p2[54:19]}};

assign num_V_7_out = lhs_fu_74;

assign num_V_fu_363_p2 = (num_V_2_fu_316_p4 + zext_ln415_fu_359_p1);

assign or_ln412_fu_347_p2 = (r_fu_342_p2 | p_Result_s_fu_326_p3);

assign p_Result_9_fu_334_p3 = ret_V_fu_311_p2[32'd18];

assign p_Result_s_fu_326_p3 = ret_V_fu_311_p2[32'd19];

assign r_fu_342_p2 = ((trunc_ln727_reg_463 != 18'd0) ? 1'b1 : 1'b0);

assign ret_V_fu_311_p2 = (lhs_1_fu_303_p3 + r_V_reg_458);

assign select_ln306_1_fu_204_p3 = ((icmp_ln307_fu_190_p2[0:0] == 1'b1) ? add_ln306_fu_184_p2 : ap_sig_allocacmp_i_2_load);

assign select_ln306_fu_196_p3 = ((icmp_ln307_fu_190_p2[0:0] == 1'b1) ? 5'd0 : ap_sig_allocacmp_h_load);

assign sext_ln1171_fu_287_p1 = $signed(aux2_V_reg_443);

assign sext_ln300_cast_fu_135_p1 = $signed(sext_ln300);

assign tmp_19_cast_fu_241_p3 = {{add_ln309_fu_236_p2}, {4'd0}};

assign tmp_s_fu_249_p3 = {{select_ln306_1_reg_422}, {4'd0}};

assign trunc_ln309_fu_139_p1 = sub_ln309[7:0];

assign trunc_ln727_fu_296_p1 = grp_fu_1114_p_dout0[17:0];

assign zext_ln1168_fu_284_p1 = aux1_V_reg_438;

assign zext_ln308_fu_279_p1 = add_ln308_fu_273_p2;

assign zext_ln309_1_fu_256_p1 = select_ln306_reg_416;

assign zext_ln309_2_fu_259_p1 = select_ln306_reg_416;

assign zext_ln309_3_fu_268_p1 = add_ln309_1_fu_262_p2;

assign zext_ln309_fu_233_p1 = select_ln306_1_reg_422;

assign zext_ln415_fu_359_p1 = and_ln412_fu_353_p2;

endmodule //master_fix_master_fix_Pipeline_VITIS_LOOP_306_2_VITIS_LOOP_307_3
