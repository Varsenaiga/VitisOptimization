// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
// Version: 2021.1
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module master_fix_convolution2_fix_Pipeline_VITIS_LOOP_247_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        parc_V_0_21_reload,
        parc_V_1_23_reload,
        parc_V_2_24_reload,
        parc_V_3_25_reload,
        parc_V_4_26_reload,
        parc_V_5_27_reload,
        parc_V_6_28_reload,
        parc_V_7_29_reload,
        parc_V_8_210_reload,
        parc_V_9_211_reload,
        parc_V_10_212_reload,
        parc_V_11_213_reload,
        parc_V_12_214_reload,
        parc_V_13_215_reload,
        parc_V_14_216_reload,
        parc_V_15_217_reload,
        out_0_address0,
        out_0_ce0,
        out_0_we0,
        out_0_d0
);

parameter    ap_ST_fsm_state1 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [35:0] parc_V_0_21_reload;
input  [35:0] parc_V_1_23_reload;
input  [35:0] parc_V_2_24_reload;
input  [35:0] parc_V_3_25_reload;
input  [35:0] parc_V_4_26_reload;
input  [35:0] parc_V_5_27_reload;
input  [35:0] parc_V_6_28_reload;
input  [35:0] parc_V_7_29_reload;
input  [35:0] parc_V_8_210_reload;
input  [35:0] parc_V_9_211_reload;
input  [35:0] parc_V_10_212_reload;
input  [35:0] parc_V_11_213_reload;
input  [35:0] parc_V_12_214_reload;
input  [35:0] parc_V_13_215_reload;
input  [35:0] parc_V_14_216_reload;
input  [35:0] parc_V_15_217_reload;
output  [3:0] out_0_address0;
output   out_0_ce0;
output   out_0_we0;
output  [34:0] out_0_d0;

reg ap_idle;
reg out_0_ce0;
reg out_0_we0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_block_state1_pp0_stage0_iter0;
wire   [0:0] icmp_ln247_fu_191_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire   [63:0] r_1_cast_fu_203_p1;
reg   [4:0] r_fu_70;
wire    ap_loop_init;
reg   [4:0] ap_sig_allocacmp_r_1;
wire   [4:0] add_ln247_fu_197_p2;
wire   [3:0] tmp_fu_212_p17;
wire   [35:0] tmp_fu_212_p18;
wire   [0:0] tmp_50_fu_254_p3;
wire   [34:0] trunc_ln1548_1_fu_250_p1;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_done_reg = 1'b0;
end

master_fix_mux_164_36_1_1_x #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 36 ),
    .din1_WIDTH( 36 ),
    .din2_WIDTH( 36 ),
    .din3_WIDTH( 36 ),
    .din4_WIDTH( 36 ),
    .din5_WIDTH( 36 ),
    .din6_WIDTH( 36 ),
    .din7_WIDTH( 36 ),
    .din8_WIDTH( 36 ),
    .din9_WIDTH( 36 ),
    .din10_WIDTH( 36 ),
    .din11_WIDTH( 36 ),
    .din12_WIDTH( 36 ),
    .din13_WIDTH( 36 ),
    .din14_WIDTH( 36 ),
    .din15_WIDTH( 36 ),
    .din16_WIDTH( 4 ),
    .dout_WIDTH( 36 ))
mux_164_36_1_1_x_U337(
    .din0(parc_V_0_21_reload),
    .din1(parc_V_1_23_reload),
    .din2(parc_V_2_24_reload),
    .din3(parc_V_3_25_reload),
    .din4(parc_V_4_26_reload),
    .din5(parc_V_5_27_reload),
    .din6(parc_V_6_28_reload),
    .din7(parc_V_7_29_reload),
    .din8(parc_V_8_210_reload),
    .din9(parc_V_9_211_reload),
    .din10(parc_V_10_212_reload),
    .din11(parc_V_11_213_reload),
    .din12(parc_V_12_214_reload),
    .din13(parc_V_13_215_reload),
    .din14(parc_V_14_216_reload),
    .din15(parc_V_15_217_reload),
    .din16(tmp_fu_212_p17),
    .dout(tmp_fu_212_p18)
);

master_fix_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        if ((icmp_ln247_fu_191_p2 == 1'd0)) begin
            r_fu_70 <= add_ln247_fu_197_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            r_fu_70 <= 5'd0;
        end
    end
end

always @ (*) begin
    if ((ap_start_int == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln247_fu_191_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_sig_allocacmp_r_1 = 5'd0;
    end else begin
        ap_sig_allocacmp_r_1 = r_fu_70;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        out_0_ce0 = 1'b1;
    end else begin
        out_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln247_fu_191_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        out_0_we0 = 1'b1;
    end else begin
        out_0_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln247_fu_197_p2 = (ap_sig_allocacmp_r_1 + 5'd1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start_int == 1'b0);
end

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign icmp_ln247_fu_191_p2 = ((ap_sig_allocacmp_r_1 == 5'd16) ? 1'b1 : 1'b0);

assign out_0_address0 = r_1_cast_fu_203_p1;

assign out_0_d0 = ((tmp_50_fu_254_p3[0:0] == 1'b1) ? 35'd0 : trunc_ln1548_1_fu_250_p1);

assign r_1_cast_fu_203_p1 = ap_sig_allocacmp_r_1;

assign tmp_50_fu_254_p3 = tmp_fu_212_p18[32'd35];

assign tmp_fu_212_p17 = ap_sig_allocacmp_r_1[3:0];

assign trunc_ln1548_1_fu_250_p1 = tmp_fu_212_p18[34:0];

endmodule //master_fix_convolution2_fix_Pipeline_VITIS_LOOP_247_2
