// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
// Version: 2021.1
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module master_fix_master_fix_Pipeline_Operations_Dense2_Loop7 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        den1_0_address0,
        den1_0_ce0,
        den1_0_q0,
        den2_V_0_2_out,
        den2_V_0_2_out_ap_vld,
        grp_fu_1505_p_din0,
        grp_fu_1505_p_din1,
        grp_fu_1505_p_dout0,
        grp_fu_1505_p_ce
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [3:0] den1_0_address0;
output   den1_0_ce0;
input  [34:0] den1_0_q0;
output  [35:0] den2_V_0_2_out;
output   den2_V_0_2_out_ap_vld;
output  [18:0] grp_fu_1505_p_din0;
output  [34:0] grp_fu_1505_p_din1;
input  [53:0] grp_fu_1505_p_dout0;
output   grp_fu_1505_p_ce;

reg ap_idle;
reg den1_0_ce0;
reg den2_V_0_2_out_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_state5_pp0_stage0_iter4;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln310_fu_108_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire   [3:0] secondDense_f_V_2_address0;
reg    secondDense_f_V_2_ce0;
wire   [18:0] secondDense_f_V_2_q0;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln310_reg_243;
reg   [0:0] icmp_ln310_reg_243_pp0_iter1_reg;
reg   [0:0] icmp_ln310_reg_243_pp0_iter2_reg;
reg   [34:0] aux1_V_reg_257;
reg   [18:0] aux2_V_reg_262;
wire   [53:0] zext_ln1168_fu_131_p1;
wire  signed [53:0] sext_ln1171_fu_134_p1;
reg  signed [53:0] r_V_reg_277;
wire   [17:0] trunc_ln727_fu_143_p1;
reg   [17:0] trunc_ln727_reg_283;
wire   [63:0] zext_ln315_fu_120_p1;
wire    ap_block_pp0_stage0;
reg   [35:0] lhs_fu_54;
wire   [35:0] num_V_fu_213_p2;
wire    ap_loop_init;
reg   [4:0] i_fu_58;
reg   [4:0] ap_sig_allocacmp_i_3;
wire   [4:0] add_ln310_fu_114_p2;
wire    ap_block_pp0_stage0_01001;
wire   [54:0] lhs_2_fu_150_p3;
wire  signed [54:0] sext_ln1245_fu_158_p1;
wire   [54:0] ret_V_fu_161_p2;
wire   [0:0] p_Result_s_fu_177_p3;
wire   [0:0] r_fu_192_p2;
wire   [0:0] or_ln412_fu_197_p2;
wire   [0:0] p_Result_2_fu_185_p3;
wire   [0:0] and_ln412_fu_203_p2;
wire   [35:0] num_V_2_fu_167_p4;
wire   [35:0] zext_ln415_fu_209_p1;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_done_reg = 1'b0;
end

master_fix_master_fix_Pipeline_Operations_Dense2_Loop7_secondDense_f_V_2 #(
    .DataWidth( 19 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
secondDense_f_V_2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(secondDense_f_V_2_address0),
    .ce0(secondDense_f_V_2_ce0),
    .q0(secondDense_f_V_2_q0)
);

master_fix_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter3_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln310_fu_108_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_fu_58 <= add_ln310_fu_114_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_58 <= 5'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
            lhs_fu_54 <= 36'd68718843845;
        end else if ((ap_enable_reg_pp0_iter4 == 1'b1)) begin
            lhs_fu_54 <= num_V_fu_213_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        aux1_V_reg_257 <= den1_0_q0;
        aux2_V_reg_262 <= secondDense_f_V_2_q0;
        icmp_ln310_reg_243 <= icmp_ln310_fu_108_p2;
        icmp_ln310_reg_243_pp0_iter1_reg <= icmp_ln310_reg_243;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        icmp_ln310_reg_243_pp0_iter2_reg <= icmp_ln310_reg_243_pp0_iter1_reg;
        r_V_reg_277 <= grp_fu_1505_p_dout0;
        trunc_ln727_reg_283 <= trunc_ln727_fu_143_p1;
    end
end

always @ (*) begin
    if (((icmp_ln310_fu_108_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter3_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i_3 = 5'd0;
    end else begin
        ap_sig_allocacmp_i_3 = i_fu_58;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        den1_0_ce0 = 1'b1;
    end else begin
        den1_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln310_reg_243_pp0_iter2_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        den2_V_0_2_out_ap_vld = 1'b1;
    end else begin
        den2_V_0_2_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        secondDense_f_V_2_ce0 = 1'b1;
    end else begin
        secondDense_f_V_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln310_fu_114_p2 = (ap_sig_allocacmp_i_3 + 5'd1);

assign and_ln412_fu_203_p2 = (p_Result_2_fu_185_p3 & or_ln412_fu_197_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign den1_0_address0 = zext_ln315_fu_120_p1;

assign den2_V_0_2_out = lhs_fu_54;

assign grp_fu_1505_p_ce = 1'b1;

assign grp_fu_1505_p_din0 = sext_ln1171_fu_134_p1;

assign grp_fu_1505_p_din1 = zext_ln1168_fu_131_p1;

assign icmp_ln310_fu_108_p2 = ((ap_sig_allocacmp_i_3 == 5'd16) ? 1'b1 : 1'b0);

assign lhs_2_fu_150_p3 = {{lhs_fu_54}, {19'd0}};

assign num_V_2_fu_167_p4 = {{ret_V_fu_161_p2[54:19]}};

assign num_V_fu_213_p2 = (num_V_2_fu_167_p4 + zext_ln415_fu_209_p1);

assign or_ln412_fu_197_p2 = (r_fu_192_p2 | p_Result_s_fu_177_p3);

assign p_Result_2_fu_185_p3 = r_V_reg_277[32'd18];

assign p_Result_s_fu_177_p3 = ret_V_fu_161_p2[32'd19];

assign r_fu_192_p2 = ((trunc_ln727_reg_283 != 18'd0) ? 1'b1 : 1'b0);

assign ret_V_fu_161_p2 = ($signed(lhs_2_fu_150_p3) + $signed(sext_ln1245_fu_158_p1));

assign secondDense_f_V_2_address0 = zext_ln315_fu_120_p1;

assign sext_ln1171_fu_134_p1 = $signed(aux2_V_reg_262);

assign sext_ln1245_fu_158_p1 = r_V_reg_277;

assign trunc_ln727_fu_143_p1 = grp_fu_1505_p_dout0[17:0];

assign zext_ln1168_fu_131_p1 = aux1_V_reg_257;

assign zext_ln315_fu_120_p1 = ap_sig_allocacmp_i_3;

assign zext_ln415_fu_209_p1 = and_ln412_fu_203_p2;

endmodule //master_fix_master_fix_Pipeline_Operations_Dense2_Loop7
