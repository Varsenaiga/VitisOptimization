// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
// Version: 2021.1
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="master_master,hls_ip_2021_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu7ev-ffvf1517-3-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.186000,HLS_SYN_LAT=26649,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=583,HLS_SYN_LUT=575,HLS_VERSION=2021_1}" *)

module master (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_r_address0,
        input_r_ce0,
        input_r_q0,
        out_r_address0,
        out_r_ce0,
        out_r_we0,
        out_r_d0
);

parameter    ap_ST_fsm_state1 = 12'd1;
parameter    ap_ST_fsm_state2 = 12'd2;
parameter    ap_ST_fsm_state3 = 12'd4;
parameter    ap_ST_fsm_state4 = 12'd8;
parameter    ap_ST_fsm_state5 = 12'd16;
parameter    ap_ST_fsm_state6 = 12'd32;
parameter    ap_ST_fsm_state7 = 12'd64;
parameter    ap_ST_fsm_state8 = 12'd128;
parameter    ap_ST_fsm_state9 = 12'd256;
parameter    ap_ST_fsm_state10 = 12'd512;
parameter    ap_ST_fsm_state11 = 12'd1024;
parameter    ap_ST_fsm_state12 = 12'd2048;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [8:0] input_r_address0;
output   input_r_ce0;
input  [31:0] input_r_q0;
output  [11:0] out_r_address0;
output   out_r_ce0;
output   out_r_we0;
output  [31:0] out_r_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg input_r_ce0;
reg out_r_ce0;
reg out_r_we0;

(* fsm_encoding = "none" *) reg   [11:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [2:0] firstKernel_1_1_address0;
reg    firstKernel_1_1_ce0;
wire   [31:0] firstKernel_1_1_q0;
wire   [2:0] firstBias_address0;
reg    firstBias_ce0;
wire   [31:0] firstBias_q0;
wire   [11:0] zext_ln18_1_fu_165_p1;
reg   [11:0] zext_ln18_1_reg_282;
wire    ap_CS_fsm_state2;
wire   [3:0] add_ln18_fu_175_p2;
reg   [3:0] add_ln18_reg_290;
wire   [0:0] icmp_ln18_fu_169_p2;
reg   [31:0] firstKernel_1_1_load_reg_305;
wire    ap_CS_fsm_state3;
reg   [31:0] firstBias_load_reg_310;
wire  signed [11:0] sext_ln20_fu_203_p1;
reg  signed [11:0] sext_ln20_reg_315;
wire    ap_CS_fsm_state4;
wire   [7:0] add_ln20_fu_213_p2;
reg   [7:0] add_ln20_reg_323;
wire    ap_CS_fsm_state5;
reg   [11:0] out_addr_reg_333;
wire   [1:0] add_ln22_fu_259_p2;
reg   [1:0] add_ln22_reg_341;
wire    ap_CS_fsm_state6;
wire   [31:0] grp_fu_147_p2;
reg   [31:0] mul_reg_351;
wire    ap_CS_fsm_state8;
reg   [7:0] i_reg_121;
wire   [0:0] icmp_ln22_fu_253_p2;
reg   [1:0] j_reg_132;
wire    ap_CS_fsm_state12;
wire   [0:0] icmp_ln20_fu_207_p2;
wire   [63:0] zext_ln18_fu_159_p1;
wire  signed [63:0] sext_ln24_fu_232_p1;
wire   [63:0] zext_ln24_3_fu_248_p1;
reg   [3:0] d_fu_66;
wire    ap_CS_fsm_state9;
wire   [31:0] grp_fu_147_p0;
wire   [9:0] tmp_fu_185_p3;
wire   [10:0] zext_ln24_1_fu_193_p1;
wire   [10:0] zext_ln24_fu_181_p1;
wire   [10:0] sub_ln24_fu_197_p2;
wire   [11:0] zext_ln24_2_fu_223_p1;
wire  signed [11:0] add_ln24_fu_227_p2;
wire   [11:0] shl_ln24_fu_237_p2;
wire   [11:0] add_ln24_1_fu_243_p2;
wire   [31:0] grp_fu_143_p2;
reg   [11:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state8_blk;
wire    ap_ST_fsm_state9_blk;
wire    ap_ST_fsm_state10_blk;
wire    ap_ST_fsm_state11_blk;
wire    ap_ST_fsm_state12_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 12'd1;
end

master_firstKernel_1_1 #(
    .DataWidth( 32 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
firstKernel_1_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(firstKernel_1_1_address0),
    .ce0(firstKernel_1_1_ce0),
    .q0(firstKernel_1_1_q0)
);

master_firstBias #(
    .DataWidth( 32 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
firstBias_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(firstBias_address0),
    .ce0(firstBias_ce0),
    .q0(firstBias_q0)
);

master_fadd_32ns_32ns_32_4_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fadd_32ns_32ns_32_4_full_dsp_1_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(mul_reg_351),
    .din1(firstBias_load_reg_310),
    .ce(1'b1),
    .dout(grp_fu_143_p2)
);

master_fmul_32ns_32ns_32_3_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_3_max_dsp_1_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_147_p0),
    .din1(firstKernel_1_1_load_reg_305),
    .ce(1'b1),
    .dout(grp_fu_147_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        d_fu_66 <= 4'd0;
    end else if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln20_fu_207_p2 == 1'd1))) begin
        d_fu_66 <= add_ln18_reg_290;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        i_reg_121 <= 8'd0;
    end else if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln22_fu_253_p2 == 1'd1))) begin
        i_reg_121 <= add_ln20_reg_323;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln20_fu_207_p2 == 1'd0))) begin
        j_reg_132 <= 2'd0;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        j_reg_132 <= add_ln22_reg_341;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln18_reg_290 <= add_ln18_fu_175_p2;
        zext_ln18_1_reg_282[3 : 0] <= zext_ln18_1_fu_165_p1[3 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        add_ln20_reg_323 <= add_ln20_fu_213_p2;
        sext_ln20_reg_315 <= sext_ln20_fu_203_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        add_ln22_reg_341 <= add_ln22_fu_259_p2;
        out_addr_reg_333 <= zext_ln24_3_fu_248_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        firstBias_load_reg_310 <= firstBias_q0;
        firstKernel_1_1_load_reg_305 <= firstKernel_1_1_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        mul_reg_351 <= grp_fu_147_p2;
    end
end

assign ap_ST_fsm_state10_blk = 1'b0;

assign ap_ST_fsm_state11_blk = 1'b0;

assign ap_ST_fsm_state12_blk = 1'b0;

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

assign ap_ST_fsm_state7_blk = 1'b0;

assign ap_ST_fsm_state8_blk = 1'b0;

assign ap_ST_fsm_state9_blk = 1'b0;

always @ (*) begin
    if (((icmp_ln18_fu_169_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln18_fu_169_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        firstBias_ce0 = 1'b1;
    end else begin
        firstBias_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        firstKernel_1_1_ce0 = 1'b1;
    end else begin
        firstKernel_1_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        input_r_ce0 = 1'b1;
    end else begin
        input_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        out_r_ce0 = 1'b1;
    end else begin
        out_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        out_r_we0 = 1'b1;
    end else begin
        out_r_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln18_fu_169_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln20_fu_207_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln22_fu_253_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln18_fu_175_p2 = (d_fu_66 + 4'd1);

assign add_ln20_fu_213_p2 = (i_reg_121 + 8'd1);

assign add_ln22_fu_259_p2 = (j_reg_132 + 2'd1);

assign add_ln24_1_fu_243_p2 = (shl_ln24_fu_237_p2 + zext_ln18_1_reg_282);

assign add_ln24_fu_227_p2 = ($signed(sext_ln20_reg_315) + $signed(zext_ln24_2_fu_223_p1));

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign firstBias_address0 = zext_ln18_fu_159_p1;

assign firstKernel_1_1_address0 = zext_ln18_fu_159_p1;

assign grp_fu_147_p0 = input_r_q0;

assign icmp_ln18_fu_169_p2 = ((d_fu_66 == 4'd8) ? 1'b1 : 1'b0);

assign icmp_ln20_fu_207_p2 = ((i_reg_121 == 8'd128) ? 1'b1 : 1'b0);

assign icmp_ln22_fu_253_p2 = ((j_reg_132 == 2'd3) ? 1'b1 : 1'b0);

assign input_r_address0 = sext_ln24_fu_232_p1;

assign out_r_address0 = out_addr_reg_333;

assign out_r_d0 = grp_fu_143_p2;

assign sext_ln20_fu_203_p1 = $signed(sub_ln24_fu_197_p2);

assign sext_ln24_fu_232_p1 = add_ln24_fu_227_p2;

assign shl_ln24_fu_237_p2 = add_ln24_fu_227_p2 << 12'd3;

assign sub_ln24_fu_197_p2 = (zext_ln24_1_fu_193_p1 - zext_ln24_fu_181_p1);

assign tmp_fu_185_p3 = {{i_reg_121}, {2'd0}};

assign zext_ln18_1_fu_165_p1 = d_fu_66;

assign zext_ln18_fu_159_p1 = d_fu_66;

assign zext_ln24_1_fu_193_p1 = tmp_fu_185_p3;

assign zext_ln24_2_fu_223_p1 = j_reg_132;

assign zext_ln24_3_fu_248_p1 = add_ln24_1_fu_243_p2;

assign zext_ln24_fu_181_p1 = i_reg_121;

always @ (posedge ap_clk) begin
    zext_ln18_1_reg_282[11:4] <= 8'b00000000;
end

endmodule //master
