// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
// Version: 2021.1
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module master_fix_master_fix_Pipeline_VITIS_LOOP_244_1_VITIS_LOOP_245_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        conv2_0_address0,
        conv2_0_ce0,
        conv2_0_q0,
        max2_V_0_address0,
        max2_V_0_ce0,
        max2_V_0_we0,
        max2_V_0_d0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [9:0] conv2_0_address0;
output   conv2_0_ce0;
input  [34:0] conv2_0_q0;
output  [7:0] max2_V_0_address0;
output   max2_V_0_ce0;
output   max2_V_0_we0;
output  [34:0] max2_V_0_d0;

reg ap_idle;
reg conv2_0_ce0;
reg max2_V_0_ce0;
reg max2_V_0_we0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_enable_reg_pp0_iter10;
reg    ap_enable_reg_pp0_iter11;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_state5_pp0_stage0_iter4;
wire    ap_block_state6_pp0_stage0_iter5;
wire    ap_block_state7_pp0_stage0_iter6;
wire    ap_block_state8_pp0_stage0_iter7;
wire    ap_block_state9_pp0_stage0_iter8;
wire    ap_block_state10_pp0_stage0_iter9;
wire    ap_block_state11_pp0_stage0_iter10;
wire    ap_block_state12_pp0_stage0_iter11;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln244_fu_122_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln245_fu_137_p2;
reg   [0:0] icmp_ln245_reg_325;
reg   [0:0] icmp_ln245_reg_325_pp0_iter1_reg;
reg   [0:0] icmp_ln245_reg_325_pp0_iter2_reg;
reg   [0:0] icmp_ln245_reg_325_pp0_iter3_reg;
reg   [0:0] icmp_ln245_reg_325_pp0_iter4_reg;
reg   [0:0] icmp_ln245_reg_325_pp0_iter5_reg;
reg   [0:0] icmp_ln245_reg_325_pp0_iter6_reg;
reg   [0:0] icmp_ln245_reg_325_pp0_iter7_reg;
wire   [5:0] select_ln244_fu_143_p3;
reg   [5:0] select_ln244_reg_330;
reg   [5:0] select_ln244_reg_330_pp0_iter1_reg;
reg   [5:0] select_ln244_reg_330_pp0_iter2_reg;
reg   [5:0] select_ln244_reg_330_pp0_iter3_reg;
reg   [5:0] select_ln244_reg_330_pp0_iter4_reg;
reg   [5:0] select_ln244_reg_330_pp0_iter5_reg;
reg   [5:0] select_ln244_reg_330_pp0_iter6_reg;
reg   [5:0] select_ln244_reg_330_pp0_iter7_reg;
reg   [5:0] select_ln244_reg_330_pp0_iter8_reg;
wire   [4:0] select_ln244_1_fu_182_p3;
reg   [4:0] select_ln244_1_reg_337;
wire   [0:0] icmp_ln246_fu_222_p2;
reg   [0:0] icmp_ln246_reg_348;
wire   [7:0] add_ln252_fu_255_p2;
reg   [7:0] add_ln252_reg_353;
reg   [7:0] add_ln252_reg_353_pp0_iter10_reg;
wire   [34:0] tmp1_fu_277_p3;
reg   [34:0] tmp1_reg_358;
wire   [63:0] zext_ln250_fu_213_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln252_fu_290_p1;
reg   [34:0] tmp1_1_fu_62;
reg   [5:0] i_1_fu_66;
wire    ap_loop_init;
reg   [5:0] ap_sig_allocacmp_i_1_load;
wire   [5:0] add_ln245_fu_157_p2;
reg   [4:0] d_1_fu_70;
reg   [9:0] indvar_flatten9_fu_74;
reg   [9:0] ap_sig_allocacmp_indvar_flatten9_load;
wire   [9:0] add_ln244_1_fu_128_p2;
wire   [2:0] grp_fu_151_p1;
wire   [4:0] add_ln244_fu_176_p2;
wire   [9:0] tmp_s_fu_200_p3;
wire   [9:0] select_ln244_1_cast_fu_197_p1;
wire   [9:0] add_ln250_fu_207_p2;
wire   [1:0] grp_fu_151_p2;
wire   [1:0] trunc_ln246_fu_218_p1;
wire   [5:0] mul3_fu_231_p0;
wire   [7:0] mul3_fu_231_p1;
wire   [12:0] mul3_fu_231_p2;
wire   [3:0] tmp_fu_237_p4;
wire   [7:0] tmp_27_cast_fu_247_p3;
wire   [7:0] select_ln244_1_cast1_fu_194_p1;
wire   [34:0] select_ln246_fu_264_p3;
wire   [0:0] icmp_ln1548_fu_271_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg    ap_loop_exit_ready_pp0_iter5_reg;
reg    ap_loop_exit_ready_pp0_iter6_reg;
reg    ap_loop_exit_ready_pp0_iter7_reg;
reg    ap_loop_exit_ready_pp0_iter8_reg;
reg    ap_loop_exit_ready_pp0_iter9_reg;
reg    ap_loop_exit_ready_pp0_iter10_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire   [12:0] mul3_fu_231_p00;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_enable_reg_pp0_iter11 = 1'b0;
#0 ap_done_reg = 1'b0;
end

master_fix_urem_6ns_3ns_2_10_1 #(
    .ID( 1 ),
    .NUM_STAGE( 10 ),
    .din0_WIDTH( 6 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 2 ))
urem_6ns_3ns_2_10_1_U305(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(select_ln244_fu_143_p3),
    .din1(grp_fu_151_p1),
    .ce(1'b1),
    .dout(grp_fu_151_p2)
);

master_fix_mul_6ns_8ns_13_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 6 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 13 ))
mul_6ns_8ns_13_1_1_U306(
    .din0(mul3_fu_231_p0),
    .din1(mul3_fu_231_p1),
    .dout(mul3_fu_231_p2)
);

master_fix_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter10_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
            d_1_fu_70 <= 5'd0;
        end else if ((ap_enable_reg_pp0_iter8 == 1'b1)) begin
            d_1_fu_70 <= select_ln244_1_fu_182_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln244_fu_122_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_1_fu_66 <= add_ln245_fu_157_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_1_fu_66 <= 6'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln244_fu_122_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            indvar_flatten9_fu_74 <= add_ln244_1_fu_128_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten9_fu_74 <= 10'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        add_ln252_reg_353 <= add_ln252_fu_255_p2;
        add_ln252_reg_353_pp0_iter10_reg <= add_ln252_reg_353;
        ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
        ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
        ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
        ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
        ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
        icmp_ln245_reg_325_pp0_iter2_reg <= icmp_ln245_reg_325_pp0_iter1_reg;
        icmp_ln245_reg_325_pp0_iter3_reg <= icmp_ln245_reg_325_pp0_iter2_reg;
        icmp_ln245_reg_325_pp0_iter4_reg <= icmp_ln245_reg_325_pp0_iter3_reg;
        icmp_ln245_reg_325_pp0_iter5_reg <= icmp_ln245_reg_325_pp0_iter4_reg;
        icmp_ln245_reg_325_pp0_iter6_reg <= icmp_ln245_reg_325_pp0_iter5_reg;
        icmp_ln245_reg_325_pp0_iter7_reg <= icmp_ln245_reg_325_pp0_iter6_reg;
        icmp_ln246_reg_348 <= icmp_ln246_fu_222_p2;
        select_ln244_1_reg_337 <= select_ln244_1_fu_182_p3;
        select_ln244_reg_330_pp0_iter2_reg <= select_ln244_reg_330_pp0_iter1_reg;
        select_ln244_reg_330_pp0_iter3_reg <= select_ln244_reg_330_pp0_iter2_reg;
        select_ln244_reg_330_pp0_iter4_reg <= select_ln244_reg_330_pp0_iter3_reg;
        select_ln244_reg_330_pp0_iter5_reg <= select_ln244_reg_330_pp0_iter4_reg;
        select_ln244_reg_330_pp0_iter6_reg <= select_ln244_reg_330_pp0_iter5_reg;
        select_ln244_reg_330_pp0_iter7_reg <= select_ln244_reg_330_pp0_iter6_reg;
        select_ln244_reg_330_pp0_iter8_reg <= select_ln244_reg_330_pp0_iter7_reg;
        tmp1_reg_358 <= tmp1_fu_277_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        icmp_ln245_reg_325_pp0_iter1_reg <= icmp_ln245_reg_325;
        select_ln244_reg_330_pp0_iter1_reg <= select_ln244_reg_330;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln244_fu_122_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln245_reg_325 <= icmp_ln245_fu_137_p2;
        select_ln244_reg_330 <= select_ln244_fu_143_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter10 == 1'b1))) begin
        tmp1_1_fu_62 <= tmp1_fu_277_p3;
    end
end

always @ (*) begin
    if (((icmp_ln244_fu_122_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter10_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i_1_load = 6'd0;
    end else begin
        ap_sig_allocacmp_i_1_load = i_1_fu_66;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten9_load = 10'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten9_load = indvar_flatten9_fu_74;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter9 == 1'b1))) begin
        conv2_0_ce0 = 1'b1;
    end else begin
        conv2_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter11 == 1'b1))) begin
        max2_V_0_ce0 = 1'b1;
    end else begin
        max2_V_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter11 == 1'b1))) begin
        max2_V_0_we0 = 1'b1;
    end else begin
        max2_V_0_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln244_1_fu_128_p2 = (ap_sig_allocacmp_indvar_flatten9_load + 10'd1);

assign add_ln244_fu_176_p2 = (d_1_fu_70 + 5'd1);

assign add_ln245_fu_157_p2 = (select_ln244_fu_143_p3 + 6'd1);

assign add_ln250_fu_207_p2 = (tmp_s_fu_200_p3 + select_ln244_1_cast_fu_197_p1);

assign add_ln252_fu_255_p2 = (tmp_27_cast_fu_247_p3 + select_ln244_1_cast1_fu_194_p1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage0_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign conv2_0_address0 = zext_ln250_fu_213_p1;

assign grp_fu_151_p1 = 6'd3;

assign icmp_ln1548_fu_271_p2 = ((select_ln246_fu_264_p3 < conv2_0_q0) ? 1'b1 : 1'b0);

assign icmp_ln244_fu_122_p2 = ((ap_sig_allocacmp_indvar_flatten9_load == 10'd672) ? 1'b1 : 1'b0);

assign icmp_ln245_fu_137_p2 = ((ap_sig_allocacmp_i_1_load == 6'd42) ? 1'b1 : 1'b0);

assign icmp_ln246_fu_222_p2 = ((trunc_ln246_fu_218_p1 == 2'd0) ? 1'b1 : 1'b0);

assign max2_V_0_address0 = zext_ln252_fu_290_p1;

assign max2_V_0_d0 = tmp1_reg_358;

assign mul3_fu_231_p0 = mul3_fu_231_p00;

assign mul3_fu_231_p00 = select_ln244_reg_330_pp0_iter8_reg;

assign mul3_fu_231_p1 = 13'd86;

assign select_ln244_1_cast1_fu_194_p1 = select_ln244_1_reg_337;

assign select_ln244_1_cast_fu_197_p1 = select_ln244_1_reg_337;

assign select_ln244_1_fu_182_p3 = ((icmp_ln245_reg_325_pp0_iter7_reg[0:0] == 1'b1) ? add_ln244_fu_176_p2 : d_1_fu_70);

assign select_ln244_fu_143_p3 = ((icmp_ln245_fu_137_p2[0:0] == 1'b1) ? 6'd0 : ap_sig_allocacmp_i_1_load);

assign select_ln246_fu_264_p3 = ((icmp_ln246_reg_348[0:0] == 1'b1) ? 35'd0 : tmp1_1_fu_62);

assign tmp1_fu_277_p3 = ((icmp_ln1548_fu_271_p2[0:0] == 1'b1) ? conv2_0_q0 : select_ln246_fu_264_p3);

assign tmp_27_cast_fu_247_p3 = {{tmp_fu_237_p4}, {4'd0}};

assign tmp_fu_237_p4 = {{mul3_fu_231_p2[11:8]}};

assign tmp_s_fu_200_p3 = {{select_ln244_reg_330_pp0_iter8_reg}, {4'd0}};

assign trunc_ln246_fu_218_p1 = grp_fu_151_p2[1:0];

assign zext_ln250_fu_213_p1 = add_ln250_fu_207_p2;

assign zext_ln252_fu_290_p1 = add_ln252_reg_353_pp0_iter10_reg;

endmodule //master_fix_master_fix_Pipeline_VITIS_LOOP_244_1_VITIS_LOOP_245_2
