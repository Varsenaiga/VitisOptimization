// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
// Version: 2021.1
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="master_fix_master_fix,hls_ip_2021_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu7ev-ffvf1517-3-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.182600,HLS_SYN_LAT=8217,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=181,HLS_SYN_LUT=266,HLS_VERSION=2021_1}" *)

module master_fix (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_r_address0,
        input_r_ce0,
        input_r_q0,
        out_r_address0,
        out_r_ce0,
        out_r_we0,
        out_r_d0
);

parameter    ap_ST_fsm_state1 = 6'd1;
parameter    ap_ST_fsm_state2 = 6'd2;
parameter    ap_ST_fsm_state3 = 6'd4;
parameter    ap_ST_fsm_state4 = 6'd8;
parameter    ap_ST_fsm_state5 = 6'd16;
parameter    ap_ST_fsm_state6 = 6'd32;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [8:0] input_r_address0;
output   input_r_ce0;
input  [31:0] input_r_q0;
output  [11:0] out_r_address0;
output   out_r_ce0;
output   out_r_we0;
output  [31:0] out_r_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg input_r_ce0;
reg out_r_ce0;
reg out_r_we0;

(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [2:0] firstKernel_f_V_1_1_address0;
reg    firstKernel_f_V_1_1_ce0;
wire   [17:0] firstKernel_f_V_1_1_q0;
wire   [2:0] firstBias_f_V_address0;
reg    firstBias_f_V_ce0;
wire   [21:0] firstBias_f_V_q0;
wire   [11:0] zext_ln36_1_fu_167_p1;
reg   [11:0] zext_ln36_1_reg_319;
wire    ap_CS_fsm_state2;
wire   [3:0] add_ln36_fu_177_p2;
reg   [3:0] add_ln36_reg_327;
wire   [0:0] icmp_ln36_fu_171_p2;
wire  signed [48:0] sext_ln1245_fu_183_p1;
reg  signed [48:0] sext_ln1245_reg_342;
wire    ap_CS_fsm_state3;
wire  signed [48:0] sext_ln38_fu_195_p1;
reg  signed [48:0] sext_ln38_reg_347;
wire  signed [11:0] sext_ln38_1_fu_221_p1;
reg  signed [11:0] sext_ln38_1_reg_352;
wire    ap_CS_fsm_state4;
wire   [7:0] add_ln38_fu_231_p2;
reg   [7:0] add_ln38_reg_360;
wire    ap_CS_fsm_state5;
reg   [11:0] out_addr_reg_370;
wire   [1:0] add_ln40_fu_277_p2;
reg   [1:0] add_ln40_reg_378;
reg   [7:0] i_reg_131;
wire   [0:0] icmp_ln40_fu_271_p2;
reg   [1:0] j_reg_142;
wire   [0:0] icmp_ln38_fu_225_p2;
wire    ap_CS_fsm_state6;
wire   [63:0] zext_ln36_fu_161_p1;
wire  signed [63:0] sext_ln1169_fu_250_p1;
wire   [63:0] zext_ln42_fu_266_p1;
reg   [3:0] d_fu_76;
wire   [40:0] rhs_1_fu_187_p3;
wire   [9:0] tmp_fu_203_p3;
wire   [10:0] zext_ln1169_1_fu_211_p1;
wire   [10:0] zext_ln1169_fu_199_p1;
wire   [10:0] sub_ln1169_fu_215_p2;
wire   [11:0] zext_ln1169_2_fu_241_p1;
wire  signed [11:0] add_ln1169_fu_245_p2;
wire   [11:0] shl_ln42_fu_255_p2;
wire   [11:0] add_ln42_fu_261_p2;
wire  signed [17:0] mul_ln1245_fu_287_p1;
wire   [48:0] mul_ln1245_fu_287_p2;
wire   [48:0] ret_V_fu_292_p2;
wire   [29:0] trunc_ln_fu_297_p4;
reg   [5:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 6'd1;
end

master_fix_firstKernel_f_V_1_1 #(
    .DataWidth( 18 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
firstKernel_f_V_1_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(firstKernel_f_V_1_1_address0),
    .ce0(firstKernel_f_V_1_1_ce0),
    .q0(firstKernel_f_V_1_1_q0)
);

master_fix_firstBias_f_V #(
    .DataWidth( 22 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
firstBias_f_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(firstBias_f_V_address0),
    .ce0(firstBias_f_V_ce0),
    .q0(firstBias_f_V_q0)
);

master_fix_mul_32s_18s_49_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 18 ),
    .dout_WIDTH( 49 ))
mul_32s_18s_49_1_1_U1(
    .din0(input_r_q0),
    .din1(mul_ln1245_fu_287_p1),
    .dout(mul_ln1245_fu_287_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        d_fu_76 <= 4'd0;
    end else if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln38_fu_225_p2 == 1'd1))) begin
        d_fu_76 <= add_ln36_reg_327;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        i_reg_131 <= 8'd0;
    end else if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln40_fu_271_p2 == 1'd1))) begin
        i_reg_131 <= add_ln38_reg_360;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        j_reg_142 <= add_ln40_reg_378;
    end else if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln38_fu_225_p2 == 1'd0))) begin
        j_reg_142 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln36_reg_327 <= add_ln36_fu_177_p2;
        zext_ln36_1_reg_319[3 : 0] <= zext_ln36_1_fu_167_p1[3 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        add_ln38_reg_360 <= add_ln38_fu_231_p2;
        sext_ln38_1_reg_352 <= sext_ln38_1_fu_221_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        add_ln40_reg_378 <= add_ln40_fu_277_p2;
        out_addr_reg_370 <= zext_ln42_fu_266_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        sext_ln1245_reg_342 <= sext_ln1245_fu_183_p1;
        sext_ln38_reg_347[48 : 19] <= sext_ln38_fu_195_p1[48 : 19];
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

always @ (*) begin
    if (((icmp_ln36_fu_171_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln36_fu_171_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        firstBias_f_V_ce0 = 1'b1;
    end else begin
        firstBias_f_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        firstKernel_f_V_1_1_ce0 = 1'b1;
    end else begin
        firstKernel_f_V_1_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        input_r_ce0 = 1'b1;
    end else begin
        input_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        out_r_ce0 = 1'b1;
    end else begin
        out_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        out_r_we0 = 1'b1;
    end else begin
        out_r_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln36_fu_171_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln38_fu_225_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln40_fu_271_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln1169_fu_245_p2 = ($signed(sext_ln38_1_reg_352) + $signed(zext_ln1169_2_fu_241_p1));

assign add_ln36_fu_177_p2 = (d_fu_76 + 4'd1);

assign add_ln38_fu_231_p2 = (i_reg_131 + 8'd1);

assign add_ln40_fu_277_p2 = (j_reg_142 + 2'd1);

assign add_ln42_fu_261_p2 = (shl_ln42_fu_255_p2 + zext_ln36_1_reg_319);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign firstBias_f_V_address0 = zext_ln36_fu_161_p1;

assign firstKernel_f_V_1_1_address0 = zext_ln36_fu_161_p1;

assign icmp_ln36_fu_171_p2 = ((d_fu_76 == 4'd8) ? 1'b1 : 1'b0);

assign icmp_ln38_fu_225_p2 = ((i_reg_131 == 8'd128) ? 1'b1 : 1'b0);

assign icmp_ln40_fu_271_p2 = ((j_reg_142 == 2'd3) ? 1'b1 : 1'b0);

assign input_r_address0 = sext_ln1169_fu_250_p1;

assign mul_ln1245_fu_287_p1 = sext_ln1245_reg_342;

assign out_r_address0 = out_addr_reg_370;

assign out_r_d0 = $signed(trunc_ln_fu_297_p4);

assign ret_V_fu_292_p2 = ($signed(sext_ln38_reg_347) + $signed(mul_ln1245_fu_287_p2));

assign rhs_1_fu_187_p3 = {{firstBias_f_V_q0}, {19'd0}};

assign sext_ln1169_fu_250_p1 = add_ln1169_fu_245_p2;

assign sext_ln1245_fu_183_p1 = $signed(firstKernel_f_V_1_1_q0);

assign sext_ln38_1_fu_221_p1 = $signed(sub_ln1169_fu_215_p2);

assign sext_ln38_fu_195_p1 = $signed(rhs_1_fu_187_p3);

assign shl_ln42_fu_255_p2 = add_ln1169_fu_245_p2 << 12'd3;

assign sub_ln1169_fu_215_p2 = (zext_ln1169_1_fu_211_p1 - zext_ln1169_fu_199_p1);

assign tmp_fu_203_p3 = {{i_reg_131}, {2'd0}};

assign trunc_ln_fu_297_p4 = {{ret_V_fu_292_p2[48:19]}};

assign zext_ln1169_1_fu_211_p1 = tmp_fu_203_p3;

assign zext_ln1169_2_fu_241_p1 = j_reg_142;

assign zext_ln1169_fu_199_p1 = i_reg_131;

assign zext_ln36_1_fu_167_p1 = d_fu_76;

assign zext_ln36_fu_161_p1 = d_fu_76;

assign zext_ln42_fu_266_p1 = add_ln42_fu_261_p2;

always @ (posedge ap_clk) begin
    zext_ln36_1_reg_319[11:4] <= 8'b00000000;
    sext_ln38_reg_347[18:0] <= 19'b0000000000000000000;
end

endmodule //master_fix
