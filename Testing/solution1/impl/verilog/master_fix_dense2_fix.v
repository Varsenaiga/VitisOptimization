// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
// Version: 2021.1
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module master_fix_dense2_fix (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_0_address0,
        m_0_ce0,
        m_0_q0,
        m_0_address1,
        m_0_ce1,
        m_0_q1,
        ap_return_0,
        ap_return_1,
        ap_return_2,
        ap_return_3
);

parameter    ap_ST_fsm_state1 = 11'd1;
parameter    ap_ST_fsm_state2 = 11'd2;
parameter    ap_ST_fsm_state3 = 11'd4;
parameter    ap_ST_fsm_state4 = 11'd8;
parameter    ap_ST_fsm_state5 = 11'd16;
parameter    ap_ST_fsm_state6 = 11'd32;
parameter    ap_ST_fsm_state7 = 11'd64;
parameter    ap_ST_fsm_state8 = 11'd128;
parameter    ap_ST_fsm_state9 = 11'd256;
parameter    ap_ST_fsm_state10 = 11'd512;
parameter    ap_ST_fsm_state11 = 11'd1024;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [3:0] m_0_address0;
output   m_0_ce0;
input  [34:0] m_0_q0;
output  [3:0] m_0_address1;
output   m_0_ce1;
input  [34:0] m_0_q1;
output  [35:0] ap_return_0;
output  [35:0] ap_return_1;
output  [35:0] ap_return_2;
output  [35:0] ap_return_3;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[3:0] m_0_address0;
reg m_0_ce0;
reg[3:0] m_0_address1;
reg m_0_ce1;

(* fsm_encoding = "none" *) reg   [10:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [34:0] m_0_load_reg_303;
wire    ap_CS_fsm_state2;
reg   [34:0] m_0_load_1_reg_308;
reg   [34:0] m_0_load_2_reg_323;
wire    ap_CS_fsm_state3;
reg   [34:0] m_0_load_3_reg_328;
reg   [34:0] m_0_load_4_reg_343;
wire    ap_CS_fsm_state4;
reg   [34:0] m_0_load_5_reg_348;
reg   [34:0] m_0_load_6_reg_363;
wire    ap_CS_fsm_state5;
reg   [34:0] m_0_load_7_reg_368;
reg   [34:0] m_0_load_8_reg_383;
wire    ap_CS_fsm_state6;
reg   [34:0] m_0_load_9_reg_388;
reg   [34:0] m_0_load_10_reg_403;
wire    ap_CS_fsm_state7;
reg   [34:0] m_0_load_11_reg_408;
reg   [34:0] m_0_load_12_reg_423;
wire    ap_CS_fsm_state8;
reg   [34:0] m_0_load_13_reg_428;
reg   [34:0] m_0_load_14_reg_443;
wire    ap_CS_fsm_state9;
reg   [34:0] m_0_load_15_reg_448;
wire    grp_dense2_fix_Pipeline_Dense2_Loop_fu_207_ap_start;
wire    grp_dense2_fix_Pipeline_Dense2_Loop_fu_207_ap_done;
wire    grp_dense2_fix_Pipeline_Dense2_Loop_fu_207_ap_idle;
wire    grp_dense2_fix_Pipeline_Dense2_Loop_fu_207_ap_ready;
wire   [35:0] grp_dense2_fix_Pipeline_Dense2_Loop_fu_207_out_016_07_out;
wire    grp_dense2_fix_Pipeline_Dense2_Loop_fu_207_out_016_07_out_ap_vld;
wire   [35:0] grp_dense2_fix_Pipeline_Dense2_Loop_fu_207_out_0_06_out;
wire    grp_dense2_fix_Pipeline_Dense2_Loop_fu_207_out_0_06_out_ap_vld;
wire   [35:0] grp_dense2_fix_Pipeline_Dense2_Loop_fu_207_out_02_05_out;
wire    grp_dense2_fix_Pipeline_Dense2_Loop_fu_207_out_02_05_out_ap_vld;
wire   [35:0] grp_dense2_fix_Pipeline_Dense2_Loop_fu_207_out_03_04_out;
wire    grp_dense2_fix_Pipeline_Dense2_Loop_fu_207_out_03_04_out_ap_vld;
reg    grp_dense2_fix_Pipeline_Dense2_Loop_fu_207_ap_start_reg;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state11;
reg   [10:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state8_blk;
wire    ap_ST_fsm_state9_blk;
reg    ap_ST_fsm_state10_blk;
wire    ap_ST_fsm_state11_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 11'd1;
#0 grp_dense2_fix_Pipeline_Dense2_Loop_fu_207_ap_start_reg = 1'b0;
end

master_fix_dense2_fix_Pipeline_Dense2_Loop grp_dense2_fix_Pipeline_Dense2_Loop_fu_207(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_dense2_fix_Pipeline_Dense2_Loop_fu_207_ap_start),
    .ap_done(grp_dense2_fix_Pipeline_Dense2_Loop_fu_207_ap_done),
    .ap_idle(grp_dense2_fix_Pipeline_Dense2_Loop_fu_207_ap_idle),
    .ap_ready(grp_dense2_fix_Pipeline_Dense2_Loop_fu_207_ap_ready),
    .r_V_cast(m_0_load_reg_303),
    .r_V_2_cast(m_0_load_1_reg_308),
    .r_V_4_cast(m_0_load_2_reg_323),
    .r_V_6_cast(m_0_load_3_reg_328),
    .r_V_8_cast(m_0_load_4_reg_343),
    .r_V_10_cast(m_0_load_5_reg_348),
    .r_V_12_cast(m_0_load_6_reg_363),
    .r_V_14_cast(m_0_load_7_reg_368),
    .r_V_16_cast(m_0_load_8_reg_383),
    .r_V_18_cast(m_0_load_9_reg_388),
    .r_V_20_cast(m_0_load_10_reg_403),
    .r_V_22_cast(m_0_load_11_reg_408),
    .r_V_24_cast(m_0_load_12_reg_423),
    .r_V_26_cast(m_0_load_13_reg_428),
    .r_V_28_cast(m_0_load_14_reg_443),
    .zext_ln306(m_0_load_15_reg_448),
    .out_016_07_out(grp_dense2_fix_Pipeline_Dense2_Loop_fu_207_out_016_07_out),
    .out_016_07_out_ap_vld(grp_dense2_fix_Pipeline_Dense2_Loop_fu_207_out_016_07_out_ap_vld),
    .out_0_06_out(grp_dense2_fix_Pipeline_Dense2_Loop_fu_207_out_0_06_out),
    .out_0_06_out_ap_vld(grp_dense2_fix_Pipeline_Dense2_Loop_fu_207_out_0_06_out_ap_vld),
    .out_02_05_out(grp_dense2_fix_Pipeline_Dense2_Loop_fu_207_out_02_05_out),
    .out_02_05_out_ap_vld(grp_dense2_fix_Pipeline_Dense2_Loop_fu_207_out_02_05_out_ap_vld),
    .out_03_04_out(grp_dense2_fix_Pipeline_Dense2_Loop_fu_207_out_03_04_out),
    .out_03_04_out_ap_vld(grp_dense2_fix_Pipeline_Dense2_Loop_fu_207_out_03_04_out_ap_vld)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_dense2_fix_Pipeline_Dense2_Loop_fu_207_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state9)) begin
            grp_dense2_fix_Pipeline_Dense2_Loop_fu_207_ap_start_reg <= 1'b1;
        end else if ((grp_dense2_fix_Pipeline_Dense2_Loop_fu_207_ap_ready == 1'b1)) begin
            grp_dense2_fix_Pipeline_Dense2_Loop_fu_207_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        m_0_load_10_reg_403 <= m_0_q1;
        m_0_load_11_reg_408 <= m_0_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        m_0_load_12_reg_423 <= m_0_q1;
        m_0_load_13_reg_428 <= m_0_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        m_0_load_14_reg_443 <= m_0_q1;
        m_0_load_15_reg_448 <= m_0_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        m_0_load_1_reg_308 <= m_0_q0;
        m_0_load_reg_303 <= m_0_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        m_0_load_2_reg_323 <= m_0_q1;
        m_0_load_3_reg_328 <= m_0_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        m_0_load_4_reg_343 <= m_0_q1;
        m_0_load_5_reg_348 <= m_0_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        m_0_load_6_reg_363 <= m_0_q1;
        m_0_load_7_reg_368 <= m_0_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        m_0_load_8_reg_383 <= m_0_q1;
        m_0_load_9_reg_388 <= m_0_q0;
    end
end

always @ (*) begin
    if ((grp_dense2_fix_Pipeline_Dense2_Loop_fu_207_ap_done == 1'b0)) begin
        ap_ST_fsm_state10_blk = 1'b1;
    end else begin
        ap_ST_fsm_state10_blk = 1'b0;
    end
end

assign ap_ST_fsm_state11_blk = 1'b0;

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

assign ap_ST_fsm_state7_blk = 1'b0;

assign ap_ST_fsm_state8_blk = 1'b0;

assign ap_ST_fsm_state9_blk = 1'b0;

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        m_0_address0 = 64'd15;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        m_0_address0 = 64'd13;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        m_0_address0 = 64'd11;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        m_0_address0 = 64'd9;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        m_0_address0 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        m_0_address0 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        m_0_address0 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        m_0_address0 = 64'd1;
    end else begin
        m_0_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        m_0_address1 = 64'd14;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        m_0_address1 = 64'd12;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        m_0_address1 = 64'd10;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        m_0_address1 = 64'd8;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        m_0_address1 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        m_0_address1 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        m_0_address1 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        m_0_address1 = 64'd0;
    end else begin
        m_0_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)))) begin
        m_0_ce0 = 1'b1;
    end else begin
        m_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)))) begin
        m_0_ce1 = 1'b1;
    end else begin
        m_0_ce1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            if (((1'b1 == ap_CS_fsm_state10) & (grp_dense2_fix_Pipeline_Dense2_Loop_fu_207_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ap_return_0 = grp_dense2_fix_Pipeline_Dense2_Loop_fu_207_out_0_06_out;

assign ap_return_1 = grp_dense2_fix_Pipeline_Dense2_Loop_fu_207_out_016_07_out;

assign ap_return_2 = grp_dense2_fix_Pipeline_Dense2_Loop_fu_207_out_02_05_out;

assign ap_return_3 = grp_dense2_fix_Pipeline_Dense2_Loop_fu_207_out_03_04_out;

assign grp_dense2_fix_Pipeline_Dense2_Loop_fu_207_ap_start = grp_dense2_fix_Pipeline_Dense2_Loop_fu_207_ap_start_reg;

endmodule //master_fix_dense2_fix
